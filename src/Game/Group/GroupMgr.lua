---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by richyczhou.
--- DateTime: 2025/4/7 16:05
---

local ArmyMgr = require("Game/Army/ArmyMgr")
local CommonUtil = require("Utils/CommonUtil")
local EventID = require("Define/EventID")
local EventMgr = require("Event/EventMgr")
local GroupDefine = require("Game/Group/GroupDefine")
local LoginMgr = require("Game/Login/LoginMgr")
local LuaClass = require("Core/LuaClass")
local MajorUtil = require("Utils/MajorUtil")
local MgrBase = require("Common/MgrBase")
local MSDKDefine = require("Define/MSDKDefine")
local MsgTipsUtil = require("Utils/MsgTipsUtil")
local UIViewID = require("Define/UIViewID")
local UIViewMgr = require("UI/UIViewMgr")

local ArmyMainVM = require("Game/Army/VM/ArmyMainVM")
local ArmyMemberPanelVM = nil
local ArmyMemberPageVM = nil

local LoginNewDefine = require("Game/LoginNew/LoginNewDefine")
local LoginStrID = LoginNewDefine.LoginStrID
local LSTR = _G.LSTR
local UGroupMgr = _G.UE.UGroupMgr

local FLOG_INFO = _G.FLOG_INFO
local FLOG_WARNING = _G.FLOG_WARNING

---@class GroupMgr : MgrBase
local GroupMgr = LuaClass(MgrBase)

function GroupMgr:Ctor()
    --- QQ/微信群按钮类型
    self.GroupBtnType = nil

    --- QQ/微信群ID
    self.GroupId = nil
    --- QQ/微信群名称
    self.GroupName = nil

    --- 是否是群成员
    self.IsGroupMember = nil

    --- 是否绑定群组
    self.IsBindGroup = nil
    --- QQ群OpenID,用于发送群消息
    self.GroupOpenID = nil

    --- 部队ID
    self.ArmyId = nil
    --- 部队名称
    self.ArmyName = nil
    --- 部队队长RoleID
    self.LeaderRoleID = nil
    --- 是否是群主
    self.IsLeader = nil
end

function GroupMgr:OnInit()
    FLOG_INFO("[GroupMgr:OnInit] ")
end

function GroupMgr:OnBegin()
    FLOG_INFO("[GroupMgr:OnBegin] ")
end

function GroupMgr:OnEnd()

end

function GroupMgr:OnShutdown()

end

function GroupMgr:OnRegisterGameEvent()
    FLOG_INFO("[GroupMgr:OnRegisterGameEvent] ")
    self:RegisterGameEvent(EventID.GroupNotify, self.OnGroupNotify)
end

function GroupMgr:ShowGroupBtn()
    ArmyMemberPanelVM = ArmyMainVM:GetMemberPanelVM()
    ArmyMemberPageVM = ArmyMemberPanelVM:GetArmyMemberPageVM()

    ArmyMemberPageVM:SetGroupBtnState()

    self.ArmyId = ArmyMgr:GetArmyID()
    self.ArmyName = ArmyMgr:GetArmyName()
    self.LeaderRoleID = ArmyMgr:GetLeaderRoleID()
    self.IsLeader = ArmyMgr:IsLeader()

    self:GetGroupState()
end

function GroupMgr:SetGroupBtnState(GroupBtnType)
    FLOG_INFO("[GroupMgr:SetGroupBtnState] GroupBtnType:%d", GroupBtnType)
    self.GroupBtnType = GroupBtnType

    local TextMap = {
        [GroupDefine.GroupBtnType.Create] = LSTR(GroupDefine.GroupStrID.CreateGroup),
        [GroupDefine.GroupBtnType.Unbind] = LSTR(GroupDefine.GroupStrID.UnbindGroup),
        [GroupDefine.GroupBtnType.Join]   = LSTR(GroupDefine.GroupStrID.JoinGroup),
        [GroupDefine.GroupBtnType.Joined] = LSTR(GroupDefine.GroupStrID.JoinedGroup),
        [GroupDefine.GroupBtnType.Remain] = LSTR(GroupDefine.GroupStrID.RemainToCreateGroup)
    }

    if ArmyMemberPageVM then
        ArmyMemberPageVM:SetGroupBtnText(TextMap[GroupBtnType] or "")
    end
end

function GroupMgr:HandleGroupBtnClick()
    if not CommonUtil.IsIOSPlatform() and not CommonUtil.IsAndroidPlatform() then
        FLOG_WARNING("[GroupMgr:HandleGroupBtnClick] Platform not support:%s", CommonUtil.GetPlatformName())
        return
    end

    if not self.GroupBtnType then
        FLOG_WARNING("[GroupMgr:HandleGroupBtnClick] GroupBtnType is nil")
        return
    end

    FLOG_INFO("[GroupMgr:HandleGroupBtnClick] GroupBtnType:%d", self.GroupBtnType)
    if self.GroupBtnType == GroupDefine.GroupBtnType.Joined then
        return
    end

    local ContentMap = {
        [GroupDefine.GroupBtnType.Create] = LSTR(GroupDefine.GroupStrID.DlgCreateGroup),
        [GroupDefine.GroupBtnType.Unbind] = LSTR(GroupDefine.GroupStrID.DlgUnbindGroup),
        [GroupDefine.GroupBtnType.Join]   = LSTR(GroupDefine.GroupStrID.DlgJoinGroup),
        [GroupDefine.GroupBtnType.Remain] = LSTR(GroupDefine.GroupStrID.DlgRemain)
    }
    local Content = ContentMap[self.GroupBtnType]

    local ActionMap = {
        [GroupDefine.GroupBtnType.Create] = function() self:CreateGroup() end,
        [GroupDefine.GroupBtnType.Unbind] = function() self:UnbindGroup() end,
        [GroupDefine.GroupBtnType.Join]   = function() self:JoinGroup() end,
        [GroupDefine.GroupBtnType.Remain] = function() self:SendRemindMessage() end,
    }

    local function Callback()
        local Action = ActionMap[self.GroupBtnType]
        if Action then
            Action()
        end
    end
    -- 10002(确  认), 10003(取  消), 10004(提  示)
    _G.MsgBoxUtil.ShowMsgBoxTwoOp(self, LSTR(10004), Content, Callback, nil, LSTR(10003), LSTR(10002))
end

--region Group Notify

---@param GroupData _G.UE.FGroupData
function GroupMgr:OnGroupNotify(GroupData)
    if not GroupData then
        FLOG_WARNING("[GroupMgr:OnGroupNotify] Failed GroupData is nil")
        return
    end

    FLOG_INFO("[GroupMgr:OnGroupNotify] MethodNameID:%d", GroupData.MethodNameID)

    local MethodHandlers = {
        [MSDKDefine.MethodName.kMethodNameCreateGroup]          = function() self:OnCreateGroup(GroupData) end,
        [MSDKDefine.MethodName.kMethodNameBindGroup]            = function() self:OnBindGroup(GroupData) end,
        [MSDKDefine.MethodName.kMethodNameGetGroupList]         = function() self:OnGetGroupList(GroupData) end,
        [MSDKDefine.MethodName.kMethodNameGetGroupState]        = function() self:OnGetGroupState(GroupData) end,
        [MSDKDefine.MethodName.kMethodNameJoinGroup]            = function() self:OnJoinGroup(GroupData) end,
        [MSDKDefine.MethodName.kMethodNameUnbindGroup]          = function() self:OnUnbindGroup(GroupData) end,
        [MSDKDefine.MethodName.kMethodNameRemindToBindGroup]    = function() self:OnRemindToBindGroup(GroupData) end,
        [MSDKDefine.MethodName.kMethodNameSendMessageToGroup]   = function() self:OnSendMessageToGroup(GroupData) end,
        [MSDKDefine.MethodName.kMethodNameGetGroupRelation]     = function() self:OnGetGroupRelation(GroupData) end
    }

    local MethodHandler = MethodHandlers[GroupData.MethodNameID]
    if MethodHandler then
        MethodHandler()
    end
end

function GroupMgr:OnCreateGroup(GroupData)
    FLOG_INFO("[GroupMgr:OnCreateGroup] RetCode:%d, GroupID:%s, GroupName:%s", GroupData.RetCode, GroupData.GroupID or "nil", GroupData.GroupName or "nil")

    self.GroupId = GroupData.GroupID
    self.GroupName = GroupData.GroupName

    if GroupData.RetCode == MSDKDefine.MSDKError.SUCCESS then
        self:SetGroupBtnState(GroupDefine.GroupBtnType.Unbind)
        MsgTipsUtil.ShowTips(LSTR(GroupDefine.GroupStrID.TipCreateSuccess))
    else
        if GroupData.ThirdCode == MSDKDefine.ThirdCode.WX_CREATE_GROUP_LIMIT_DAILY then
            local ChannelID = LoginMgr:GetChannelID()
            if not ChannelID then
                FLOG_WARNING("[GroupMgr:OnCreateGroup] Can't get channelID")
                return
            end

            local TipMap = {
                [MSDKDefine.ChannelID.QQ] = LSTR(GroupDefine.GroupStrID.TipCreateFailedQQ),
                [MSDKDefine.ChannelID.WeChat] = LSTR(GroupDefine.GroupStrID.TipCreateFailedWx)
            }

            local TipsContent = TipMap[ChannelID]
            if TipsContent then
                MsgTipsUtil.ShowTips(TipsContent)
            end
        end
    end
end

function GroupMgr:OnBindGroup(GroupData)
    FLOG_INFO("[GroupMgr:OnBindGroup] ")
end

function GroupMgr:OnUnbindGroup(GroupData)
    FLOG_INFO("[GroupMgr:OnUnbindGroup] ")
    if GroupData.RetCode == MSDKDefine.MSDKError.SUCCESS then
        self:SetGroupBtnState(GroupDefine.GroupBtnType.Create)
        MsgTipsUtil.ShowTips(LSTR(GroupDefine.GroupStrID.TipUnbindSuccess))
    end
end

function GroupMgr:OnGetGroupList(GroupData)
    FLOG_INFO("[GroupMgr:OnGetGroupList] ")
end

-- 返回信息及结果，可以获取 group_openid 用于发送群消息；
-- 返回码中，Status：0 表示未绑定群组，1 表示工会已绑定群组。
function GroupMgr:OnGetGroupState(GroupData)
    if GroupData.RetCode ~= MSDKDefine.MSDKError.SUCCESS then
        FLOG_WARNING("[GroupMgr:OnGetGroupState] RetCode:%d", GroupData.RetCode)
        return
    end

    local IsBindGroup = GroupData.Status == 1
    FLOG_INFO("[GroupMgr:OnGetGroupState] Status:%d", GroupData.Status)

    self.GroupId = GroupData.GroupID
    self.GroupName = GroupData.GroupName
    self.GroupOpenID = GroupData.GroupOpenID

    if IsBindGroup then -- 已绑群
        if self.IsLeader then -- 部队长
            -- TODO 如果是部队长建QQ群之后把部队长转给微信玩家A,那微信玩家A此时是什么状态
            self:SetGroupBtnState(GroupDefine.GroupBtnType.Unbind)
        else -- 队员
            -- 获取群关系
            self:GetGroupRelation()
        end
    else -- 未绑群
        if self.IsLeader then -- 部队长
            self:SetGroupBtnState(GroupDefine.GroupBtnType.Create)
        else -- 队员
            self:SetGroupBtnState(GroupDefine.GroupBtnType.Remain)
        end
    end
end

function GroupMgr:OnJoinGroup(GroupData)
    FLOG_INFO("[GroupMgr:OnJoinGroup] RetCode:%d", GroupData.RetCode)
    if GroupData.RetCode == MSDKDefine.MSDKError.SUCCESS then
        self:SetGroupBtnState(GroupDefine.GroupBtnType.Joined)
        MsgTipsUtil.ShowTips(LSTR(GroupDefine.GroupStrID.TipJoinSuccess))
    end
end

function GroupMgr:OnRemindToBindGroup(GroupData)
    FLOG_INFO("[GroupMgr:OnRemindToBindGroup] ")
end

function GroupMgr:OnSendMessageToGroup(GroupData)
    FLOG_INFO("[GroupMgr:OnSendMessageToGroup] ")
end

function GroupMgr:OnGetGroupRelation(GroupData)
    if GroupData.RetCode ~= MSDKDefine.MSDKError.SUCCESS then
        FLOG_WARNING("[GroupMgr:OnGetGroupRelation] RetCode:%d", GroupData.RetCode)
        return
    end

    local GroupRelationStatus = GroupData.Status
    FLOG_INFO("[GroupMgr:OnGetGroupRelation] GroupRelationStatus:%d", GroupRelationStatus)

    if GroupRelationStatus == GroupDefine.GroupRelationType.NotMember or GroupRelationStatus == GroupDefine.GroupRelationType.QueryFailed then
        self:SetGroupBtnState(GroupDefine.GroupBtnType.Join)
    else
        self:SetGroupBtnState(GroupDefine.GroupBtnType.Joined)
    end
end

--endregion Group Notify

--region Group Interface

function GroupMgr:CreateGroup()
    FLOG_INFO("[GroupMgr:CreateGroup] ")
    local WorldId = LoginMgr:GetWorldID()
    local ChannelID = LoginMgr:GetChannelID()

    local UnionID = self.ArmyId or ""
    local UnionName = self.ArmyName or ""
    local RoleName = MajorUtil.GetMajorName()
    local ZoneID = WorldId
    local RoleID = MajorUtil.GetMajorRoleID()
    local ExtraJson = ""
    if MSDKDefine.ChannelID.QQ == ChannelID then
        if not CommonUtil.IsShipping() then
            ChannelID = WorldId
        end
        --ExtraJson = string.format('{"areaID":"%d","partitionID":"%d","type":"0"}' , ChannelID, WorldId)
        ExtraJson = string.format('{"areaID":"%d"}', ChannelID)
    end
    UGroupMgr.CreateGroup(UnionID, UnionName, RoleName, ZoneID, RoleID, ExtraJson)
end

-- 仅QQ, 会长绑定已存在的 QQ 群组，调用该接口前需要先调用 GetGroupList() 接口拉取已创建的群列表。
function GroupMgr:BindGroup()
    FLOG_INFO("[GroupMgr:BindGroup] ")
    local WorldId = LoginMgr:GetWorldID()
    local ChannelID = LoginMgr:GetChannelID()

    local UnionID = self.ArmyId or ""
    local ZoneID = WorldId
    local RoleID = MajorUtil.GetMajorRoleID()
    local GroupID = ""
    local GroupName = ""
    local ExtraJson = ""
    if MSDKDefine.ChannelID.QQ == ChannelID then
        GroupID = self.GroupId or ""
        GroupName = self.GroupName or ""

        if not CommonUtil.IsShipping() then
            ChannelID = WorldId
        end
        ExtraJson = string.format('{"areaID":"%d"}' , ChannelID)
    end
    UGroupMgr.BindGroup(UnionID, ZoneID, RoleID, GroupID, GroupName, ExtraJson)
end

function GroupMgr:GetGroupState()
    FLOG_INFO("[GroupMgr:GetGroupState] ")
    local WorldId = LoginMgr:GetWorldID()
    local ChannelID = LoginMgr:GetChannelID()
    local UnionID = self.ArmyId or ""
    local ZoneID = LoginMgr:GetWorldID()
    local ExtraJson = ""
    if MSDKDefine.ChannelID.QQ == ChannelID then
        if not CommonUtil.IsShipping() then
            ChannelID = WorldId
        end
        ExtraJson = string.format('{"areaID":"%d"}' , ChannelID)
    end
    UGroupMgr.GetGroupState(UnionID, ZoneID, ExtraJson)
end

function GroupMgr:JoinGroup()
    FLOG_INFO("[GroupMgr:JoinGroup] ")
    local WorldId = LoginMgr:GetWorldID()
    local ChannelID = LoginMgr:GetChannelID()

    local UnionID = self.ArmyId or ""
    local ZoneID = WorldId
    local RoleID = MajorUtil.GetMajorRoleID()
    local GroupID = ""
    local ExtraJson = ""
    if MSDKDefine.ChannelID.QQ == ChannelID then
        GroupID = self.GroupId or ""
        if not CommonUtil.IsShipping() then
            ChannelID = WorldId
        end
        ExtraJson = string.format('{"areaID":"%d","partitionID":"%d","userZoneID":"%d"}', ChannelID, WorldId, WorldId)
    end
    UGroupMgr.JoinGroup(UnionID, ZoneID, RoleID, GroupID, ExtraJson)
end

--- 发送群组消息(微信/QQ端)
function GroupMgr:SendGroupMessage(Type, ActionReport, Title, Content, Link, ExtraJson)
    FLOG_INFO("[GroupMgr:SendGroupMessage] ")
    local GroupMsg = {
        -- 【必填】消息类型：1=应用邀请，2=链接分享
        Type = Type,
        -- 【必填】分享类型：1=邀请，2=炫耀，3=赠送，4=索要
        ActionReport = ActionReport,
        -- 【必填】消息标题
        Title = Title,
        -- 【必填】消息描述
        Desc = Content,
        -- 【选填】链接地址（当Type=2时必须填写）
        Link = Link,
        -- 【选填】扩展字段
        ExtraJson = ExtraJson
    }

    local TargetId
    if MSDKDefine.ChannelID.QQ == LoginMgr.ChannelID then
        TargetId = self.GroupId or ""
    else
        TargetId = self.ArmyId or ""
    end

    -- 记录调试信息
    FLOG_INFO("[GroupMgr:SendGroupMessage] Type:%d, ActionReport:%d, Title:%s",
            GroupMsg.Type, GroupMsg.ActionReport, GroupMsg.Title)

    -- 调用底层接口发送消息
    UGroupMgr.SendGroupMessage(GroupMsg, TargetId)
end

function GroupMgr:GetGroupRelation()
    FLOG_INFO("[GroupMgr:GetGroupRelation] ")
    local WorldId = LoginMgr:GetWorldID()
    local ChannelID = LoginMgr:GetChannelID()
    local TargetId = ""
    local ExtraJson = ""
    if MSDKDefine.ChannelID.QQ == ChannelID then
        -- 手Q群号
        TargetId = self.GroupId or ""
        if not CommonUtil.IsShipping() then
            ChannelID = WorldId
        end
        ExtraJson = string.format('{"areaID":"%d"}' , ChannelID)
    else
        -- 微信:部队ID
        TargetId = self.ArmyId or ""
    end
    UGroupMgr.GetGroupRelation(TargetId, ExtraJson)
end

--- 绑定群（仅支持QQ渠道）
function GroupMgr:UnbindGroup()
    FLOG_INFO("[GroupMgr:UnbindGroup] ")
    local WorldId = LoginMgr:GetWorldID()
    local ChannelID = LoginMgr:GetChannelID()

    local UnionID = self.ArmyId or ""
    local UnionName = self.ArmyName or ""
    local ZoneID = WorldId
    local RoleID = MajorUtil.GetMajorRoleID()
    local ExtraJson = ""
    if MSDKDefine.ChannelID.QQ == ChannelID then
        if not CommonUtil.IsShipping() then
            ChannelID = WorldId
        end
        ExtraJson = string.format('{"areaID":"%d"}' , ChannelID)
    end
    UGroupMgr.UnbindGroup(UnionID, UnionName, ZoneID, RoleID, ExtraJson)
end

--- 提醒会长绑群（仅支持QQ渠道）
function GroupMgr:RemindToBindGroup()
    FLOG_INFO("[GroupMgr:RemindToBindGroup] ")
    local WorldId = LoginMgr:GetWorldID()
    local ChannelID = LoginMgr:GetChannelID()

    local UnionID = self.ArmyId or ""
    local ZoneID = WorldId
    local RoleID = MajorUtil.GetMajorRoleID()
    local RoleName = MajorUtil.GetMajorName()
    -- TODO: 需要获取实际的会长OpenID
    local leaderOpenID = ""
    local leaderRoleID = ArmyMgr:GetLeaderRoleID()
    local ExtraJson = ""
    if MSDKDefine.ChannelID.QQ == ChannelID then
        if not CommonUtil.IsShipping() then
            ChannelID = WorldId
        end
        ExtraJson = string.format('{"areaID":"%d"}' , ChannelID)
    end
    UGroupMgr.RemindToBindGroup(UnionID, ZoneID, RoleID, RoleName, leaderOpenID, leaderRoleID, ExtraJson)
end

--- 获取会长的建群列表（QQ渠道独有）
function GroupMgr:GetGroupList()
    FLOG_INFO("[GroupMgr:GetGroupList] ")
    UGroupMgr.GetGroupList()
end

--endregion Group Interface

function GroupMgr:SendRemindMessage()
    FLOG_INFO("[GroupMgr:SendRemindMessage] ")
    self:GetGroupState()
    -- 在部队聊天频道发送系统消息
    --local RoleID = MajorUtil.GetMajorRoleID()
    --_G.ChatMgr:AddArmyChatMsg(LSTR(GroupDefine.GroupStrID.CreateGroupMsg), RoleID, 0)
    _G.ChatMgr:SendArmyChannelMsg(LSTR(GroupDefine.GroupStrID.CreateGroupMsg))
end

return GroupMgr