---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by skysong.
--- DateTime: 2023/6/5 16:01
local LuaClass = require("Core/LuaClass")

local Weather = LuaClass()
local CEnvMgr = _G.UE.UEnvMgr

Weather.WeatherInfo = {
    INVALID_WEATHER_ID = 0,
    EXD_WEATHER_SUNY = 2,---默认天气
    WEATHER_TRANSITION_TIME = 0,
    EXD_INDIVIDUAL_WEATHER_INVALID = 0,
    DEFAULT_WEATHER_ID = 2
}

function Weather:Ctor()
    self.NextWeatherId_ = Weather.WeatherInfo.DEFAULT_WEATHER_ID
    self.ActiveWeaterId_ = Weather.WeatherInfo.DEFAULT_WEATHER_ID
    self.time_ = 0.0
    self.GraphicTransitionTime_ = Weather.WeatherInfo.WEATHER_TRANSITION_TIME
    self.IsContent_ = false
    self.IsContentNext_ = false
    self.SettingCurrentAysoTime_ = 0
    self.IsFixed_ = false
end

function Weather:ZoneInit(WeatherID,IsContent,WeatherParams)
    self.NextWeatherId_ = WeatherID
    self.ActiveWeaterId_ = WeatherID
    self.time_ = 0.0
    self.GraphicTransitionTime_ = Weather.WeatherInfo.WEATHER_TRANSITION_TIME
    self.IsContent_ = IsContent
    self.IsContentNext_ = IsContent
    self.IsFixed_ = false
    self.SettingCurrentAysoTime_ = 0

    if #WeatherParams > 0 then
        if WeatherParams[2] == 1 then
            self.IsFixed_ = true
        end

        self.SettingCurrentAysoTime_ = WeatherParams[1]
    end

    self:SetCppWeather()

    local Params = _G.EventMgr:GetEventParams()
    Params.IntParam1 = WeatherID
    Params.IntParam2 = self.time_

    _G.EventMgr:SendCppEvent(EventID.MapWeatherChanged, Params)
end

function Weather:SetWeather(WeatherID,GraphicTransitionTime,IsContent,Time,IsFixed)
    FLOG_INFO("SetWeather WeatherID is %d",WeatherID)
    if WeatherID > Weather.WeatherInfo.INVALID_WEATHER_ID then
        self.SettingCurrentAysoTime_ = 0
        self.NextWeatherId_ = WeatherID

        if self.ActiveWeaterId_ == Weather.WeatherInfo.INVALID_WEATHER_ID then
            self.ActiveWeaterId_ = WeatherID
            self.IsContent_ = IsContent
        end

        self.GraphicTransitionTime_ = GraphicTransitionTime
        self.time_ = GraphicTransitionTime / 2.0
        self.IsContentNext_ = IsContent
        self.IsFixed_ = IsFixed

        if Time ~= nil then
            self.SettingCurrentAysoTime_ = Time
        end
    else
        self.NextWeatherId_ = WeatherID
        self.GraphicTransitionTime_ = GraphicTransitionTime
        self.IsContentNext_ = IsContent
        self.IsFixed_ = IsFixed
        self.SettingCurrentAysoTime_ = 0
    end
end

function Weather:GetGraphicTransitionTime()
    return self.GraphicTransitionTime_
end

function Weather:SetGraphicTransitionTime(Time)
    self.GraphicTransitionTime_ = Time
    self.time_ = Time / 2.0
end

function Weather:PlaySpecialWeatherEffect(WeatherID,TransitionTime,Time,IsFixed)
    FLOG_WARNING("PlayWeatherSpeicalEffect WeatherID is %d",WeatherID)

    self:SetWeather(WeatherID,TransitionTime,false,Time,IsFixed)

    if CEnvMgr ~= nil then
        if self.SettingCurrentAysoTime_ > 0 then
            CEnvMgr:Get():SetDesireAsyoTime(self.SettingCurrentAysoTime_,self.IsFixed_)
        else
            if WeatherID == Weather.WeatherInfo.INVALID_WEATHER_ID then
                CEnvMgr:Get():SetDesireAsyoTime(self.SettingCurrentAysoTime_,self.IsFixed_)
            else
                CEnvMgr:Get():SetLockTime(self.IsFixed_)
            end
        end
    else
        FLOG_ERROR("CEnvMgr is nil")
    end
end

function Weather:SetCppWeather()
    if CEnvMgr ~= nil then
        local PEnvMgrInstance = CEnvMgr:Get()
        PEnvMgrInstance:SetWeather(self.NextWeatherId_,self.GraphicTransitionTime_)
        ---PEnvMgrInstance:LockTime(self.IsFixed_)
        PEnvMgrInstance:SetDesireAsyoTime(self.SettingCurrentAysoTime_,self.IsFixed_)

        local Params = EventMgr:GetEventParams()
        Params.IntParam1 = self.NextWeatherId_
        Params.IntParam2 = self.GraphicTransitionTime_

        _G.EventMgr:SendCppEvent(EventID.MapWeatherChanged, Params)
    else
        FLOG_ERROR("CEnvMgr is nil")
    end

end

function Weather:OnUpdate(ElapseTime)
    self.time_ = self.time_ - ElapseTime
    if self.time_ <= 0.0 then
        self.time_ = 0.0
        if (self.ActiveWeaterId_ ~= self.NextWeatherId_) or (self.IsContent ~= self.IsContentNext_) then
            self.ActiveWeaterId_ = self.NextWeatherId_
            self.IsContent_ = self.IsContentNext_
            return true
        end
    end

    return false
end

function Weather:GetNextWeatherId()
    return self.NextWeatherId_
end

function Weather:GetWeatherId()
    return self.ActiveWeaterId_
end

function Weather:GetGraphicTransitionTime()
    return self.GraphicTransitionTime_
end

function Weather:IsActive()
    return self.ActiveWeaterId_ ~= Weather.WeatherInfo.INVALID_WEATHER_ID
end

function Weather:Disable()
    self.NextWeatherId_ = Weather.WeatherInfo.INVALID_WEATHER_ID
    self.ActiveWeaterId_ = Weather.WeatherInfo.INVALID_WEATHER_ID
    self.time_ = 0.0
    self.IsFixed_ = false
    self.SettingCurrentAysoTime_ = 0
end

function Weather:GetIsContent()
    return self.IsContent_
end

function Weather:GetIsContentNext()
    return self.IsContentNext_
end

return Weather