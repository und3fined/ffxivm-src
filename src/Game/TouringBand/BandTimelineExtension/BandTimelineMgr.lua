---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2024/7/2 18:54
---
local MgrBase = require("Common/MgrBase")
local LuaClass = require("Core/LuaClass")
local ProtoCS = require("Protocol/ProtoCS")
local EventID = require("Define/EventID")
local CommonUtil = require("Utils/CommonUtil")
local BandTimelineBase = require("Game/TouringBand/BandTimelineExtension/BandTimeline/BandTimelineBase")

---@class BandTimelineMgr : MgrBase
local BandTimelineMgr = LuaClass(MgrBase)

function BandTimelineMgr:OnInit()
    self.TimelineList = {}
    self.DestroyCallBack = {}
    self.PlayRate = 1.0
end

function BandTimelineMgr:OnBegin()
    _G.UE.FTickHelper.GetInst():SetTickIntervalByFrame(self.TickTimerID, 1)  -- 每帧更新
    _G.UE.FTickHelper.GetInst():SetTickDisable(self.TickTimerID)
end

function BandTimelineMgr:OnRegisterNetMsg()

end

function BandTimelineMgr:OnRegisterGameEvent()
end

function BandTimelineMgr:OnEnd()

end

function BandTimelineMgr:OnShutdown()
    self.TimelineList = {}
    self.DestroyCallBack = {}
end

---OnTick
---@param DeltaTime
function BandTimelineMgr.OnTick(DeltaTime)
    local _ <close> = CommonUtil.MakeProfileTag("BandTimelineMgr.Lua.OnTick")
    _G.BandTimelineMgr:Update(DeltaTime)
end

function BandTimelineMgr:Update(DeltaTime)
    local ToBeRemoved = {}
    -- 更新时间线
    --for i = 1, self.PlayRate do
        for __, Timeline in ipairs(self.TimelineList) do
            if Timeline.IsStart then
                Timeline:Update(DeltaTime)
            end
            if Timeline.IsEnd then
                table.insert(ToBeRemoved, Timeline.TimelineID)
            end
        end
    --end
    
    -- 移除已经结束的时间线
    for _, ID in ipairs(ToBeRemoved) do
        self:DestroyBandTimeline(ID)
    end
end

---CreateBandTimeline
---@param ID number
---@param StartTime number
function BandTimelineMgr:CreateBandTimeline(ID, StartTime)
    if not _G.TouringBandMgr:IsTouringBandUnLock() then
        return
    end

    local Timeline = nil
    for __, Item in ipairs(self.TimelineList) do
        if Item.TimelineID == ID then
            Timeline = Item
            break
        end
    end

    if Timeline ~= nil then
        -- 如果存在且开始时间相等，则直接返回
        if Timeline.StartTime == StartTime then
            return
        end
        -- 其他情况下，先销毁旧的时间线
        self:DestroyBandTimeline(ID)
        Timeline = nil
    end

    Timeline = BandTimelineBase.New()
    -- 初始化并开始新的时间线
    local Ret = Timeline:Init(ID, StartTime, self.PlayRate)
    table.insert(self.TimelineList, Timeline) -- 确保将新创建的时间线添加到列表中
    if Ret then
        Timeline:Start()
        _G.EventMgr:SendEvent(EventID.AddTouringBandRangeCheckData, ID)
    else
        self:DestroyBandTimeline(ID) -- 如果初始化失败，确保销毁时间线以释放资源
    end

    if #self.TimelineList > 0 then
        _G.UE.FTickHelper.GetInst():SetTickEnable(self.TickTimerID)
    end
end


---CleanAllTimeline
function BandTimelineMgr:CleanAllTimeline()
    for __, Timeline in ipairs(self.TimelineList) do
        Timeline:OnShutdown()
    end

    self.TimelineList = {}
    _G.UE.FTickHelper.GetInst():SetTickDisable(self.TickTimerID)
end

---DestroyBandTimeline
---@param ID number
function BandTimelineMgr:DestroyBandTimeline(ID)
    for Index, Timeline in ipairs(self.TimelineList) do
        if Timeline.TimelineID == ID then
            _G.EventMgr:SendEvent(EventID.TouringBandForceExitInteractive)
            Timeline:OnShutdown()
            table.remove(self.TimelineList, Index)
            _G.EventMgr:SendEvent(EventID.RemoveTouringBandRangeCheckData, ID)
            break
        end
    end

    if #self.TimelineList <= 0 then
        _G.UE.FTickHelper.GetInst():SetTickDisable(self.TickTimerID)
    end
end

---GetTimelineState
---@param TimelineID table
---@param Key table
function BandTimelineMgr:GetTimelineState(TimelineID, Key)
    local Timeline = self:GetTimelineByID(TimelineID)

    -- 即使进入乐团区域，也不是每个cmd都会执行，所以并不是每个State都有值
    if Timeline == nil or Timeline.TimelineState == nil or Timeline.TimelineState[Key] == nil then
        return false
    end

    return Timeline.TimelineState[Key]
end

---GetCurEffectiveRangeTimeline
---@return table Timeline
function BandTimelineMgr:GetCurEffectiveRangeTimeline()
    local Ret = nil
    for __, Timeline in ipairs(self.TimelineList) do
        if Timeline:IsInEffectiveRange() then
            return Timeline
        end
    end
    
    return Ret
end

---SetTimelineStatus
---@param InTimelineID number
---@param Status number
function BandTimelineMgr:SetTimelineStatus(InTimelineID, Status)
    if Status == nil then
        Status = ProtoCS.Game.TouringBand.BandInteractStatus.UnFinish
    end
    
    for __, Timeline in ipairs(self.TimelineList) do
        if Timeline.TimelineID == InTimelineID then
            Timeline:SetInteractStatus(Status)
        end
    end
end

---GetTimelineByBandID
---@param InBandID number
function BandTimelineMgr:GetTimelineByBandID(InBandID)
    for __, Timeline in ipairs(self.TimelineList) do
        if Timeline.BandID == InBandID then
            return Timeline
        end
    end
    
    return nil
end

function BandTimelineMgr:GetTimelineByID(InTimelineID)
    for __, Timeline in ipairs(self.TimelineList) do
        if Timeline.TimelineID == InTimelineID then
            return Timeline
        end
    end

    return nil
end

return BandTimelineMgr