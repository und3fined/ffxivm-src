---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by yuhang_lightpaw.
--- DateTime: 2024/7/2 15:41
---

local LuaClass = require("Core/LuaClass")
local TimeUtil = require("Utils/TimeUtil")
local ProtoRes = require("Protocol/ProtoRes")
local ActorUtil = require("Utils/ActorUtil")
local TouringBandTimelineCfg = require("TableCfg/TouringBandTimelineCfg")
local TouringBandTimelineNodeCfg = require("TableCfg/TouringBandTimelineNodeCfg")
local TouringBandTimelineBehaviorCfg = require("TableCfg/TouringBandTimelineBehaviorCfg")
local TouringBandCfg = require("TableCfg/TouringBandCfg")
local GameGlobalCfg = require("TableCfg/GameGlobalCfg")
local CommonDefine = require("Define/CommonDefine")
local MajorUtil = require("Utils/MajorUtil")
local EventID = require("Define/EventID")
local EventMgr = require("Event/EventMgr")
local ProtoCS = require("Protocol/ProtoCS")
local GameEventRegister = require("Register/GameEventRegister")
local TouringBandDefine = require("Game/TouringBand/TouringBandDefine")
local TouringBandUtil = require("Game/TouringBand/TouringBandUtil")

local BandCmdCreate = require("Game/TouringBand/BandTimelineExtension/BandCmd/BandCmdCreate")
local BandCmdDestroy = require("Game/TouringBand/BandTimelineExtension/BandCmd/BandCmdDestroy")
local BandCmdMove = require("Game/TouringBand/BandTimelineExtension/BandCmd/BandCmdMove")
local BandCmdBubbleClip = require("Game/TouringBand/BandTimelineExtension/BandCmd/BandCmdBubbleClip")
local BandCmdPerformingClip = require("Game/TouringBand/BandTimelineExtension/BandCmd/BandCmdPerformingClip")
local BandCmdAniMulti = require("Game/TouringBand/BandTimelineExtension/BandCmd/BandCmdAniMulti")
local BandCmdTuneMulti = require("Game/TouringBand/BandTimelineExtension/BandCmd/BandCmdTuneMulti")
local BandCmdPetBehavior = require("Game/TouringBand/BandTimelineExtension/BandCmd/BandCmdPetBehavior")
local BandCmdShowWeaponSystem = require("Game/TouringBand/BandTimelineExtension/BandCmd/BandCmdShowWeaponSystem")

---@class BandTimelineBase
---所有时间单位都是s
---所有距离单位都是cm
---所有计算结果四舍五入保留两位小数（误差可以接受）
local BandTimelineBase = LuaClass()

function BandTimelineBase:Ctor()
    self:Reset()

    local GlobalCfgValue = GameGlobalCfg:FindValue(ProtoRes.Game.game_global_cfg_id.GAME_CFG_BAND_UNLOCK_DISTANCE, "Value")
    self.AreaDist = GlobalCfgValue and GlobalCfgValue[1] or 3000

    GlobalCfgValue = GameGlobalCfg:FindValue(ProtoRes.Game.game_global_cfg_id.GAME_CFG_BAND_CHEERING_DISTANCE, "Value")
    self.ListenDist = GlobalCfgValue and GlobalCfgValue[1] or 3000
end

function BandTimelineBase:Reset()
    self:ResetCmdList()
    self.TimelineID = 0
    self.BandID = 0
    self.InteractStatus = ProtoCS.Game.TouringBand.BandInteractStatus.UnFinish
    self.TimelineState = {}
    self.PlayRate = 1.0
    self.DurationTime = 0
    self.CurrentTime = 0
    self.IsStart = false
    self.IsEnd = false
    self.IsInit = false
    self.IsLoop = false
    self.Pos = nil
    self.IsAreaEnter = false
    self.AreaDist = 3000
    self.ListenDist = 3000

    self.MemberEntityIDList = {}
    self.ModelCreationFlags = {}
    self.ModelWeaponList = {}
    for _, Value in pairs(ProtoRes.TOURING_BAND_TIMELINE_EVENT_TARGET_TYPE) do
        self.MemberEntityIDList[Value] = 0
        self.ModelCreationFlags[Value] = false
    end
    
    if nil ~= self.GameEventRegister then
        self.GameEventRegister:UnRegisterAll()
    end
end

function BandTimelineBase:OnShutdown()
    _G.FLOG_INFO("[TouringBand]BandTimelineBase:OnShutdown: BandID=%d, TimelineID=%d, IsAreaEnter=%s", self.BandID, self.TimelineID, tostring(self.IsAreaEnter))
    if self.IsAreaEnter then
        --EventMgr:SendEvent(EventID.TouringBandMajorHudChanged, { IsVisible = false })
        EventMgr:SendEvent(EventID.TouringBandAreaEnter, { TimelineID = self.TimelineID, IsAreaEnter = false})
        local ReportParams = { BandListen = { IsListening = false, IsFans = false }}
        _G.ClientReportMgr:SendClientReport(ProtoCS.ReportType.ReportTypeBandListen, ReportParams)
    end
    
    if self.NullPlayingID ~= nil then
        _G.UE.UAudioMgr.Get():StopBGM(self.NullPlayingID)
        self.NullPlayingID = nil
    end
    
    for _, Cmd in ipairs(self.CmdList) do
        Cmd:Destroy()
    end

    local UActorManager = _G.UE.UActorManager:Get()
    for __, EntityID in ipairs(self.MemberEntityIDList) do
        if EntityID > 0 then
            UActorManager:RemoveClientActor(EntityID)
        end
    end
    self.MemberEntityIDList = {}
    self:Reset()
end

local function CreateAndInitCmd(CmdClass, Data, TimelineID, StartTime, PlayRate, CmdList)
    local Cmd = CmdClass.New()
    if Cmd then
        Cmd:Init(Data, TimelineID, StartTime, PlayRate)
        table.insert(CmdList, Cmd)
    end
end

function BandTimelineBase:Init(ID, StartTime, PlayRate)
    if type(ID) ~= "number" or type(StartTime) ~= "number" then
        return false
    end

    self:ResetCmdList()
    self.TimelineID = ID
    self.StartTime = StartTime
    TouringBandUtil.Err("BandTimelineBase.Init self.StartTime = " .. StartTime)
    self.PlayRate = PlayRate

    local Cfg = TouringBandTimelineCfg:FindCfgByKey(ID)
    if Cfg == nil then
        TouringBandUtil.Err("ERROR BandTimelineBase.Initlization TouringBandTimelineCfg == nil ID : " .. ID)
        return false
    end

    self.BandID = Cfg.BandID
    local BandBaseCfg = TouringBandCfg:FindCfgByKey(self.BandID)
    if BandBaseCfg == nil then
        TouringBandUtil.Err("ERROR BandTimelineBase.Initlization TouringBandCfg == nil BandID : " .. self.BandID)
        return false
    end
    self.DurationTime = Cfg.DurationTime
    self.CurrentTime = TimeUtil.GetServerLogicTime()
    self.IsLoop = Cfg.Loop == 1
    _G.FLOG_INFO("[TouringBand]BandTimelineBase:Init: ID=%d, StartTime=%d, CurrentTime=%d, DurationTime=%d", ID, StartTime, self.CurrentTime, self.DurationTime)
    if self.IsLoop then
        local Divisor = self.CurrentTime - StartTime
        local Truncation = math.floor(Divisor / self.DurationTime)
        self.StartTime = self.DurationTime * Truncation + StartTime
    end

    self.InteractStatus = _G.TouringBandMgr:GetTimelineInteractStatus(self.TimelineID)
    self.EndTime = self.StartTime + self.DurationTime
    self.IsStart = false
    self.IsEnd = self.CurrentTime > self.EndTime
    self.Pos = Cfg.Pos
    self.ListenTime = Cfg.LinstenMinTime

    if self.IsEnd then
        return false
    end

    -- 主节点表的Event，还有行为和宠物行为，这两个单独处理, 主要原因是他们的开始时间不一样
    local EventToCmdClassMap = {
        [ProtoRes.TOURING_BAND_TIMELINE_EVENT_PARENT_TYPE.TB_EVENT_BAND_CREATE] = BandCmdCreate,
        [ProtoRes.TOURING_BAND_TIMELINE_EVENT_PARENT_TYPE.TB_EVENT_BAND_DESTROY] = BandCmdDestroy,
        [ProtoRes.TOURING_BAND_TIMELINE_EVENT_PARENT_TYPE.TB_EVENT_BAND_MOVE] = BandCmdMove,
    }

    -- Behavior的Event
    local BehaviorEventToCmdClassMap = {
        [ProtoRes.TOURING_BAND_TIMELINE_EVENT_PARENT_TYPE.TB_EVENT_BAND_TUNE] = BandCmdTuneMulti,
        [ProtoRes.TOURING_BAND_TIMELINE_EVENT_PARENT_TYPE.TB_EVENT_BAND_ANIMATION] = BandCmdAniMulti,
        [ProtoRes.TOURING_BAND_TIMELINE_EVENT_PARENT_TYPE.TB_EVENT_SUB_BUBBLE] = BandCmdBubbleClip,
        [ProtoRes.TOURING_BAND_TIMELINE_EVENT_PARENT_TYPE.TB_EVENT_SUB_PERFORMING] = BandCmdPerformingClip,
        [ProtoRes.TOURING_BAND_TIMELINE_EVENT_PARENT_TYPE.TB_EVENT_SUB_SHOW_WEAPON] = BandCmdShowWeaponSystem,
    }

    local AllNodeCfg = TouringBandTimelineNodeCfg:FindAllCfg(string.format("TimelineID = %d", self.TimelineID))
    for __, NodeCfg in pairs(AllNodeCfg) do
        local CmdClass = EventToCmdClassMap[NodeCfg.Event]
        if CmdClass then
            CreateAndInitCmd(CmdClass, NodeCfg, self.TimelineID, self.StartTime, self.PlayRate, self.CmdList)
        elseif NodeCfg.Event == ProtoRes.TOURING_BAND_TIMELINE_EVENT_PARENT_TYPE.TB_EVENT_BAND_BEHAVIOR then
            local ClipID = NodeCfg.Param[1] or 0
            local BehaviorStartTime = NodeCfg.StartTime  -- 注意： 节点表的开始时间 + Behavior表的开始时间 + 自己clip表的开始时间才是最终的开始时间
            local BehaviorCfg = TouringBandTimelineBehaviorCfg:FindAllCfg(string.format("ClipID = %d", ClipID))
            for i, ClipCfg in pairs(BehaviorCfg) do
                local BehaviorCmdClass = BehaviorEventToCmdClassMap[ClipCfg.Event]
                if BehaviorCmdClass then
                    CreateAndInitCmd(BehaviorCmdClass, ClipCfg, self.TimelineID, self.StartTime + BehaviorStartTime, self.PlayRate, self.CmdList)
                end
            end
        elseif NodeCfg.Event == ProtoRes.TOURING_BAND_TIMELINE_EVENT_PARENT_TYPE.TB_EVENT_SUB_PET_BEHAVIOR then
            local BehaviorStartTime = NodeCfg.StartTime  -- 注意： 节点表的开始时间 + Behavior表的开始时间 + 自己clip表的开始时间才是最终的开始时间
            CreateAndInitCmd(BandCmdPetBehavior, NodeCfg, self.TimelineID, self.StartTime + BehaviorStartTime, self.PlayRate, self.CmdList)
        end
    end

    self.IsInit = true
    return true
end

function BandTimelineBase:Start()
    self.IsStart = true

    if nil == self.GameEventRegister then
        self.GameEventRegister = GameEventRegister.New()
    end

    self.GameEventRegister:Register(EventID.Avatar_AssembleAllEnd, self, self.OnAssembleAllEnd)
    self.GameEventRegister:Register(EventID.Avatar_Update_Master, self, self.OnUpdateMaster)
    self.GameEventRegister:Register(EventID.TouringBandStatesChange, self, self.OnTouringBandStatesChange)
end

function BandTimelineBase:OnAssembleAllEnd(Params)
    local EntityID = Params.ULongParam1

    -- 组装武器也会回调到这里
    for Index, Value in ipairs(self.MemberEntityIDList) do
        if Value == EntityID then
            if Index == ProtoRes.TOURING_BAND_TIMELINE_EVENT_TARGET_TYPE.TB_TARGET_NPC_1 or
                    Index == ProtoRes.TOURING_BAND_TIMELINE_EVENT_TARGET_TYPE.TB_TARGET_NPC_2 or
                    Index == ProtoRes.TOURING_BAND_TIMELINE_EVENT_TARGET_TYPE.TB_TARGET_NPC_3 or
                    Index == ProtoRes.TOURING_BAND_TIMELINE_EVENT_TARGET_TYPE.TB_TARGET_NPC_4  or
                    Index == ProtoRes.TOURING_BAND_TIMELINE_EVENT_TARGET_TYPE.TB_TARGET_VIEWER_1  or
                    Index == ProtoRes.TOURING_BAND_TIMELINE_EVENT_TARGET_TYPE.TB_TARGET_VIEWER_2  or
                    Index == ProtoRes.TOURING_BAND_TIMELINE_EVENT_TARGET_TYPE.TB_TARGET_VIEWER_3  or
                    Index == ProtoRes.TOURING_BAND_TIMELINE_EVENT_TARGET_TYPE.TB_TARGET_VIEWER_4  or
                    Index == ProtoRes.TOURING_BAND_TIMELINE_EVENT_TARGET_TYPE.TB_TARGET_VIEWER_5  or
                    Index == ProtoRes.TOURING_BAND_TIMELINE_EVENT_TARGET_TYPE.TB_TARGET_MANAGER then
                local NpcActor = ActorUtil.GetActorByEntityID(EntityID)
                if NpcActor then
                    NpcActor:AdjustGround(false)
                end
            end
        end
    end
    
    for Key, Value in pairs(self.MemberEntityIDList) do
        if Value == EntityID then
            self.ModelCreationFlags[Key] = true
        end
    end
end

function BandTimelineBase:OnUpdateMaster(Params)
    local EntityID = Params.ULongParam1
    
    for Index, Value in ipairs(self.MemberEntityIDList) do
        if Value == EntityID then
            if Index == ProtoRes.TOURING_BAND_TIMELINE_EVENT_TARGET_TYPE.TB_TARGET_NPC_1 or
                    Index == ProtoRes.TOURING_BAND_TIMELINE_EVENT_TARGET_TYPE.TB_TARGET_NPC_2 or
                    Index == ProtoRes.TOURING_BAND_TIMELINE_EVENT_TARGET_TYPE.TB_TARGET_NPC_3 or
                    Index == ProtoRes.TOURING_BAND_TIMELINE_EVENT_TARGET_TYPE.TB_TARGET_NPC_4   then
                if self.ModelWeaponList == nil then
                    return
                end
                
                local ModeIDStr = self.ModelWeaponList[Index]
                local AvatarComp = ActorUtil.GetActorAvatarComponent(EntityID)
                if AvatarComp then
                    if not string.isnilorempty(ModeIDStr) then
                        local ModelParams = string.split(ModeIDStr, ",")
                        if #ModelParams >= 3 then
                            local ModelPath = string.format("w%04d", tonumber(ModelParams[1]))
                            local SubModelPath = string.format("b%04d", tonumber(ModelParams[2]))
                            local ImagechangeID = tonumber(ModelParams[3])
                            AvatarComp:SetAvatarHiddenInGame(_G.UE.EAvatarPartType.WEAPON_SYSTEM, false, false, false)
                            AvatarComp:ChangeAvatarWeapon(ModelPath, SubModelPath, ImagechangeID, 0, _G.UE.EAvatarPartType.WEAPON_SYSTEM, 0)
                        end
                    end
                end
            end
        end
    end
end

function BandTimelineBase:OnTouringBandStatesChange(Params)
    local TimelineID = Params.TimelineID
    local Key = Params.Key
    local Value = Params.Value

    if TimelineID ~= self.TimelineID then
        return
    end
    
    self.TimelineState[Key] = Value
    EventMgr:SendEvent(EventID.TouringBandStatesNotify, Params)
end

-- 乐团应该不存在销毁单个Npc的情况，这里就不处理单个销毁，只会一起销毁
function BandTimelineBase:IsNpcAssembleEnd(Index)
    return self.ModelCreationFlags[Index] or false
end

-- 清除Cmd要放到清除Timeline数据之前，避免有些Cmd销毁要用到Timeline的数据
function BandTimelineBase:ResetCmdList()
    if self.CmdList == nil then
        self.CmdList = {}
        return
    end
    -- 反过来清除Cmd数据，最后才需要调用CmdCreate的OnDestroy
    for i = #self.CmdList,1,-1 do
        local Cmd = self.CmdList[i]
        Cmd:Destroy()
    end
    self.CmdList = {}
end

function BandTimelineBase:Update(DeltaTime)
    if not self.IsInit or self.IsEnd then
        return
    end

    local LastTime = TimeUtil.GetServerLogicTimeMS() / 1000
    local NextTime = LastTime + DeltaTime
    self.CurrentTime = NextTime
    --TouringBandUtil.Err("BandTimelineBase.Time = " .. self.CurrentTime - self.StartTime)

    if not self.IsStart then
        if self.CurrentTime >= self.StartTime then
            self:Start()
        else
            return
        end
    end

    if self.IsEnd then
        return
    end

    -- 检查位置
    local IsVisionEnter = false
    local IsAreaEnter = false
    local IsListenEnter = false
    local MajorActor = MajorUtil.GetMajor()
    if MajorActor == nil then
        return
    end
    
    local MajorPos = MajorActor:FGetActorLocation()

    local CenterPos = nil
    local MangerEntityID = self:GetManagerEntityID()
    local Actor = ActorUtil.GetActorByEntityID(MangerEntityID)
    if Actor ~= nil then
        CenterPos = Actor:FGetActorLocation()
    end

    if CenterPos == nil then
        CenterPos = _G.UE.FVector(0, 0, 0)
        if self.Pos ~= nil then
            CenterPos = _G.UE.FVector(self.Pos.X, self.Pos.Y, self.Pos.Z)
        end
    end

    local Dist = CommonDefine.VisionNPCStopTickRange
    local SquaredDistance = _G.UE.UKismetMathLibrary.Vector_DistanceSquared(MajorPos, CenterPos)
    IsVisionEnter = SquaredDistance < Dist * Dist
    IsAreaEnter = SquaredDistance < self.AreaDist * self.AreaDist
    IsListenEnter = SquaredDistance < self.ListenDist * self.ListenDist

    if IsVisionEnter then
        for _, Cmd in ipairs(self.CmdList) do
            if Cmd.IsEnd then
                goto continue
            end

            if Cmd.TargetIndex > 0 and self:IsNpcAssembleEnd(Cmd.TargetIndex) == false then
                goto continue
            end

            -- 乐团移动必须在舞台创建好之后
            if Cmd.EventType ~= ProtoRes.TOURING_BAND_TIMELINE_EVENT_PARENT_TYPE.TB_EVENT_BAND_CREATE then
                if not self.TimelineState[TouringBandDefine.STATES_TYPE.CREATE] then
                    goto continue
                end
            end

            if not Cmd.IsStart then
                if Cmd.PlayCount == 0 then
                    -- 如果上一帧小于开始时间，下一帧大于开始时间，并且执行次数为0，执行Start，以 StartTime 作为参数，保证是从头执行的
                    if LastTime <= Cmd.StartTime and NextTime >= Cmd.StartTime then
                        Cmd:Start(Cmd.StartTime, false)
                        -- 如果下一帧大于开始时间，并且小于结束时间，并且执行次数为0，执行Start，以 CurrentTime 作为参数，有可能是从中途开始执行的
                    elseif NextTime >= Cmd.StartTime and NextTime <= Cmd.EndTime then
                        Cmd:Start(self.CurrentTime, true)
                    end
                end
            end

            -- 如果下一帧大于结束时间，并且执行次数为0，执行TriggerEvent，表示虽然此CMD时间过了，但是如果有必须要执行的事件，就执行一次TriggerEvent
            if NextTime > Cmd.EndTime and Cmd.PlayCount == 0 then
                Cmd:TriggerEventAfterStartTime()
            end

            if Cmd.IsStart then
                if NextTime > Cmd.StartTime then
                    Cmd:Update(DeltaTime, self.CurrentTime)
                end

                if NextTime >= Cmd.EndTime then
                    Cmd:End()
                end
            end

            :: continue ::
        end
    end

    if NextTime >= self.EndTime then
        if self.IsLoop then
            self.StartTime = self.StartTime + self.DurationTime
            self.EndTime = self.StartTime + self.DurationTime
            for _, Cmd in ipairs(self.CmdList) do
                Cmd:ReSetStartTime(self.StartTime)
            end
        else
            self:End()
        end
    end

    -- 11.4 将消息放在Cmd执行之后
    if self.IsAreaEnter ~= IsAreaEnter then
        if IsAreaEnter then
            -- 只有在进入区域时才需要判断 MangerEntityID > 0
            if MangerEntityID > 0 then
                self.IsAreaEnter = IsAreaEnter
                EventMgr:SendEvent(EventID.TouringBandAreaEnter, { TimelineID = self.TimelineID, IsAreaEnter = IsAreaEnter })
                self.NullPlayingID = _G.UE.UAudioMgr.Get():PlayBGM(1, _G.UE.EBGMChannel.NormalCutscene)
            end
        else
            -- 处理离开区域的情况
            self.IsAreaEnter = IsAreaEnter
            EventMgr:SendEvent(EventID.TouringBandAreaEnter, { TimelineID = self.TimelineID, IsAreaEnter = IsAreaEnter })
            if self.NullPlayingID ~= nil then
                _G.UE.UAudioMgr.Get():StopBGM(self.NullPlayingID)
                self.NullPlayingID = nil
            end
        end
    end
end

function BandTimelineBase:End()
    self.IsEnd = true
    --self:Reset()  -- 现在这行会重置IsEnd，导致 BandTimelineMgr:Update 无法销毁 Timeline
end

---IsInEffectiveRange
---@return boolean
function BandTimelineBase:IsInEffectiveRange()
    return self.IsAreaEnter
end

---SetInteractStatus
---@param Status number ProtoCS.Game.TouringBand.BandInteractStatus
function BandTimelineBase:SetInteractStatus(Status)
    self.InteractStatus = Status
end

---GetInteractStatus
---@return number ProtoCS.Game.TouringBand.BandInteractStatus
function BandTimelineBase:GetInteractStatus()
    return self.InteractStatus
end

---GetManagerEntityID
---@return number EntityID
function BandTimelineBase:GetManagerEntityID()
    return self.MemberEntityIDList[ProtoRes.TOURING_BAND_TIMELINE_EVENT_TARGET_TYPE.TB_TARGET_MANAGER] or 0
end

function BandTimelineBase:GetBandEobjEntityID()
    return self.MemberEntityIDList[ProtoRes.TOURING_BAND_TIMELINE_EVENT_TARGET_TYPE.TB_TARGET_EOBJ] or 0
end

function BandTimelineBase:IsManagerAssembleEnd()
    return self:IsNpcAssembleEnd(ProtoRes.TOURING_BAND_TIMELINE_EVENT_TARGET_TYPE.TB_TARGET_MANAGER)
end

function BandTimelineBase:GetMemberEntityIDList()
    return self.MemberEntityIDList
end

function BandTimelineBase:GetEntityIDByIndex(Index)
    return self.MemberEntityIDList[Index] or 0
end

function BandTimelineBase:SetModelWeaponList(Index, ModelID)
    self.ModelWeaponList[Index] = ModelID
end

return BandTimelineBase