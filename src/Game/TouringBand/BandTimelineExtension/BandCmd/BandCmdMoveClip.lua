---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2025/1/2 19:11
---


local LuaClass = require("Core/LuaClass")
local ProtoRes = require("Protocol/ProtoRes")
local ActorUtil = require("Utils/ActorUtil")
local BandCmdBase = require("Game/TouringBand/BandTimelineExtension/BandCmd/BandCmdBase")
local TouringBandUtil = require("Game/TouringBand/TouringBandUtil")
local FVector = _G.UE.FVector
local FVector2D = _G.UE.FVector2D
local FMath = _G.UE.UMathUtil

local BandCmdMoveClip = LuaClass(BandCmdBase)

function BandCmdMoveClip:OnInit()
    self.Name = "BandCmdMoveClip"
    self.EventType = ProtoRes.TOURING_BAND_TIMELINE_EVENT_SUB_TYPE.TB_SUB_MOVE
    self.CenterPos = { X = 0, Y = 0, Z = 0}
    self.yBaseRotation = 0
    self.yNewRotation = 0
end

function BandCmdMoveClip:SetEntityID(InEntityID)
    self.EntityID = InEntityID
end

function BandCmdMoveClip:SetRelativePos(X, Y, Z)
    self.Param[1] = self.Param[1] + X
    self.Param[2] = self.Param[2] + Y
    self.Param[3] = self.Param[3] + Z
end

function BandCmdMoveClip:SetRelativeRotation(CenterPos, yNewRotation, yBaseRotation)
    self.CenterPos = CenterPos
    self.yNewRotation = yNewRotation
    self.yBaseRotation = yBaseRotation
end

function BandCmdMoveClip:OnStart()
    if self.Param == nil then
        TouringBandUtil.Err("BandCmdMoveClip.OnStart Move Failed ID =  : " .. self.ID)
        return
    end

    self.Actor = ActorUtil.GetActorByEntityID(self.EntityID)
    if self.Actor == nil then
        TouringBandUtil.Err("BandCmdMoveClip.OnStart Failed: Invalid self.PetActor")
        return
    end

    local PathPoints = _G.UE.TArray(FVector)
    local NpcPos = self.Actor:FGetLocation(_G.UE.EXLocationType.ActorLoc)

    local xOffset = self.Param[1] or 0
    local yOffset = self.Param[2] or 0
    local zOffset = self.Param[3] or 0

    xOffset, yOffset = TouringBandUtil.CombinedRotation(xOffset, yOffset, self.CenterPos.X, self.CenterPos.Y, self.yBaseRotation, self.yNewRotation)
    
    --local yRotation = self.Param[4] or 0
    local Speed = self.Param[5] or 120
    local FarPos = _G.UE.FVector(xOffset, yOffset, zOffset)

    --if self.IsMidPlayback then
    --    LeftTime = (1 - self.PlayProgress) * self.DurationTime
    --    local Curr2DPos = FMath.V2DLerp(FVector2D(NpcPos.X, NpcPos.Y), FVector2D(FarPos.X, FarPos.Y), self.PlayProgress)
    --    NpcPos = FVector(Curr2DPos.X, Curr2DPos.Y, NpcPos.Z)
    --    self.Actor:FSetVectorForServer(NpcPos, _G.UE.EXLocationType.ActorLoc)
    --end

    PathPoints:Add(NpcPos)
    PathPoints:Add(FarPos)

    local UMoveSyncMgr = _G.UE.UMoveSyncMgr:Get()
    UMoveSyncMgr:CancelClientMove(self.EntityID)
    UMoveSyncMgr:StartClientMove(self.EntityID, PathPoints, Speed)
end

function BandCmdMoveClip:OnEnd()
    --if self.Param == nil then
    --    TouringBandUtil.Err("BandCmdMoveClip.OnEnd Failed ID =  : " .. self.ID)
    --    return
    --end
    --
    --if self.Actor == nil then
    --    TouringBandUtil.Err("BandCmdMoveClip.OnEnd Failed: Invalid self.PetActor")
    --    return
    --end

    --local xOffset = self.Param[1] or 0
    --local yOffset = self.Param[2] or 0
    --local zOffset = self.Param[3] or 0
    --local Pos = _G.UE.FVector(xOffset, yOffset, zOffset)
    --self.Actor:FSetVectorForServer(Pos, _G.UE.EXLocationType.ActorLoc)
    --self.Actor:AdjustGround(false)
    --
    --local yRotation = self.Param[4] or 0
    --local Rotation = _G.UE.FRotator(0, yRotation, 0)
    --self.Actor:FSetRotationForServerNoInterp(Rotation)
    --local UMoveSyncMgr = _G.UE.UMoveSyncMgr:Get()
    --UMoveSyncMgr:CancelClientMove(self.EntityID)
end

return BandCmdMoveClip