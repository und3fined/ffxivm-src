---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2024/12/26 11:19
---


local LuaClass = require("Core/LuaClass")
local ActorUtil = require("Utils/ActorUtil")
local ProtoRes = require("Protocol/ProtoRes")
local BandCmdBase = require("Game/TouringBand/BandTimelineExtension/BandCmd/BandCmdBase")
local TouringBandNodeTuneCfg = require("TableCfg/TouringBandNodeTuneCfg")
local TouringBandUtil = require("Game/TouringBand/TouringBandUtil")
local BandCmdAnimationClip = require("Game/TouringBand/BandTimelineExtension/BandCmd/BandCmdAnimationClip")
local BandCmdTuneClip = require("Game/TouringBand/BandTimelineExtension/BandCmd/BandCmdTuneClip")

local BandCmdTuneMulti = LuaClass(BandCmdBase)

function BandCmdTuneMulti:OnInit()
    self.Name = "BandCmdTuneMulti"
    self.EventType = ProtoRes.TOURING_BAND_TIMELINE_EVENT_PARENT_TYPE.TB_EVENT_BAND_TUNE
    self.SubCmdList = {}
    self.IsPlaying = false
    self.NpcActor = nil
end

function BandCmdTuneMulti:OnStart()
    if self.Param == nil then
        TouringBandUtil.Err("BandCmdTuneMulti.OnStart Create Failed ID =  : " .. self.ID)
        return
    end

    local Timeline = _G.BandTimelineMgr:GetTimelineByID(self.TimelineID)
    if Timeline == nil then
        TouringBandUtil.Err("BandCmdTuneMulti.OnStart Create Failed Timeline =  : " .. self.TimelineID)
        return
    end

    local Member = Timeline:GetMemberEntityIDList()
    local EntityID = Member[self.TargetIndex]
    if EntityID <= 0 then
        TouringBandUtil.Err("BandCmdTuneMulti.OnStart Failed: Invalid EntityID (0) at Index = " .. tostring(self.TargetIndex))
    end

    self.NpcActor = ActorUtil.GetActorByEntityID(EntityID)
    if self.NpcActor == nil then
        TouringBandUtil.Err("BandCmdTuneMulti.OnStart Failed: Invalid self.NpcActor at EntityID = " .. tostring(EntityID))
        return
    end

    local ClipID = self.Param[1] or 0
    local ClipsCfg = TouringBandNodeTuneCfg:FindAllCfg(string.format("ClipID = %d", ClipID))

    self.SubCmdList = {}
    for __, ClipCfg in ipairs(ClipsCfg) do
        local Cmd = nil
        if ClipCfg.Event == ProtoRes.TOURING_BAND_TIMELINE_EVENT_SUB_TYPE.TB_SUB_TUNE then
            Cmd = BandCmdTuneClip.New()
        elseif ClipCfg.Event == ProtoRes.TOURING_BAND_TIMELINE_EVENT_SUB_TYPE.TB_SUB_ANIMATION then
            Cmd = BandCmdAnimationClip.New()
        end

        if Cmd ~= nil then
            Cmd:Init(ClipCfg, self.TimelineID, self.StartTime, self.PlayRate)
            Cmd:SetEntityID(EntityID)
            table.insert(self.SubCmdList, Cmd)
        end
    end

    self.IsPlaying = true
end

---Destroy
function BandCmdTuneMulti:OnUpdate(DeltaTime)
    if not self.IsPlaying then
        return
    end

    if self.NpcActor == nil then
        TouringBandUtil.Err("BandCmdTuneMulti.OnUpdate Failed: Invalid self.NpcActor")
        return
    end

    local LastTime = self.CurrentTime
    local NextTime = LastTime + DeltaTime
    self.CurrentTime = NextTime
    for _, Cmd in ipairs(self.SubCmdList) do
        if Cmd.IsEnd then
            goto continue
        end

        if not Cmd.IsStart then
            if LastTime <= Cmd.StartTime and NextTime >= Cmd.StartTime then
                Cmd:Start(Cmd.StartTime, false)
            elseif NextTime >= Cmd.StartTime and NextTime <= Cmd.EndTime then
                Cmd:Start(self.CurrentTime, true)
            end
        end

        if NextTime > Cmd.EndTime and Cmd.PlayCount == 0 then
            Cmd:TriggerEventAfterStartTime()
        end

        if Cmd.IsStart then
            if NextTime > Cmd.StartTime then
                Cmd:Update(DeltaTime, self.CurrentTime)
            end

            if NextTime >= Cmd.EndTime then
                Cmd:End()
            end
        end

        :: continue ::
    end
end

function BandCmdTuneMulti:OnEnd()
    self.IsPlaying = false
    if self.SubCmdList == nil then
        return
    end
    for _, Cmd in ipairs(self.SubCmdList) do
        if Cmd.IsStart then
            Cmd:End()
        end
    end
end

function BandCmdTuneMulti:OnDestroy()
    if self.SubCmdList == nil then
        return
    end
    for _, Cmd in ipairs(self.SubCmdList) do
        Cmd:Destroy()
    end
    self.SubCmdList = {}
end

return BandCmdTuneMulti