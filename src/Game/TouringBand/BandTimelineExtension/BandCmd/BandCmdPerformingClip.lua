---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2024/7/2 17:26
---
local LuaClass = require("Core/LuaClass")
local ProtoRes = require ("Protocol/ProtoRes")
local AudioUtil = require("Utils/AudioUtil")
local EventID = require("Define/EventID")
local TouringBandSongCfg = require("TableCfg/TouringBandSongCfg")
local BandCmdBase = require("Game/TouringBand/BandTimelineExtension/BandCmd/BandCmdBase")
local TouringBandDefine = require("Game/TouringBand/TouringBandDefine")
local TouringBandUtil = require("Game/TouringBand/TouringBandUtil")

local BandCmdPerformingClip = LuaClass(BandCmdBase)

function BandCmdPerformingClip:OnInit()
    self.Name = "BandCmdPerformingClip"
    self.EventType = ProtoRes.TOURING_BAND_TIMELINE_EVENT_PARENT_TYPE.TB_EVENT_SUB_PERFORMING
end

function BandCmdPerformingClip:OnStart()
    if self.Param == nil then
        TouringBandUtil.Err("BandCmdCreateNpcClip.OnStart Create Failed ID =  : " .. self.ID)
        return
    end

    local Timeline = _G.BandTimelineMgr:GetTimelineByID(self.TimelineID)
    if not Timeline then
        TouringBandUtil.Err("BandCmdCreateNpcClip.OnStart Failed: Timeline not found for ID = " .. tostring(self.TimelineID))
        return
    end

    local Member = Timeline:GetMemberEntityIDList()
    local EntityID = Member[self.TargetIndex]
    if EntityID <= 0 then
        TouringBandUtil.Err("BandCmdCreateNpcClip.OnStart Failed: Invalid EntityID (0) at Index = " .. tostring(self.TargetIndex))
        return
    end

    local SongID = self.Param[1] or 0
    local Cfg = TouringBandSongCfg:FindCfgByKey(SongID)
    if Cfg == nil then
        return
    end
    self.AudioID = AudioUtil.SyncLoadAndPlaySoundEvent(EntityID, Cfg.File, true)
    _G.EventMgr:SendEvent(EventID.TouringBandStatesChange, { TimelineID = self.TimelineID, Key = TouringBandDefine.STATES_TYPE.PERFORMING , Value = true })
    if self.AudioID == nil then
        TouringBandUtil.Error(string.format("[BandCmdPerformingClip:OnStart]ID=%d, SongID=%d.", self.ID, SongID))
        return
    end
    -- 调整播放进度
    if self.IsMidPlayback then
        if TouringBandDefine.DEBUG then
            AudioUtil.SeekOnEventPercent(Cfg.File, self.AudioID, self.PlayProgress, EntityID)
        else
            local SeekTime = math.max(math.floor((self.CurrentTime - self.StartTime) * 1000), 0)
            AudioUtil.SeekOnEventMs(Cfg.File, self.AudioID, SeekTime, EntityID)
        end
    end
    TouringBandUtil.Log(string.format("[BandCmdPerformingClip:OnStart]ID=%d, AudioID=%d, SongID=%d.", self.ID, self.AudioID, SongID))
end

function BandCmdPerformingClip:OnEnd()
    if self.AudioID == nil then
        return
    end
    AudioUtil.StopSound(self.AudioID)
    _G.EventMgr:SendEvent(EventID.TouringBandStatesChange, { TimelineID = self.TimelineID, Key = TouringBandDefine.STATES_TYPE.PERFORMING , Value = false })
    TouringBandUtil.Log(string.format("[BandCmdPerformingClip:OnEnd]ID=%d, AudioID=%d.", self.ID, self.AudioID))
    self.AudioID = nil
end

function BandCmdPerformingClip:OnDestroy()
    if self.AudioID == nil then
        return
    end
    AudioUtil.StopSound(self.AudioID)
    TouringBandUtil.Log(string.format("[BandCmdPerformingClip:OnDestroy]ID=%d, AudioID=%d.", self.ID, self.AudioID))
    self.AudioID = nil
end

return BandCmdPerformingClip