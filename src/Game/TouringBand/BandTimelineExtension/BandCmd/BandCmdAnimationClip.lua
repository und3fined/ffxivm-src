---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2024/12/24 15:04
---

local LuaClass = require("Core/LuaClass")
local ProtoRes = require("Protocol/ProtoRes")
local ActorUtil = require("Utils/ActorUtil")
local BandCmdBase = require("Game/TouringBand/BandTimelineExtension/BandCmd/BandCmdBase")
local TouringBandUtil = require("Game/TouringBand/TouringBandUtil")

local BandCmdAnimationClip = LuaClass(BandCmdBase)

function BandCmdAnimationClip:OnInit()
    self.Name = "BandCmdAnimationClip"
    self.EventType = ProtoRes.TOURING_BAND_TIMELINE_EVENT_SUB_TYPE.TB_SUB_ANIMATION
    self.EntityID = 0
    self.NpcActor = nil
    self.AtlID = ""
    self.LoopAtlID = ""
    self.BlendInTime = 0.25
    self.BlendOutTime = 0.25
end

function BandCmdAnimationClip:SetEntityID(InEntityID)
    self.EntityID = InEntityID
end

function BandCmdAnimationClip:OnStart()
    if self.Param == nil then
        TouringBandUtil.Err("BandCmdAnimationClip.OnStart Failed ID =  : " .. self.ID)
        return
    end

    self.NpcActor = ActorUtil.GetActorByEntityID(self.EntityID)
    if self.NpcActor == nil then
        TouringBandUtil.Err("BandCmdAniMulti.OnStart Failed: Invalid self.NpcActor")
        return
    end
    
    self.AtlID = self.Param[1] or ""
    self.LoopAtlID = self.Param[2] or ""
    
    if string.isnilorempty(self.AtlID) then
        TouringBandUtil.Err("BandCmdAniMulti.OnUpdate Failed: Invalid AtlID")
        return
    end

    local Animations = {}
    local bLoopAtlIDEmpty = string.isnilorempty(self.LoopAtlID)
    local bAtlIDLoop = bLoopAtlIDEmpty and self.IsLoop -- 沒有循环动作，且需要循环的时候
    local TimelinePath = _G.AnimMgr:GetActionTimeLinePath(self.AtlID)
    table.insert(Animations, { AnimPath = TimelinePath, BlendInTime = self.BlendInTime, BlendOutTime = self.BlendOutTime, bLoop = bAtlIDLoop})

    if not bLoopAtlIDEmpty then
        local LoopTimelinePath = _G.AnimMgr:GetActionTimeLinePath(self.LoopAtlID)
        table.insert(Animations, { AnimPath = LoopTimelinePath, BlendInTime = self.BlendInTime, BlendOutTime = self.BlendOutTime, bLoop = true})
    end

    --for i, v in ipairs(Animations) do
    --    _G.FLOG_ERROR("[TB].PlayAnimationMulti.ID =" .. self.ID .. "  EntityID =" .. self.EntityID .. " AnimPath = " .. v.AnimPath .. " CycleNumber = " .. self.CycleNumber)
    --end
    self.PrevAnimationQueueID = _G.AnimMgr:PlayAnimationMulti(self.EntityID, Animations, true)
end

--function BandCmdAnimationClip:OnUpdate(DeltaTime)
--    if self.IsPlaying then
--        return
--    end
--
--    if self.NpcActor == nil then
--        TouringBandUtil.Err("BandCmdAniMulti.OnUpdate Failed: Invalid self.NpcActor")
--        return
--    end
--
--    --if self.IsLoop then
--    --    -- 调整播放进度
--    --    if self.IsMidPlayback then
--    --        if _G.UE.UCommonUtil.IsObjectValid(Montage) and _G.UE.UCommonUtil.IsObjectValid(AnimInst) then
--    --            local Length = AnimationUtil.GetAnimMontageLength(Montage)
--    --            local InputTime = self.CurrentTime - self.StartTime
--    --            local Repetitions = math.floor(InputTime / Length)
--    --            local RemainingTime = InputTime - (Repetitions * Length)
--    --            local Position = math.floor(((RemainingTime / Length) * 100) + 0.5) * 0.01
--    --            AnimationUtil.SetMontagePosition(AnimInst, Montage, Position)
--    --        end
--    --    end
--    --end
--end

return BandCmdAnimationClip