---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2024/7/2 16:27
---

local LuaClass = require("Core/LuaClass")
local ProtoRes = require("Protocol/ProtoRes")
local ActorUtil = require("Utils/ActorUtil")
local BandCmdBase = require("Game/TouringBand/BandTimelineExtension/BandCmd/BandCmdBase")
local TouringBandNodeMoveCfg = require("TableCfg/TouringBandNodeMoveCfg")
local TouringBandUtil = require("Game/TouringBand/TouringBandUtil")
local TouringBandDefine = require("Game/TouringBand/TouringBandDefine")
local EventID = require("Define/EventID")
local FVector = _G.UE.FVector
local FVector2D = _G.UE.FVector2D
local FMath = _G.UE.UMathUtil

local BandCmdMove = LuaClass(BandCmdBase)

function BandCmdMove:OnInit()
    self.Name = "BandCmdMove"
    self.EventType = ProtoRes.TOURING_BAND_TIMELINE_EVENT_PARENT_TYPE.TB_EVENT_BAND_MOVE
end

function BandCmdMove:OnStart()
    if not self.Param then
        TouringBandUtil.Err("BandCmdMove.OnStart Failed: Param is nil. ID = " .. tostring(self.ID))
        return
    end

    local Timeline = _G.BandTimelineMgr:GetTimelineByID(self.TimelineID)
    if not Timeline then
        TouringBandUtil.Err("BandCmdMove.OnStart Failed: Timeline not found for ID = " .. tostring(self.TimelineID))
        return
    end
    
    local ClipID = self.Param[1] or 0
    local UMoveSyncMgr = _G.UE.UMoveSyncMgr:Get()
    local CfgData = TouringBandNodeMoveCfg:FindAllCfg(string.format("ClipID = %d", ClipID))
    local Member = Timeline:GetMemberEntityIDList()

    for __, Item in ipairs(CfgData) do
        local Index = Item.Target
        local EntityID = Member[Index]
        if EntityID <= 0 then
            TouringBandUtil.Err("BandCmdMove.OnStart Move Failed: Invalid EntityID (0) at Index = " .. tostring(Index))
        else
            local NpcActor = ActorUtil.GetActorByEntityID(EntityID)
            if not NpcActor then
                TouringBandUtil.Err("BandCmdMove.OnStart Failed: NpcActor not found for EntityID = " .. tostring(EntityID))
            else
                local AttrComp = NpcActor:GetAttributeComponent()
                if not AttrComp then
                    TouringBandUtil.Err("BandCmdMove.OnStart Failed: AttrComp is nil for EntityID = " .. tostring(EntityID))
                else
                    local PathPoints = _G.UE.TArray(FVector)
                    local NpcPos = NpcActor:FGetLocation(_G.UE.EXLocationType.ActorLoc)

                    local yNewRotation = self.Param[5] or 0
                    local yBaseRotation = self.Param[6] or 0
                    local xOffset = (Item.Param[1] or 0) + (self.Param[2] or 0)
                    local yOffset = (Item.Param[2] or 0) + (self.Param[3] or 0)
                    local zOffset = (Item.Param[3] or 0) + (self.Param[4] or 0)

                    xOffset, yOffset = TouringBandUtil.CombinedRotation(xOffset, yOffset, self.CenterPos.X, self.CenterPos.Y, yBaseRotation, yNewRotation)
                    
                    local Speed = Item.Param[5] or 500
                    local FarPos = _G.UE.FVector(xOffset, yOffset, zOffset)
                    local LeftTime = self.DurationTime

                    if self.IsMidPlayback then
                        LeftTime = (1 - self.PlayProgress) * self.DurationTime
                        --根据时间来计算（废弃）
                        --local Curr2DPos = FMath.V2DLerp(FVector2D(NpcPos.X, NpcPos.Y), FVector2D(FarPos.X, FarPos.Y), self.PlayProgress)
                        --NpcPos = FVector(Curr2DPos.X, Curr2DPos.Y, NpcPos.Z)
                        --NpcActor:FSetVectorForServer(NpcPos, _G.UE.EXLocationType.ActorLoc)
                        
                        --根据速度来计算
                        local ElapsedDistance = Speed * (self.DurationTime - LeftTime)
                        -- 总距离（起点到终点的平面距离）
                        local TotalDistance = _G.UE.FVector.Dist(FVector(NpcPos.X, NpcPos.Y, NpcPos.Z), FVector(FarPos.X, FarPos.Y, FarPos.Z))
                        -- 当前进度比例（已走距离 / 总距离）
                        local CurrentProgress = (TotalDistance > 0) and (ElapsedDistance / TotalDistance) or 0
                        CurrentProgress = math.clamp(CurrentProgress, 0.0, 1.0)  -- 限制在 [0, 1] 范围
                        -- 插值计算当前位置
                        local Curr2DPos = FMath.V2DLerp(FVector2D(NpcPos.X, NpcPos.Y), FVector2D(FarPos.X, FarPos.Y), CurrentProgress)
                        NpcPos = FVector(Curr2DPos.X, Curr2DPos.Y, NpcPos.Z)
                        NpcActor:FSetVectorForServer(NpcPos, _G.UE.EXLocationType.ActorLoc)
                    end

                    PathPoints:Add(NpcPos)
                    PathPoints:Add(FarPos)
                    UMoveSyncMgr:StartClientMove(EntityID, PathPoints, Speed)
                end
            end
        end
    end

    -- 如果已经处于ComeOn状态，就证明要准备离开了
    local IsComeOnState = _G.BandTimelineMgr:GetTimelineState(self.TimelineID, TouringBandDefine.STATES_TYPE.COME_ON)
    if IsComeOnState then
        _G.EventMgr:SendEvent(EventID.TouringBandStatesChange, { TimelineID = self.TimelineID, Key = TouringBandDefine.STATES_TYPE.MOVE_OUT_READY , Value = true })
        _G.EventMgr:SendEvent(EventID.TouringBandForceExitInteractive)
        local EobjActor = ActorUtil.GetActorByEntityID(Member[ProtoRes.TOURING_BAND_TIMELINE_EVENT_TARGET_TYPE.TB_TARGET_EOBJ])
        if EobjActor then
            EobjActor:SetSharedGroupTimelineState(16)
        end
    end
end

function BandCmdMove:OnEnd()
    local Timeline = _G.BandTimelineMgr:GetTimelineByID(self.TimelineID)
    if not Timeline then
        TouringBandUtil.Err("BandCmdMove.OnEnd Failed: Timeline not found for ID = " .. tostring(self.TimelineID))
        return
    end

    local UMoveSyncMgr = _G.UE.UMoveSyncMgr:Get()
    local Member = Timeline:GetMemberEntityIDList()
    local ClipID = self.Param[1] or 0
    local CfgList = TouringBandNodeMoveCfg:FindAllCfg(string.format("ClipID = %d", ClipID))

    local MastX = 0
    local MastY = 0

    for __, Item in ipairs(CfgList) do
        local Index = Item.Target
        if Index == 1 then
            MastX = (Item.Param[1] or 0) + (self.Param[2] or 0)
            MastY = (Item.Param[2] or 0) + (self.Param[3] or 0)
        end
    end
    for __, Item in ipairs(CfgList) do
        local Index = Item.Target
        local EntityID = Member[Index]
        if EntityID <= 0 then
            TouringBandUtil.Err("BandCmdMove.OnEnd Move Failed: Invalid EntityID (0) at Index = " .. tostring(Index))
        else
            local NpcActor = ActorUtil.GetActorByEntityID(EntityID)
            if not NpcActor then
                TouringBandUtil.Err("BandCmdMove.OnEnd Failed: NpcActor not found for EntityID = " .. tostring(EntityID))
            else
                local AttrComp = NpcActor:GetAttributeComponent()
                if not AttrComp then
                    TouringBandUtil.Err("BandCmdMove.OnEnd Failed: AttrComp is nil for EntityID = " .. tostring(EntityID))
                else
                    UMoveSyncMgr:CancelClientMove(self.EntityID)
                    
                    local yNewRotation = self.Param[5] or 0
                    local yBaseRotation = self.Param[6] or 0
                    local xOffset = (Item.Param[1] or 0) + (self.Param[2] or 0)
                    local yOffset = (Item.Param[2] or 0) + (self.Param[3] or 0)
                    local zOffset = (Item.Param[3] or 0) + (self.Param[4] or 0)

                    xOffset, yOffset = TouringBandUtil.CombinedRotation(xOffset, yOffset, self.CenterPos.X, self.CenterPos.Y, yBaseRotation, yNewRotation)
                    local Location = _G.UE.FVector(xOffset, yOffset, zOffset)
                    local Rotation = _G.UE.FRotator(0, (Item.Param[4] or 0) + (self.Param[5] or 0), 0)
                    
                    NpcActor:FSetVectorForServer(Location, _G.UE.EXLocationType.ActorLoc)
                    NpcActor:AdjustGround(false)
                    
                    NpcActor:SetCharacterRotationInterpByTime(Rotation, 0.5)
                end
            end
        end
    end

    local IsComeOnState = _G.BandTimelineMgr:GetTimelineState(self.TimelineID, TouringBandDefine.STATES_TYPE.COME_ON)
    _G.EventMgr:SendEvent(EventID.TouringBandStatesChange, { TimelineID = self.TimelineID, Key = TouringBandDefine.STATES_TYPE.COME_ON , Value = not IsComeOnState })
    _G.EventMgr:SendEvent(EventID.TouringBandStatesChange, { TimelineID = self.TimelineID, Key = TouringBandDefine.STATES_TYPE.MOVE_IN_END , Value = true })
end

function BandCmdMove:OnTriggerEventAfterStartTime()
    self:OnEnd()
end

return BandCmdMove