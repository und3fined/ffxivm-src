---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2024/7/2 15:41
---


local LuaClass = require("Core/LuaClass")
local TouringBandUtil = require("Game/TouringBand/TouringBandUtil")
local TouringBandDefine = require("Game/TouringBand/TouringBandDefine")
local TimeUtil = require("Utils/TimeUtil")
local ProtoRes = require("Protocol/ProtoRes")
local TouringBandTimelineCfg = require("TableCfg/TouringBandTimelineCfg")

---@class BandCmdBase
local BandCmdBase = LuaClass()

-- 子类可以按需求实现函数
-- OnStart
-- OnUpdate
-- OnEnd
-- OnDestroy
-- OnTriggerEventAfterStartTime

function BandCmdBase:Ctor()
    self:Reset()
end

function BandCmdBase:Reset()
    self.ID = 0
    self.PlayRate = 1.0
    self.TimelineID = 0
    self.ClipID = 0
    self.OwnerEntityID = 0
    self.BaseStartTime = 0
    self.StartTime = 0
    self.EndTime = 0
    self.DurationTime = 0
    self.TargetIndex = 0
    self.CurrentTime = 0
    self.IsInit = false
    self.IsStart = false
    self.IsEnd = false
    self.IsTriggerEvent = false
    self.PlayProgress = 0
    self.PlayCount = 0
    self.CycleInterval = 0
    self.CycleBaseNumber = 0 --Base数据不会变，用于CycleNumber的恢复
    self.CycleNumber = 0
    self.IsLoop = false
end

---Init
---@param ClipCfg table
---@param StartTime number
---@param PlayRate number
function BandCmdBase:Init(ClipCfg, TimelineID, StartTime, PlayRate)
    self.Name = ""
    self.PlayRate = PlayRate
    self.TimelineID = TimelineID
    self.ID = ClipCfg.ID
    self.ClipID = ClipCfg.ClipID or 0
    self.BaseStartTime = ClipCfg.StartTime or 0
    self.StartTime = (self.BaseStartTime or 0) + StartTime
    self.DurationTime = ClipCfg.DurationTime or 0
    self.TargetIndex = ClipCfg.Target or 0
    self.Param = ClipCfg.Param
    self.StringParam = ClipCfg.StringParam
    self.IsLoop = ClipCfg.IsLoop == 1
    self.CycleInterval = ClipCfg.CycleInterval or 0
    self.CycleBaseNumber = ClipCfg.CycleNumber or 0
    self.CycleNumber = self.CycleBaseNumber
    self.CenterPos = { X = 0, Y = 0, Z = 0}

    self.EndTime = self.StartTime + self.DurationTime
    self.CurrentTime = 0
    self.IsMidPlayback = false
    self.IsStart = false
    self.IsEnd = false
    self.IsTriggerEvent = false
    self.PlayProgress = 0
    self.PlayCount = 0

    local BandTimeLineCfg = TouringBandTimelineCfg:FindCfgByKey(self.TimelineID)
    if BandTimeLineCfg then
        self.CenterPos = BandTimeLineCfg.Pos
    end

    if self.OnInit and type(self.OnInit) == "function" then
        self:OnInit()
    end

    if TouringBandDefine.DEBUG then
        local Difference = string.format("%.1f", self.StartTime - _G.TouringBandMgr.TestBeginTime or 0)
        TouringBandUtil.Log("ID :" .. self.ID .. "  BandTimelineBase." .. self.Name .. ".Init StartTime =  : "
                .. Difference .. "  DurationTime = " .. self.DurationTime)
    end
end

---ReSetStartTime
---@param StartTime number
function BandCmdBase:ReSetStartTime(StartTime)
    self.StartTime = self.BaseStartTime + StartTime
    self.EndTime = self.StartTime + self.DurationTime
    self.CurrentTime = 0
    self.PlayProgress = 0
    self.PlayCount = 0
    self.CycleNumber = self.CycleBaseNumber
end

---Update
---@param DeltaTime number
function BandCmdBase:Update(DeltaTime, CurrentTime)
    --if TouringBandDefine.DEBUG then
    --    local Difference = string.format("%.1f", CurrentTime - _G.TouringBandMgr.TestBeginTime or 0)
    --    TouringBandUtil.Log("ID :" .. self.ID .. "  BandTimelineBase." .. self.Name .. ".OnUpdate.Progress : " ..
    --            self:GetPlayProgress() .. "  CycleNumber = " .. self.CycleNumber .. "  CurrentTime = " .. Difference)
    --end
    if self.OnUpdate then
        self.CurrentTime = CurrentTime
        self:OnUpdate(DeltaTime)
    end
end

---Start
---@param CurrentTime number
---@param IsMidPlayback boolean
function BandCmdBase:Start(CurrentTime, IsMidPlayback)
    self.IsStart = true
    self.CurrentTime = CurrentTime
    self.IsMidPlayback = IsMidPlayback
    if self.IsMidPlayback then
        self.PlayProgress = self:GetPlayProgress()
    else
        self.PlayProgress = 0
    end
    self.PlayCount = self.PlayCount + 1

    if self.OnStart and type(self.OnStart) == "function" then
        --if TouringBandDefine.DEBUG then
        --    local Difference = string.format("%.1f", self.CurrentTime - _G.TouringBandMgr.TestBeginTime or 0)
        --    TouringBandUtil.Log("ID :" .. self.ID .. "  BandTimelineBase." .. self.Name .. ".OnStart CurTime =  : " ..
        --            Difference .. "  CycleNumber = " .. self.CycleNumber)
        --end
        self:OnStart()
    end
end

---End
function BandCmdBase:End()
    self.IsStart = false
    self:ResetCycleCount()

    if self.OnEnd and type(self.OnEnd) == "function" then
        --if TouringBandDefine.DEBUG then
        --    local Difference = string.format("%.1f", self.CurrentTime - _G.TouringBandMgr.TestBeginTime or 0)
        --    TouringBandUtil.Log("ID :" .. self.ID .. "  BandTimelineBase." .. self.Name .. ".OnEnd CurTime =  : " .. Difference)
        --end
        self:OnEnd()
    end
end

---Destroy
function BandCmdBase:Destroy()
    if self.OnDestroy and type(self.OnDestroy) == "function" then
        --if TouringBandDefine.DEBUG then
        --    local Difference = string.format("%.1f", self.CurrentTime - _G.TouringBandMgr.TestBeginTime or 0)
        --    TouringBandUtil.Log("ID :" .. self.ID .. "  BandTimelineBase." .. self.Name .. ".Destroy CurTime =  : " .. Difference)
        --end
        self:OnDestroy()
        self:Reset()
    end
end

---TriggerEventAfterStartTime
function BandCmdBase:TriggerEventAfterStartTime()
    self.PlayCount = self.PlayCount + 1
    self:ResetCycleCount()

    if self.OnTriggerEventAfterStartTime and type(self.OnTriggerEventAfterStartTime) == "function" then
        --if TouringBandDefine.DEBUG then
        --    local Difference = string.format("%.1f", self.CurrentTime - _G.TouringBandMgr.TestBeginTime or 0)
        --    TouringBandUtil.Log("ID :" .. self.ID .. "  BandTimelineBase." .. self.Name .. ".TriggerEventAfterStartTime CurTime =  : "
        --            .. Difference)
        --end
        self:OnTriggerEventAfterStartTime()
    end
end

function BandCmdBase:ResetCycleCount()
    self.CycleNumber = self.CycleNumber - 1
    if self.CycleNumber <= 0 then
        return
    end

    self.StartTime = self.StartTime + self.CycleInterval
    self.EndTime = self.StartTime + self.DurationTime
    self.PlayProgress = 0
    self.PlayCount = 0
end

---GetPlayProgress
function BandCmdBase:GetPlayProgress()
    local Elapsed = TimeUtil.GetServerLogicTime() - self.StartTime
    if self.DurationTime <= 0 then
        return 0
    end

    local Number = math.max(0, math.min(1, Elapsed / self.DurationTime))
    return math.floor((Number * 100) + 0.5) * 0.01
end

return BandCmdBase
