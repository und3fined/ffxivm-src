---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xieyuhang
--- DateTime: 2024/6/11 14:54
---
---
local MgrBase = require("Common/MgrBase")
local LuaClass = require("Core/LuaClass")
local TimeUtil = require("Utils/TimeUtil")
local UIViewMgr = require("UI/UIViewMgr")
local UIViewID = require("Define/UIViewID")
local EventID = require("Define/EventID")
local EventMgr = require("Event/EventMgr")
local TouringBandCfg = require("TableCfg/TouringBandCfg")
local TouringBandTimelineCfg = require("TableCfg/TouringBandTimelineCfg")
local TouringBandGuideVM = require("Game/TouringBand/VM/TouringBandGuideVM")
local TouringBandPosterItemVM = require("Game/TouringBand/VM/TouringBandPosterItemVM")
local TouringBandActionBtnVM = require("Game/TouringBand/VM/TouringBandActionBtnVM")
local TouringBandSupportWinVM = require("Game/TouringBand/VM/TouringBandSupportWinVM")
local TouringBandFanWinVM = require("Game/TouringBand/VM/TouringBandFanWinVM")
local TouringBandDefine = require("Game/TouringBand/TouringBandDefine")
local MsgTipsID = require("Define/MsgTipsID")
local MsgTipsUtil = require("Utils/MsgTipsUtil")
local ClosetCfg = require("TableCfg/ClosetCfg")
local ProtoCS = require("Protocol/ProtoCS")
local AudioUtil = require("Utils/AudioUtil")
local MajorUtil = require("Utils/MajorUtil")
local TouringBandSongCfg = require("TableCfg/TouringBandSongCfg")
local EquipmentCfg = require("TableCfg/EquipmentCfg")
local SaveKey = require("Define/SaveKey")
local ActorUtil = require("Utils/ActorUtil")
local ClientGlobalCfg = require("TableCfg/ClientGlobalCfg")
local ProtoRes = require("Protocol/ProtoRes")
local TutorialDefine = require("Game/Tutorial/TutorialDefine")
local TouringBandUtil = require("Game/TouringBand/TouringBandUtil")
local GameGlobalCfg = require("TableCfg/GameGlobalCfg")
local ProtoCommon = require("Protocol/ProtoCommon")
local EquipmentVM = require("Game/Equipment/VM/EquipmentVM")
local DataReportUtil = require("Utils/DataReportUtil")

local CS_CMD_TOURING_BAND = ProtoCS.CS_CMD.CS_CMD_TOURING_BAND
local SUB_MSG_ID = ProtoCS.Game.TouringBand.Cmd
local FadeOutTime = 500
local GameNetworkMgr = nil
local PWorldMgr = nil
local BandTimelineMgr = nil
local USaveMgr = nil

---@class TouringBand : MgrBase
local TouringBandMgr = LuaClass(MgrBase)

function TouringBandMgr:OnInit()

end

function TouringBandMgr:OnBegin()
    USaveMgr = _G.UE.USaveMgr
    PWorldMgr = _G.PWorldMgr
    BandTimelineMgr = _G.BandTimelineMgr
    GameNetworkMgr = _G.GameNetworkMgr
    self.CurBandID = 0
    self.TouringBandGuideVM = nil
    self.TouringBandData = {}
    self.IsEnterInteractive = false
    self.CustomizeRedDotList = {}
    self.BandMapData = {}
    self.IsAreaEnter = false
    self.TgLogListenTime = 0
    self.TestBeginTime = 0
    self:ReadSaveKeyData()
end

function TouringBandMgr:OnRegisterNetMsg()
    self:RegisterGameNetMsg(CS_CMD_TOURING_BAND, SUB_MSG_ID.QueryCollection, self.OnNetMsgQueryCollection)
    self:RegisterGameNetMsg(CS_CMD_TOURING_BAND, SUB_MSG_ID.QueryBandMapData, self.OnNetMsgQueryBandMapData)
    self:RegisterGameNetMsg(CS_CMD_TOURING_BAND, SUB_MSG_ID.BandCollectedUnlock, self.OnNetMsgBandCollectedUnlock)
    self:RegisterGameNetMsg(CS_CMD_TOURING_BAND, SUB_MSG_ID.ClickBandEmotion, self.OnNetMsgBandBandClickBandEmotion)
    self:RegisterGameNetMsg(CS_CMD_TOURING_BAND, SUB_MSG_ID.BandInteractReport, self.OnNetMsgBandInteractReport)
    self:RegisterGameNetMsg(CS_CMD_TOURING_BAND, SUB_MSG_ID.BandInteractFinish, self.OnNetMsgBandInteractFinish)
    self:RegisterGameNetMsg(CS_CMD_TOURING_BAND, SUB_MSG_ID.BandBirthNotify, self.OnNetMsgBandBirthNotify)
end

function TouringBandMgr:OnRegisterGameEvent()
    self:RegisterGameEvent(EventID.RoleLoginRes, self.OnGameEventLoginRes)
    self:RegisterGameEvent(EventID.PWorldMapEnter, self.OnGameEventPWorldMapEnter)
    self:RegisterGameEvent(EventID.PWorldMapExit, self.OnGameEventPWorldMapExit)
    self:RegisterGameEvent(EventID.PostEmotionEnter, self.OnGameEventPostEmotionEnter)

    self:RegisterGameEvent(EventID.TouringBandAreaEnter, self.OnTouringBandAreaEnter)
    self:RegisterGameEvent(EventID.TouringBandStatesNotify, self.OnTouringBandStatesNotify)
    self:RegisterGameEvent(EventID.TouringBandForceExitInteractive, self.OnTouringBandForceExitInteractive)
    
    self:RegisterGameEvent(EventID.TutorialGuideTouringBandFinish, self.OnTouringBandRefreshCherringBtnVisible)
end

function TouringBandMgr:OnEnd()
    self.CurBandID = 0
    self.TouringBandData = {}
    self.IsEnterInteractive = false
    self.CustomizeRedDotList = {}
    self.BandMapData = {}
    self.IsAreaEnter = false
    self.TgLogListenTime = 0

    self.TouringBandGuideVM = nil
    self.PosterVM = nil
    self.FanWinVM = nil
    self.TouringBandSupportWinVM = nil

    -- 只有TouringBandActionBtnVM里面有定时器，需要OnEnd一下，其他VM直接 = nil就好
    if self.TouringBandActionBtnVM ~= nil then
        self.TouringBandActionBtnVM:OnEnd()
    end
    self.TouringBandActionBtnVM = nil
    self:CancelReqTimer()
end

function TouringBandMgr:OnShutdown()

end

function TouringBandMgr:OnGameEventLoginRes()
    if not self:IsTouringBandUnLock() then
        return
    end
    
    local ModuleID = ProtoCommon.ModuleID
    local IsChocoboOpen = _G.ModuleOpenMgr:CheckOpenState(ModuleID.ModuleIDTouringBand)
    if not IsChocoboOpen then
        return
    end

    self:QueryCollectionReq()
end

---IsUnLock
---@return boolean
function TouringBandMgr:IsTouringBandUnLock()
    if self.IsUnLock == nil then
        local TableData = ClientGlobalCfg:FindCfgByKey(ProtoRes.client_global_cfg_id.GLOBAL_CFG_TOURING_BAND_ISUNLOCK)
        if TableData ~= nil then
            self.IsUnLock = TableData.Value[1] == 1
        end
    end
    return self.IsUnLock or false
end

function TouringBandMgr:GetEmotionCD()
    if self.EmotionCD == nil then
        local TableData = GameGlobalCfg:FindCfgByKey(ProtoRes.Game.game_global_cfg_id.GAME_CFG_BAND_EMOTION_COOLING_TIME)
        if TableData ~= nil then
            self.EmotionCD = TableData.Value[1]
        end
    end
    return self.EmotionCD or 10
end

--region 发送协议包相关代码
function TouringBandMgr:OnNetMsgQueryCollection(MsgBody)
    if nil == MsgBody then
        TouringBandUtil.Err("TouringBandMgr:OnNetMsgQueryCollection: MsgBody is nil")
        return
    end
    TouringBandUtil.Log("TouringBandMgr.OnNetMsgQueryCollection: " .. _G.table_to_string_block(MsgBody, 10))

    if self:IsTouringBandUnLock() == false then
        return
    end
    
    local Collections = MsgBody.Collections
    if nil == Collections or Collections.Collections == nil then
        return
    end

    self.TouringBandData = Collections.Collections
    self:GetTouringBandGuideVM()
end

function TouringBandMgr:OnNetMsgQueryBandMapData(MsgBody)
    if nil == MsgBody then
        TouringBandUtil.Err("TouringBandMgr:OnNetMsgQueryBandMapData: MsgBody is nil")
        return
    end
    TouringBandUtil.Log("TouringBandMgr.OnNetMsgQueryBandMapData: " .. _G.table_to_string_block(MsgBody))

    if self:IsTouringBandUnLock() == false then
        return
    end

    local BandMapData = MsgBody.BandMapData
    if nil == BandMapData or BandMapData.Bands == nil then
        return
    end

    self.BandMapData = BandMapData.Bands
    for __, Item in ipairs(self.BandMapData) do
        local Band = Item.Band
        if Band.BirthTime > 0 then
            BandTimelineMgr:CreateBandTimeline(Band.TimelineID, math.floor(Band.BirthTime / 1000)) -- 传回的时间是毫秒，转成秒
        else
            BandTimelineMgr:DestroyBandTimeline(Band.TimelineID)
        end
    end
end

function TouringBandMgr:OnNetMsgBandCollectedUnlock(MsgBody)
    if nil == MsgBody then
        TouringBandUtil.Err("TouringBandMgr:OnNetMsgBandCollectedUnlock: MsgBody is nil")
        return
    end
    TouringBandUtil.Log("TouringBandMgr.OnNetMsgBandCollectedUnlock: " .. _G.table_to_string_block(MsgBody))

    if self:IsTouringBandUnLock() == false then
        return
    end

    local CollectedUnlock = MsgBody.CollectedUnlock
    if nil == CollectedUnlock then
        return
    end

    local BandMapData = self:GetBandMapDataByID(CollectedUnlock.BandID)
    if BandMapData == nil then
        return
    end
    
    BandMapData.IsUnlock = true
end

function TouringBandMgr:OnNetMsgBandBandClickBandEmotion(MsgBody)
    if nil == MsgBody then
        TouringBandUtil.Err("TouringBandMgr:OnNetMsgBandBandClickBandEmotion: MsgBody is nil")
        return
    end
    TouringBandUtil.Log("TouringBandMgr.OnNetMsgBandBandClickBandEmotion: " .. _G.table_to_string_block(MsgBody))

    if self:IsTouringBandUnLock() == false then
        return
    end

    local ClickBandEmotion = MsgBody.ClickBandEmotion
    if nil == ClickBandEmotion then
        return
    end

    local BandID = ClickBandEmotion.BandID
    if self.CurBandID ~= BandID then
        return
    end

    local BandMapData = self:GetBandMapDataByID(BandID)
    if BandMapData == nil then
        return
    end

    local Timeline = BandTimelineMgr:GetTimelineByBandID(self.CurBandID)
    if Timeline ~= nil then
        local EntityID = Timeline:GetEntityIDByIndex(ProtoRes.TOURING_BAND_TIMELINE_EVENT_TARGET_TYPE.TB_TARGET_EOBJ)
        local FromActor = ActorUtil.GetActorByEntityID(MajorUtil.GetMajorEntityID())
        local TargetActor = ActorUtil.GetActorByEntityID(EntityID)
        local bIsSit = _G.EmotionMgr:IsSitState(MajorUtil.GetMajorEntityID())   --坐下状态不转身
        if not bIsSit then
            _G.EmotionMgr:RInterpToLookAtActor(FromActor, TargetActor)
        end
    end
    
    --UI
    local StateIDs = (ClickBandEmotion.Cheering or {}).StateIDs
    if StateIDs ~= nil then
        BandMapData.CheeringNum = (ClickBandEmotion.Cheering or {}).CheeringNum
        local VM = self:GetTouringBandSupportWinVM()
        VM:UpdateBuff(ClickBandEmotion.Cheering)
        UIViewMgr:ShowView(UIViewID.TouringBandSupportWinView)
    end
end

function TouringBandMgr:TryOpenTouringBandStoryUnLockTips()
    local BandMapData = self:GetBandMapDataByID(self.CurBandID)
    if BandMapData == nil then
        return
    end
    
    local CheeringNum = BandMapData.CheeringNum or self:GetBandCheeringNum(self.CurBandID)
    local BandCfg = TouringBandCfg:FindCfgByKey(self.CurBandID)
    if BandCfg ~= nil then
        local IsUnLockTips = false
        for ID, Value in ipairs(BandCfg.StoryListens) do
            if CheeringNum == Value then
                IsUnLockTips = true

                -- Tglog 3 解锁乐团故事
                DataReportUtil.ReportTouringBandFlowData("3", PWorldMgr:GetCurrMapResID(), self.CurBandID, tostring(ID))
            end
        end

        if IsUnLockTips then
            _G.MsgTipsUtil.ShowTipsByID(MsgTipsID.TouringBandStoryUnLock, nil, BandCfg.BandName)
        end
    end
end

function TouringBandMgr:OnNetMsgBandInteractReport(MsgBody)
    if nil == MsgBody then
        TouringBandUtil.Err("TouringBandMgr:OnNetMsgBandInteractReport: MsgBody is nil")
        return
    end
    TouringBandUtil.Log("TouringBandMgr.OnNetMsgBandInteractReport: " .. _G.table_to_string_block(MsgBody))

    if self:IsTouringBandUnLock() == false then
        return
    end

    local InteractStatus = MsgBody.InteractStatus
    if nil == InteractStatus then
        return
    end

    local BandID = InteractStatus.BandID
    local Status = InteractStatus.Status

    ----修改地图数据
    local BandMapData = self:GetBandMapDataByID(BandID)
    if BandMapData ~= nil then
        BandMapData.Status = Status
    end

    local Timeline = BandTimelineMgr:GetTimelineByBandID(BandID)
    if Timeline ~= nil then
        Timeline:SetInteractStatus(Status)
        local EntityID = Timeline:GetManagerEntityID()
        if EntityID > 0 then
            local IsShow = Status == ProtoCS.Game.TouringBand.BandInteractStatus.Wait
            local IconPath = IsShow and TouringBandDefine.BAND_MANAGER_HUD_ICON or ""
            _G.EventMgr:SendEvent(EventID.TouringBandTargetMarkIconChanged, { EntityID = EntityID, IconPath = IconPath })
        end
    end
end

function TouringBandMgr:OnNetMsgBandInteractFinish(MsgBody)
    if nil == MsgBody then
        TouringBandUtil.Err("TouringBandMgr:OnNetMsgBandInteractFinish: MsgBody is nil")
        return
    end
    TouringBandUtil.Log("TouringBandMgr.OnNetMsgBandInteractFinish: " .. _G.table_to_string_block(MsgBody))

    self.bIsReqFinishInteract = false
    self:CancelReqTimer()

    if self:IsTouringBandUnLock() == false then
        return
    end

    local InteractFinish = MsgBody.InteractFinish
    if nil == InteractFinish then
        return
    end

    local Collection = InteractFinish.Collection
    -- 修改图鉴数据
    local BandData, Index = self:GetBandDataByID(Collection.ID)
    if BandData ~= nil then
        self.TouringBandData[Index] = Collection
    else
        table.insert(self.TouringBandData, Collection)
    end

    -- 修改地图数据
    local BandMapData = self:GetBandMapDataByID(Collection.ID)
    if BandMapData ~= nil then
        BandMapData.Status = ProtoCS.Game.TouringBand.BandInteractStatus.Finish
    end

    --修改timeline数据
    local Timeline = BandTimelineMgr:GetTimelineByBandID(Collection.ID)
    if Timeline then
        Timeline:SetInteractStatus(ProtoCS.Game.TouringBand.BandInteractStatus.Finish)
        local EntityID = Timeline:GetManagerEntityID()
        if EntityID > 0 then
            _G.EventMgr:SendEvent(EventID.TouringBandTargetMarkIconChanged, { EntityID = EntityID })
        end
    end

    local PosterVM = self:GetPosterVM()
    PosterVM:UpdateVM(self.CurBandID, false)

    local VM = self:GetFanWinVM()
    VM:UpdateVM(self.CurBandID)

    UIViewMgr:ShowView(UIViewID.TouringBandFanWinView)
    --EventMgr:SendEvent(EventID.TouringBandMajorHudChanged, { IsVisible = true })
    local bFans = self:IsBandFansByID(self.CurBandID)
    local ReportParams = { BandListen = { IsListening = true, IsFans = bFans }}
    _G.ClientReportMgr:SendClientReport(ProtoCS.ReportType.ReportTypeBandListen, ReportParams)
    
    self:SetMostRecentBandID(SaveKey.TouringBandFansBandID, self.CurBandID)
end

function TouringBandMgr:OnNetMsgBandBirthNotify(MsgBody)
    if nil == MsgBody then
        TouringBandUtil.Err("TouringBandMgr:OnNetMsgBandBirthNotify: MsgBody is nil")
        return
    end

    if self:IsTouringBandUnLock() == false then
        return
    end

    local BandBirthData = MsgBody.BandBirthData
    if nil == BandBirthData or nil == BandBirthData.Bands then
        return
    end

    for __, Band in ipairs(BandBirthData.Bands) do
        if Band.BirthTime == -1 then
            BandTimelineMgr:DestroyBandTimeline(Band.TimelineID)
        end
    end

    self:OnGameEventPWorldMapEnter()
end
--endregion 发送协议包相关代码

--region 协议回包相关代码
---QueryCollectionReq
function TouringBandMgr:QueryCollectionReq()
    if self:IsTouringBandUnLock() == false then
        return
    end

    local Cmd = SUB_MSG_ID.QueryCollection
    local Params = {}
    Params.Cmd = Cmd
    GameNetworkMgr:SendMsg(CS_CMD_TOURING_BAND, Cmd, Params)
end

---QueryBandMapDataReq
---@param MapID number 地图ID
function TouringBandMgr:QueryBandMapDataReq(MapID)
    if self:IsTouringBandUnLock() == false then
        return
    end

    local Cmd = SUB_MSG_ID.QueryBandMapData
    local Params = {}
    Params.Cmd = Cmd
    Params.BandMapData = {}
    Params.BandMapData.MapResID = MapID
    GameNetworkMgr:SendMsg(CS_CMD_TOURING_BAND, Cmd, Params)
end

---BandCollectedUnlockReq
---@param BandID number 乐团ID
function TouringBandMgr:BandCollectedUnlockReq(BandID)
    if self:IsTouringBandUnLock() == false then
        return
    end

    local Cmd = SUB_MSG_ID.BandCollectedUnlock
    local Params = {}
    Params.Cmd = Cmd
    Params.CollectedUnlock = {}
    Params.CollectedUnlock.BandID = BandID
    GameNetworkMgr:SendMsg(CS_CMD_TOURING_BAND, Cmd, Params)
end

---BandListenFinishReq
---@param BandID number 乐团ID
function TouringBandMgr:BandClickEmotionReq(BandID, EmotionID)
    if self:IsTouringBandUnLock() == false then
        return
    end

    local Cmd = SUB_MSG_ID.ClickBandEmotion
    local Params = {}
    Params.Cmd = Cmd
    Params.ClickBandEmotion = {}
    Params.ClickBandEmotion.BandID = BandID
    Params.ClickBandEmotion.EmotionID = EmotionID
    GameNetworkMgr:SendMsg(CS_CMD_TOURING_BAND, Cmd, Params)
end

---BandInteractReportReq
---@param BandID number
---@param ReportType number
---@param InEventID number
function TouringBandMgr:BandInteractReportReq(BandID, ReportType, InEventID)
    if self:IsTouringBandUnLock() == false then
        return
    end

    local Cmd = SUB_MSG_ID.BandInteractReport
    local Params = {}
    Params.Cmd = Cmd
    Params.InteractReport = {}
    Params.InteractReport.BandID = BandID
    Params.InteractReport.ReportType = ReportType
    Params.InteractReport.EventID = InEventID
    GameNetworkMgr:SendMsg(CS_CMD_TOURING_BAND, Cmd, Params)
end

function TouringBandMgr:CancelReqTimer()
    if self.ReqFinishInteractTimerID then
        _G.TimerMgr:CancelTimer(self.ReqFinishInteractTimerID)
    end
    self.ReqFinishInteractTimerID = nil
end

---BandInteractFinishReq
---@param BandID number 乐团ID
function TouringBandMgr:BandInteractFinishReq(BandID)
    if self:IsTouringBandUnLock() == false then
        return
    end

    -- 重复请求会有报错, 在请求前处理一下
    if self.bIsReqFinishInteract then
        return
    end
    self.bIsReqFinishInteract = true
    self:CancelReqTimer()
    -- 超过300秒还没收到回包就不管了
    local MaxReqFinishInteractTime = 300
    self.ReqFinishInteractTimerID = _G.TimerMgr:AddTimer(self, function()
        self.bIsReqFinishInteract = false
    end, MaxReqFinishInteractTime, 0, 1)

    local Cmd = SUB_MSG_ID.BandInteractFinish
    local Params = {}
    Params.Cmd = Cmd
    Params.InteractFinish = {}
    Params.InteractFinish.BandID = BandID
    GameNetworkMgr:SendMsg(CS_CMD_TOURING_BAND, Cmd, Params)
end

-----BandInteractDecideReq
-----@param BandID  number 乐团ID
--function TouringBandMgr:BandInteractDecideReq(BandID)
--    local Cmd = SUB_MSG_ID.BandInteractDecide
--    local Params = {}
--    Params.Cmd = Cmd
--    Params.InteractDecide = {}
--    Params.InteractDecide.BandID = BandID
--    GameNetworkMgr:SendMsg(CS_CMD_TOURING_BAND, Cmd, Params)
--end
--endregion 协议回包相关代码

---PlayBandSong
---@param SongID number
function TouringBandMgr:PlayBandSong(SongID)
    if self.CurSongID == SongID then
        return
    end

    local Cfg = TouringBandSongCfg:FindCfgByKey(SongID)
    if Cfg == nil then
        return false
    end

    if self.IsAreaEnter then
        local Timeline = BandTimelineMgr:GetCurEffectiveRangeTimeline()
        if Timeline ~= nil then
            self.CurSoundEntityID = Timeline:GetBandEobjEntityID()
            local Actor = ActorUtil.GetActorByEntityID(self.CurSoundEntityID)
            if Actor then
                _G.UE.UAkGameplayStatics.SetOutputBusVolume(0, Actor)
            end
        end
    else
        _G.UE.UBGMMgr.Get():Pause()
    end

    self.CurSongID = SongID
    self.SoundHandleID = AudioUtil.SyncLoadAndPlay2DSound(Cfg.File, _G.UE.EObjectGC.Cache_Map)

    return true
end

---StopBandSong
function TouringBandMgr:StopBandSong()
    if self.SoundHandleID ~= nil then
        AudioUtil.StopSound(self.SoundHandleID, FadeOutTime)
        self.SoundHandleID = nil
        self.CurSongID = nil
    end
    
    _G.UE.UBGMMgr.Get():Resume()

    if self.CurSoundEntityID ~= nil then
        local Actor = ActorUtil.GetActorByEntityID(self.CurSoundEntityID)
        _G.UE.UAkGameplayStatics.SetOutputBusVolume(1, Actor)
        self.CurSoundEntityID = nil
    end
end

function TouringBandMgr:GetTouringBandGuideVM(IsUpdate)
    if self.TouringBandGuideVM == nil then
        self.TouringBandGuideVM = TouringBandGuideVM.New()
    end
    if IsUpdate then
        self.TouringBandGuideVM:UpdateVM()
    end
    return self.TouringBandGuideVM
end

function TouringBandMgr:GetPosterVM()
    if self.PosterVM == nil then
        self.PosterVM = TouringBandPosterItemVM.New()
    end

    return self.PosterVM
end

function TouringBandMgr:GetFanWinVM()
    if self.FanWinVM == nil then
        self.FanWinVM = TouringBandFanWinVM.New()
    end

    return self.FanWinVM
end

function TouringBandMgr:OpenTouringBandView(InFromViewID)
    if self:IsTouringBandUnLock() == false then
        return
    end

    UIViewMgr:ShowView(UIViewID.TouringBandGuidePanelView, { FromViewID = InFromViewID })
end

function TouringBandMgr:OpenTouringBandFanWinView(BandID)
    if self:IsTouringBandUnLock() == false then
        return
    end
    
    local PosterVM = self:GetPosterVM()
    PosterVM:UpdateVM(BandID, false)
    
    self:GetFanWinVM():UpdateVM(BandID)
    UIViewMgr:ShowView(UIViewID.TouringBandFanWinView)
end

---GetAllBandData
---@return table
function TouringBandMgr:GetAllBandData()
    local Ret = {}
    local AllCfg = TouringBandCfg:FindAllCfg()
    for __, Value in pairs(AllCfg) do
        local TempData = {}
        local ID = Value.ID
        TempData.BandID = ID
        TempData.BandNumber = Value.Number or "00"
        local IsUnLock = self:IsBandUnLockByID(ID)
        TempData.LockAlbum = Value.LockAlbum
        TempData.UnLockAlbum = Value.UnLockAlbum
        TempData.IsUnLock = IsUnLock
        TempData.IsFans = self:IsBandFansByID(ID)
        table.insert(Ret, TempData)
    end

    return Ret
end

---IsBandUnLockByID
---@param BandID number
function TouringBandMgr:IsBandUnLockByID(BandID)
    local Data = table.find_item(self.TouringBandData, BandID, "ID")
    if Data ~= nil then
        return true
    end

    local MapData = self:GetBandMapDataByID(BandID)
    if MapData ~= nil then
        return MapData.IsUnlock
    end
    return false
end

---IsBandFansByID
---@param BandID number
function TouringBandMgr:IsBandFansByID(BandID)
    local Data = table.find_item(self.TouringBandData, BandID, "ID")
    if Data ~= nil then
        if Data.InteractRecords ~= nil and next(Data.InteractRecords) ~= nil then
            return true
        end
    end

    local MapData = self:GetBandMapDataByID(BandID)
    if MapData ~= nil then
        return MapData.Status == ProtoCS.Game.TouringBand.BandInteractStatus.Finish
    end
    return false
end

---GetCurBandID
---@return number
function TouringBandMgr:GetCurBandID()
    return self.CurBandID
end

---GetBandCheeringNum
---@param BandID number
function TouringBandMgr:GetBandCheeringNum(BandID)
    local Ret = 0
    local Data = table.find_item(self.TouringBandData, BandID, "ID")
    if Data ~= nil then
        Ret = Data.CheeringNum or Ret
    end

    return Ret
end

function TouringBandMgr:GetBandDataByID(BandID)
    for Index, BandData in ipairs(self.TouringBandData) do
        if BandData.ID == BandID then
            return BandData, Index
        end
    end
    return nil, nil
end

function TouringBandMgr:GetBandMapDataByID(BandID)
    for __, MapData in ipairs(self.BandMapData) do
        if MapData.Band ~= nil and MapData.Band.ID == BandID then
            return MapData
        end
    end
    return nil
end

function TouringBandMgr:GetMajorListenStatusIcon()
    local Icon = TouringBandDefine.NORMAL_LINSTEN_HUD_ICON
    if self:IsBandFansByID(self.CurBandID) then
        Icon = TouringBandDefine.FANS_LINSTEN_HUD_ICON
    end
    return Icon
end

function TouringBandMgr:GetTouringBandManagerHudIcon(InEntityID)
    local Timeline = BandTimelineMgr:GetCurEffectiveRangeTimeline()
    if Timeline == nil then
        return nil
    end

    local EntityID = Timeline:GetManagerEntityID()
    if EntityID ~= InEntityID then
        return nil
    end

    local IsShow = Timeline:GetInteractStatus() == ProtoCS.Game.TouringBand.BandInteractStatus.Wait
    local IconPath = IsShow and TouringBandDefine.BAND_MANAGER_HUD_ICON or nil

    return IconPath
end

function TouringBandMgr:GetBandStoryLockState(BandID)
    local Ret = {}
    local Cfg = TouringBandCfg:FindCfgByKey(BandID)
    if Cfg == nil then
        return Ret
    end

    local CheeringNum = self:GetBandCheeringNum(BandID)
    for Index, Value in ipairs(Cfg.StoryListens) do
        local Temp = {}
        Temp.ID = Index
        Temp.Lock = Value > CheeringNum
        table.insert(Ret, Temp)
    end
    return Ret
end

function TouringBandMgr:OnGameEventPWorldMapEnter(Params)
    if self:IsTouringBandUnLock() == false then
        return
    end

    local bReconnect = false
    if Params ~= nil then
        bReconnect = Params.bReconnect
    end

    if bReconnect then
        BandTimelineMgr:CleanAllTimeline()
    end
    
    local MapResID = PWorldMgr:GetCurrMapResID()
    local IsCheck = false
    local AllCfg = TouringBandTimelineCfg:FindAllCfg()
    local k, v = next(AllCfg)
    while k do
        if v.MapID == MapResID then
            IsCheck = true
            break
        end
        k, v = next(AllCfg, k)
    end

    if IsCheck then
        self:QueryBandMapDataReq(MapResID)
    end
    self:CancelReqTimer()
end

function TouringBandMgr:OnGameEventPWorldMapExit()
    if self:IsTouringBandUnLock() == false then
        return
    end

    BandTimelineMgr:CleanAllTimeline()
    --EventMgr:SendEvent(EventID.TouringBandMajorHudChanged, { IsVisible = false })
    local ReportParams = { BandListen = { IsListening = false, IsFans = false }}
    _G.ClientReportMgr:SendClientReport(ProtoCS.ReportType.ReportTypeBandListen, ReportParams)
    self:CancelReqTimer()
end

function TouringBandMgr:OnGameEventPostEmotionEnter(Params)
    if self:IsTouringBandUnLock() == false then
        return
    end
    
    if nil == Params then return end
    if Params.ULongParam1 ~= MajorUtil.GetMajorEntityID() then
        return
    end

    local Timeline = BandTimelineMgr:GetCurEffectiveRangeTimeline()
    if Timeline == nil then
        return
    end

    local EmotionID = Params.IntParam1
    self:TouringBandConditionMet(ProtoCS.Game.TouringBand.ReportType.Emotion, EmotionID)
end

function TouringBandMgr:OnEquipUpdate()
    if not self:IsTouringBandUnLock() then
        return 
    end

    if self.CurBandID <= 0 then
        return false
    end

    if not self.IsAreaEnter then
        return
    end

    local Timeline = BandTimelineMgr:GetTimelineByBandID(self.CurBandID)
    if Timeline == nil then
        return 
    end
    
    if Timeline:GetInteractStatus() >= ProtoCS.Game.TouringBand.BandInteractStatus.Wait then
        return 
    end
    
    local BandCfg = TouringBandCfg:FindCfgByKey(self.CurBandID)
    if BandCfg == nil then
        return
    end
    
    if BandCfg.AppearanceIDs ~= nil then
        if nil ~= EquipmentVM.ItemList then
            for _, Item in pairs(EquipmentVM.ItemList) do
                if self:TouringBandConditionMet(ProtoCS.Game.TouringBand.ReportType.Equip, Item.ResID) then
                    break
                end
            end
        end
    end
end

function TouringBandMgr:OnWardrobeClothingUpdate(Params)
    if Params == nil then
        return
    end

    if Params.AppID == nil and Params.Part == nil then
        return
    end

    if not self:IsTouringBandUnLock() then
        return
    end

    if self.CurBandID <= 0 then
        return false
    end

    if not self.IsAreaEnter then
        return
    end

    local Timeline = BandTimelineMgr:GetTimelineByBandID(self.CurBandID)
    if Timeline == nil then
        return
    end

    if Timeline:GetInteractStatus() >= ProtoCS.Game.TouringBand.BandInteractStatus.Wait then
        return
    end
    
    local AppID = Params.AppID
    self:TouringBandConditionMet(ProtoCS.Game.TouringBand.ReportType.Appearance, AppID)
end

function TouringBandMgr:OnCompanionCallingOutUpdate(Params)
    if Params == nil then
        return
    end

    if Params.ID == nil then
        return
    end

    if not self:IsTouringBandUnLock() then
        return
    end

    if self.CurBandID <= 0 then
        return false
    end

    if not self.IsAreaEnter then
        return
    end

    local Timeline = BandTimelineMgr:GetTimelineByBandID(self.CurBandID)
    if Timeline == nil then
        return
    end

    if Timeline:GetInteractStatus() >= ProtoCS.Game.TouringBand.BandInteractStatus.Wait then
        return
    end

    self:TouringBandConditionMet(ProtoCS.Game.TouringBand.ReportType.Companion, Params.ID)
end

---TouringBandConditionMet
---@param InReportType number ProtoCS.Game.TouringBand.ReportType
---@param InReportID number
---@return boolean
function TouringBandMgr:TouringBandConditionMet(InReportType, InReportID)
    if self:IsTouringBandUnLock() == false then
        return false
    end

    local Timeline = BandTimelineMgr:GetCurEffectiveRangeTimeline()
    if Timeline == nil then
        return false
    end

    if Timeline:GetInteractStatus() >= ProtoCS.Game.TouringBand.BandInteractStatus.Wait then
        return false
    end

    local TimelineID = Timeline.TimelineID
    local Cfg = TouringBandTimelineCfg:FindCfgByKey(TimelineID)
    if Cfg == nil then
        return false
    end

    local BandID = Cfg.BandID
    local BandIDCfg = TouringBandCfg:FindCfgByKey(BandID)
    if BandIDCfg == nil then
        return false
    end

    if InReportType == ProtoCS.Game.TouringBand.ReportType.Companion then
        if InReportID ~= BandIDCfg.PetID then
            return false
        end
    elseif InReportType == ProtoCS.Game.TouringBand.ReportType.Emotion then
        if InReportID ~= BandIDCfg.EmotionID then
            return false
        end
    elseif InReportType == ProtoCS.Game.TouringBand.ReportType.Equip then
        local BandIDs = (BandIDCfg or {}).AppearanceIDs
        if not BandIDs or #BandIDs == 0 then
            return false
        end

        local ECfg = EquipmentCfg:FindCfgByKey(InReportID)
        local TargetID = (ECfg or {}).AppearanceID
        if type(TargetID) ~= "number" then
            return false
        end

        local AllowedLookup = {}
        for _, id in ipairs(BandIDs) do
            AllowedLookup[id] = true
        end

        if not AllowedLookup[TargetID] then
            return false
        end
    elseif InReportType == ProtoCS.Game.TouringBand.ReportType.Appearance then
        local BandIDs = (BandIDCfg or {}).AppearanceIDs
        if not BandIDs or #BandIDs == 0 then
            return false
        end
        
        local EquipID = InReportID
        local  ClosetData = ClosetCfg:FindCfgByKey(InReportID)
        if ClosetData ~= nil then
            EquipID = ClosetData.EquipID
        end

        local ECfg = EquipmentCfg:FindCfgByKey(EquipID)
        local TargetID = (ECfg or {}).AppearanceID
        if type(TargetID) ~= "number" then
            return false
        end

        local AllowedLookup = {}
        for _, id in ipairs(BandIDs) do
            AllowedLookup[id] = true
        end

        if not AllowedLookup[TargetID] then
            return false
        end
    end

    self:BandInteractReportReq(BandID, InReportType, InReportID)
    return true
end

function TouringBandMgr:OnTouringBandAreaEnter(Params)
    if self:IsTouringBandUnLock() == false then
        return
    end

    local TimelineID = Params.TimelineID
    local IsAreaEnter = Params.IsAreaEnter

    local TimelineCfg = TouringBandTimelineCfg:FindCfgByKey(TimelineID)
    if TimelineCfg == nil then
        TouringBandUtil.Err("ERROR TouringBandMgr.OnTouringBandAreaEnter TimelineCfg == nil, ID : " .. TimelineID)
        return
    end

    self.IsAreaEnter = IsAreaEnter
    if IsAreaEnter then
        self:RegisterGameEvent(EventID.EnterInteractive, self.OnTouringBandEnterInteractive)
        self:RegisterGameEvent(EventID.ExitInteractive, self.OnTouringBandExitInteractive)
        self:RegisterGameEvent(EventID.NetStateUpdate, self.OnTouringBandNetStateUpdate)
        self:RegisterGameEvent(EventID.MajorSingBarBegin, self.OnMajorSingBarBegin)
        self:RegisterGameEvent(EventID.MajorSingBarOver, self.OnMajorSingBarOver)
        self:RegisterGameEvent(EventID.MajorDead, 	self.OnGameEventMajorDead)
        self:RegisterGameEvent(EventID.ActorReviveNotify,	self.OnGameEventActorRevive)
        self:RegisterGameEvent(EventID.MainPanelShowBuffTips,	self.OnMainPanelShowBuffTips)
        self:RegisterGameEvent(EventID.SkillChantViewShow, self.OnSkillChantViewShow)
        self:RegisterGameEvent(EventID.SkillChantViewHide, self.OnSkillChantViewHide)
        self:RegisterGameEvent(EventID.EquipUpdate, self.OnEquipUpdate)
        self:RegisterGameEvent(EventID.WardrobeClothingUpdate, self.OnWardrobeClothingUpdate)
        self:RegisterGameEvent(EventID.CompanionCallingOutUpdate, self.OnCompanionCallingOutUpdate)

        ---遇到巡回乐园了进行新手引导提示
        local EventParams = _G.EventMgr:GetEventParams()
        EventParams.Type = TutorialDefine.TutorialConditionType.NearTargetField --新手引导触发类型
        EventParams.Param1 = TutorialDefine.NearTargetFieldType.Touring
        _G.NewTutorialMgr:OnCheckTutorialStartCondition(EventParams)
    else
        self:UnRegisterGameEvent(EventID.EnterInteractive, self.OnTouringBandEnterInteractive)
        self:UnRegisterGameEvent(EventID.ExitInteractive, self.OnTouringBandExitInteractive)
        self:UnRegisterGameEvent(EventID.NetStateUpdate, self.OnTouringBandNetStateUpdate)
        self:UnRegisterGameEvent(EventID.MajorSingBarBegin, self.OnMajorSingBarBegin)
        self:UnRegisterGameEvent(EventID.MajorSingBarOver, self.OnMajorSingBarOver)
        self:UnRegisterGameEvent(EventID.MajorDead, 	self.OnGameEventMajorDead)
        self:UnRegisterGameEvent(EventID.ActorReviveNotify,	self.OnGameEventActorRevive)
        self:UnRegisterGameEvent(EventID.MainPanelShowBuffTips,	self.OnMainPanelShowBuffTips)
        self:UnRegisterGameEvent(EventID.SkillChantViewShow, self.OnSkillChantViewShow)
        self:UnRegisterGameEvent(EventID.SkillChantViewHide, self.OnSkillChantViewHide)
        self:UnRegisterGameEvent(EventID.EquipUpdate, self.OnEquipUpdate)
        self:UnRegisterGameEvent(EventID.WardrobeClothingUpdate, self.OnWardrobeClothingUpdate)
        self:UnRegisterGameEvent(EventID.CompanionCallingOutUpdate, self.OnCompanionCallingOutUpdate)
        
        --EventMgr:SendEvent(EventID.TouringBandMajorHudChanged, { IsVisible = self.IsAreaEnter })
        local ReportParams = { BandListen = { IsListening = false, IsFans = false }}
        _G.ClientReportMgr:SendClientReport(ProtoCS.ReportType.ReportTypeBandListen, ReportParams)
        UIViewMgr:HideView(UIViewID.TouringBandSupportPanelView)
        
        -- Tglog 5 聆听时长
        local TgLogTime = math.max(0, TimeUtil.GetServerLogicTime() - (self.TgLogListenTime or 0))
        self.TgLogListenTime = 0
        DataReportUtil.ReportTouringBandFlowData("5", PWorldMgr:GetCurrMapResID(), TimelineCfg.BandID, tostring(TgLogTime))
        return
    end

    self.TgLogListenTime = TimeUtil.GetServerLogicTime()
    self.CurBandID = TimelineCfg.BandID
    self:CancelReqTimer()

    local BandCfg = TouringBandCfg:FindCfgByKey(self.CurBandID)
    if BandCfg == nil then
        TouringBandUtil.Err("ERROR TouringBandMgr.OnTouringBandAreaEnter BandCfg == nil, ID : " .. self.CurBandID)
        return
    end

    local BandMapData = self:GetBandMapDataByID(self.CurBandID)
    if BandMapData == nil then
        TouringBandUtil.Err("ERROR TouringBandMgr.OnTouringBandAreaEnter BandMapData == nil, CurBandID : " .. self.CurBandID)
        return
    end

    local HintText = ""
    if not BandMapData.IsUnlock then
        self:BandCollectedUnlockReq(self.CurBandID)
        HintText = _G.LSTR(450028)  --首次相遇
        -- Tglog 1 参与巡回乐团玩法
        DataReportUtil.ReportTouringBandFlowData("1", PWorldMgr:GetCurrMapResID(), self.CurBandID)
    end
    MsgTipsUtil.ShowInfoTextTips(1, BandCfg.BandName or "", HintText, 2)

    local Status = BandMapData.Status
    local IsMet = false
    if Status == ProtoCS.Game.TouringBand.BandInteractStatus.UnFinish then
        local PetID = BandCfg.PetID
        if PetID > 0 then
            local CompanionID = _G.CompanionMgr:GetCallingOutCompanion()
            IsMet = self:TouringBandConditionMet(ProtoCS.Game.TouringBand.ReportType.Companion, CompanionID)
        end

        if not IsMet and BandCfg.AppearanceIDs ~= nil then
            if nil ~= EquipmentVM.ItemList then
                for _, Item in pairs(EquipmentVM.ItemList) do
                    IsMet = self:TouringBandConditionMet(ProtoCS.Game.TouringBand.ReportType.Equip, Item.ResID)
                    if IsMet then
                        break
                    end
                end
            end

            if not IsMet then
                local Suits = _G.WardrobeMgr:GetCurAppearanceList()
                for _, Value in pairs(Suits) do
                    IsMet = self:TouringBandConditionMet(ProtoCS.Game.TouringBand.ReportType.Appearance, Value.Avatar)
                    if IsMet then
                        break
                    end
                end
            end
        end
    end

    if not IsMet then
        local EntityID = 0
        local Timeline = BandTimelineMgr:GetTimelineByID(TimelineID)
        if Timeline ~= nil then
            EntityID = Timeline:GetManagerEntityID()
        end
        if EntityID > 0 then
            local IsShow = Status == ProtoCS.Game.TouringBand.BandInteractStatus.Wait
            local IconPath = IsShow and TouringBandDefine.BAND_MANAGER_HUD_ICON or ""
            _G.EventMgr:SendEvent(EventID.TouringBandTargetMarkIconChanged, { EntityID = EntityID, IconPath = IconPath })
        end
    end

    local IsPerformState = BandTimelineMgr:GetTimelineState(TimelineID, TouringBandDefine.STATES_TYPE.PERFORMING)
    --EventMgr:SendEvent(EventID.TouringBandMajorHudChanged, { IsVisible = IsPerformState })
    local IsFans = self:IsBandFansByID(self.CurBandID)
    local ReportParams = { BandListen = { IsListening = IsPerformState, IsFans = IsFans }}
    _G.ClientReportMgr:SendClientReport(ProtoCS.ReportType.ReportTypeBandListen, ReportParams)

    self:SetMostRecentBandID(SaveKey.TouringBandMostRecentBandID, self.CurBandID)
    
    -- 显示UI
    local ActionBtnVM = self:GetTouringBandActionBtnVM()
    ActionBtnVM:UpdateBandID(self.CurBandID)
    ActionBtnVM:UpdateBandNum(BandMapData.Num)
    ActionBtnVM.IsVisible = self:CheckActionBtnCanVisible()
    UIViewMgr:ShowView(UIViewID.TouringBandSupportPanelView)
end

function TouringBandMgr:OnTouringBandStatesNotify(Params)
    local TimelineID = Params.TimelineID
    local Key = Params.Key
    local Value = Params.Value

    if Key == TouringBandDefine.STATES_TYPE.PERFORMING then
        local Timeline = BandTimelineMgr:GetTimelineByBandID(self.CurBandID)
        if Timeline then
            if Timeline.TimelineID == TimelineID then
                if self.IsAreaEnter then
                    --EventMgr:SendEvent(EventID.TouringBandMajorHudChanged, { IsVisible = Value })
                    local bFans = self:IsBandFansByID(self.CurBandID)
                    local ReportParams = { BandListen = { IsListening = Value, IsFans = bFans }}
                    _G.ClientReportMgr:SendClientReport(ProtoCS.ReportType.ReportTypeBandListen, ReportParams)
                else
                    --EventMgr:SendEvent(EventID.TouringBandMajorHudChanged, { IsVisible = false })
                    local ReportParams = { BandListen = { IsListening = false, IsFans = false }}
                    _G.ClientReportMgr:SendClientReport(ProtoCS.ReportType.ReportTypeBandListen, ReportParams)
                end
            end
        end
    elseif Key == TouringBandDefine.STATES_TYPE.MOVE_IN_END or Key == TouringBandDefine.STATES_TYPE.MOVE_OUT_READY then
        local ActionBtnVM = self:GetTouringBandActionBtnVM()
        ActionBtnVM.IsVisible = self:CheckActionBtnCanVisible()
    elseif Key == TouringBandDefine.STATES_TYPE.CREATE then
        if Value then
            local MajorActor = MajorUtil.GetMajor()
            local CompanionActor = MajorActor:GetCompanionComponent():GetCompanion()
            if CompanionActor then
                CompanionActor:AdjustGround(false)
            end
        end
    end
end

function TouringBandMgr:OnTouringBandForceExitInteractive()
    if self.IsEnterInteractive then
        _G.NpcDialogMgr:EndInteraction()
        _G.InteractiveMgr:SetFunctionListShowState(false)
    end
end

function TouringBandMgr:OnTouringBandRefreshCherringBtnVisible()
    local Timeline = BandTimelineMgr:GetTimelineByBandID(self.CurBandID)
    if Timeline == nil then
        return
    end
    
    local ActionBtnVM = self:GetTouringBandActionBtnVM()
    ActionBtnVM.IsVisible = self:CheckActionBtnCanVisible()
end

---CheckIsTouringBandNPCByResID
---@param InNpcResID number
---@return boolean
function TouringBandMgr:CheckIsTouringBandNPCByResID(InNpcResID)
    if self:IsTouringBandUnLock() == false then
        return false
    end

    if self.CurBandID <= 0 then
        return false
    end

    local Cfg = TouringBandCfg:FindCfgByKey(self.CurBandID)
    if Cfg == nil then
        return false
    end

    return Cfg.MangerNpcID == InNpcResID
end

---GetTouringBandNPCDialogID
---@param InNpcResID number
---@return number
function TouringBandMgr:GetTouringBandNPCDialogID(InNpcResID)
    local Ret = 0
    if self.CurBandID <= 0 then
        return Ret
    end

    local Cfg = TouringBandCfg:FindCfgByKey(self.CurBandID)
    if Cfg == nil then
        return Ret
    end

    if Cfg.MangerNpcID == InNpcResID then
        local MapData = self:GetBandMapDataByID(self.CurBandID)
        if MapData ~= nil then
            if MapData.Status == ProtoCS.Game.TouringBand.BandInteractStatus.Wait then
                return Cfg.DefaultDialogID
            end
        end
    end

    return Ret
end

---CheckIsTouringBandNPC
---@param InEntityID number
---@return boolean
function TouringBandMgr:CheckIsTouringBandNPC(InEntityID)
    if self:IsTouringBandUnLock() == false then
        return false
    end

    local Timeline = BandTimelineMgr:GetCurEffectiveRangeTimeline()
    if Timeline == nil then
        return false
    end

    local EntityID = Timeline:GetManagerEntityID()
    return EntityID == InEntityID
end

---CheckTouringBandNPCCanInteract
---@param InEntityID number
---@return boolean
function TouringBandMgr:CheckTouringBandNPCCanInteract(InEntityID)
    local Timeline = BandTimelineMgr:GetCurEffectiveRangeTimeline()
    if Timeline == nil then
        return false
    end

    local EntityID = Timeline:GetManagerEntityID()
    if EntityID ~= InEntityID then
        return false
    end

    local IsMoveInEnd = BandTimelineMgr:GetTimelineState(Timeline.TimelineID, TouringBandDefine.STATES_TYPE.MOVE_IN_END)
    local IsMoveOut = BandTimelineMgr:GetTimelineState(Timeline.TimelineID, TouringBandDefine.STATES_TYPE.MOVE_OUT_READY)

    return IsMoveInEnd and not IsMoveOut
end

function TouringBandMgr:OnTouringBandEnterInteractive(EntranceItem)
    if EntranceItem == nil then
        return
    end

    local EntityID = EntranceItem.EntityID
    if self:CheckIsTouringBandNPC(EntityID) == false then
        return
    end

    self.IsEnterInteractive = true
end

function TouringBandMgr:OnTouringBandExitInteractive()
    if not self.IsEnterInteractive then
        return
    end

    self.IsEnterInteractive = false
    local BandMapData = self:GetBandMapDataByID(self.CurBandID)
    if BandMapData == nil then
        return
    end

    if BandMapData.Status ~= ProtoCS.Game.TouringBand.BandInteractStatus.Wait then
        return
    end

    self:BandInteractFinishReq(self.CurBandID)
end

function TouringBandMgr:CheckActionBtnCanVisible()
    local StateComp = MajorUtil.GetMajorStateComponent()
    if StateComp ~= nil then
        if StateComp:IsInNetState(ProtoCommon.CommStatID.COMM_STAT_DEAD) or
                StateComp:IsInNetState(ProtoCommon.CommStatID.COMM_STAT_COMBAT) or
                StateComp:IsInNetState(ProtoCommon.CommStatID.COMM_STAT_SPELL) then
            return false
        end
    end

    if (_G.TutorialGuideMgr:GetGuideQueue() or {})[1] == 59 then
        return false
    end

    local Timeline = BandTimelineMgr:GetTimelineByBandID(self.CurBandID)
    if not Timeline then
        return false
    end

    local IsMoveInEnd = BandTimelineMgr:GetTimelineState(Timeline.TimelineID, TouringBandDefine.STATES_TYPE.MOVE_IN_END)
    if not IsMoveInEnd then
        return false
    end

    local IsMoveOut = BandTimelineMgr:GetTimelineState(Timeline.TimelineID, TouringBandDefine.STATES_TYPE.MOVE_OUT_READY)
    if IsMoveOut then
        return false
    end
    
    return true
end

function TouringBandMgr:OnTouringBandNetStateUpdate(Params)
    local EntityID = Params.ULongParam1
    if not MajorUtil.IsMajor(EntityID) then
        return
    end

    local HiddenStates = {
        [ProtoCommon.CommStatID.COMM_STAT_DEAD] = true,
        [ProtoCommon.CommStatID.COMM_STAT_COMBAT] = true,
        [ProtoCommon.CommStatID.COMM_STAT_SPELL] = true
    }

    local StateType = Params.IntParam1
    local ActionBtnVM = self:GetTouringBandActionBtnVM()
    if HiddenStates[StateType] and Params.BoolParam1 then
        ActionBtnVM.IsVisible = false
    else
        ActionBtnVM.IsVisible = self:CheckActionBtnCanVisible()
    end
end

function TouringBandMgr:OnMajorSingBarBegin(EntityID, SingStateID)
    if not MajorUtil.IsMajor(EntityID) then
        return
    end

    local ActionBtnVM = self:GetTouringBandActionBtnVM()
    ActionBtnVM.IsVisible = false
end

function TouringBandMgr:OnMajorSingBarOver(EntityID, IsBreak)
    if not MajorUtil.IsMajor(EntityID) then
        return
    end

    local ActionBtnVM = self:GetTouringBandActionBtnVM()
    ActionBtnVM.IsVisible = self:CheckActionBtnCanVisible()
end

function TouringBandMgr:OnSkillChantViewShow()
    local ActionBtnVM = self:GetTouringBandActionBtnVM()
    ActionBtnVM.IsVisible = false
end

function TouringBandMgr:OnSkillChantViewHide()
    local ActionBtnVM = self:GetTouringBandActionBtnVM()
    ActionBtnVM.IsVisible = self:CheckActionBtnCanVisible()
end

function TouringBandMgr:OnGameEventMajorDead()
    local ActionBtnVM = self:GetTouringBandActionBtnVM()
    ActionBtnVM.IsVisible = false
end

function TouringBandMgr:OnGameEventActorRevive(Params)
    local EntityID = Params.ULongParam1
    if not MajorUtil.IsMajor(EntityID) then
        return
    end
    
    -- 死亡復活的時候會銷毀UI，不走通用处理方法，在这里特殊处理
    if not self.IsAreaEnter then
        return
    end

    local Timeline = BandTimelineMgr:GetTimelineByBandID(self.CurBandID)
    if Timeline == nil then
        return
    end
    
    if not UIViewMgr:IsViewVisible(UIViewID.TouringBandSupportPanelView) then
        UIViewMgr:ShowView(UIViewID.TouringBandSupportPanelView)
    end
    
    local ActionBtnVM = self:GetTouringBandActionBtnVM()
    ActionBtnVM.IsVisible = self:CheckActionBtnCanVisible()
end

function TouringBandMgr:OnMainPanelShowBuffTips(Params)
    local IsShowTips = Params
    local ActionBtnVM = self:GetTouringBandActionBtnVM()
    if IsShowTips then
        ActionBtnVM.IsVisible = false
    else
        ActionBtnVM.IsVisible = self:CheckActionBtnCanVisible()
    end
end

---GetTimelineInteractStatus
---@param InTimelineID number
---@return number
function TouringBandMgr:GetTimelineInteractStatus(InTimelineID)
    for __, Item in ipairs(self.BandMapData) do
        local Band = Item.Band
        if Band.TimelineID == InTimelineID then
            return Item.Status or ProtoCS.Game.TouringBand.BandInteractStatus.UnFinish
        end
    end
    return ProtoCS.Game.TouringBand.BandInteractStatus.UnFinish
end

---GetCurUnlockBandNum
---@return number 
---@return number
function TouringBandMgr:GetCurUnlockBandNum()
    local Num = #self.TouringBandData
    local AllBandData = TouringBandMgr:GetAllBandData()
    return Num, #AllBandData
end

---GetCurFansBandNum
---@return number
---@return number
function TouringBandMgr:GetCurFansBandNum()
    local NumWithFans = 0
    local AllBandData = TouringBandMgr:GetAllBandData()

    for _, BandData in pairs(self.TouringBandData) do
        if BandData.InteractRecords ~= nil then
            local RecordCount = 0
            for _ in pairs(BandData.InteractRecords) do
                RecordCount = RecordCount + 1
            end

            if RecordCount > 0 then
                NumWithFans = NumWithFans + 1
            end
        end

    end

    return NumWithFans, #AllBandData
end


function TouringBandMgr:GetTouringBandActionBtnVM()
    if self.TouringBandActionBtnVM == nil then
        self.TouringBandActionBtnVM = TouringBandActionBtnVM.New()
    end
    
    return self.TouringBandActionBtnVM
end

function TouringBandMgr:GetTouringBandSupportWinVM()
    if self.TouringBandSupportWinVM == nil then
        self.TouringBandSupportWinVM = TouringBandSupportWinVM.New()
    end
    
    return self.TouringBandSupportWinVM
end

function TouringBandMgr:GetCheeringMaxNum()
    if self.CheeringMaxNum ~= nil then
        return self.CheeringMaxNum
    end
    
    local TableData = GameGlobalCfg:FindValue(ProtoRes.Game.game_global_cfg_id.GAME_CFG_BAND_CHEERING_DEMAND_COUNT, "Value")
    if not TableData then
        return 0
    end

    self.CheeringMaxNum = TableData[1] or 0
    
    return  self.CheeringMaxNum
end

function TouringBandMgr:OnPlayAction(EmotionID)
    if EmotionID == nil then
        return
    end
    local BandMapData = self:GetBandMapDataByID(self.CurBandID)
    if BandMapData == nil then
        TouringBandUtil.Err("ERROR TouringBandMgr.OnPlayAction BandMapData == nil, CurBandID : " .. self.CurBandID)
        return false
    end

    local ServerTime = TimeUtil.GetServerLogicTime()
    local LastTime = (BandMapData.LastClickTime or 0) / 1000
    local Cd = self:GetEmotionCD()
    local TimeSinceLastClick = ServerTime - LastTime

    if TimeSinceLastClick >= Cd then
        local ClickNum = BandMapData.Num + 1
        BandMapData.Num = ClickNum
        BandMapData.LastClickTime = TimeUtil.GetServerLogicTime()

        local ActionBtnVM = self:GetTouringBandActionBtnVM()
        ActionBtnVM:UpdateBandNum(ClickNum)
        ActionBtnVM:UpdateSkillCD(TimeUtil.GetServerLogicTimeMS())

        self:BandClickEmotionReq(self.CurBandID, EmotionID)
        return true
    else
        TouringBandUtil.Err("Error TouringBandMgr.PlayAtl: Failed, in CD period, remaining time: " .. TimeSinceLastClick)
    end
    return false
end

function TouringBandMgr:SetMostRecentBandID(Key, Value)
    USaveMgr.SetInt(Key, Value, true)
end

function TouringBandMgr:GetMostRecentBandID()
    local MostRecentBandID = USaveMgr.GetInt(SaveKey.TouringBandFansBandID, 0, true)
    if MostRecentBandID == 0 then
        MostRecentBandID = USaveMgr.GetInt(SaveKey.TouringBandMostRecentBandID, 0, true)
    end
    return MostRecentBandID
end

function TouringBandMgr:GetCustomizeRedDotList()
    return self.CustomizeRedDotList or {}
end

function TouringBandMgr:AddCustomizeRedDotName(RedDotName)
    for _, NodeName in pairs(self.CustomizeRedDotList) do
        if RedDotName == NodeName then
            return
        end
    end

    table.insert(self.CustomizeRedDotList, RedDotName)
    self:WriteSaveKeyData()
end

function TouringBandMgr:ReadSaveKeyData()
    local HideRedDotStr = USaveMgr.GetString(SaveKey.TouringBandStoryRedDot, "", true)
    self.CustomizeRedDotList = string.split(HideRedDotStr, ",")
end

function TouringBandMgr:WriteSaveKeyData()
    local HideRedDotStr = ""
    for Index, HideNodeName in pairs(self.CustomizeRedDotList) do
        if Index == 1 then
            HideRedDotStr = HideNodeName
        else
            HideRedDotStr = string.format("%s,%s", HideRedDotStr, HideNodeName)
        end
    end
    USaveMgr.SetString(SaveKey.TouringBandStoryRedDot, HideRedDotStr, true)
end

function TouringBandMgr:PlaySharedGroup(ID)
    local Timeline = BandTimelineMgr:GetTimelineByBandID(self.CurBandID)
    if Timeline ~= nil then
        local EntityID = Timeline:GetEntityIDByIndex(ProtoRes.TOURING_BAND_TIMELINE_EVENT_TARGET_TYPE.TB_TARGET_EOBJ)
        local EobjActor = ActorUtil.GetActorByEntityID(EntityID)
        if EobjActor then
            EobjActor:SetSharedGroupTimelineState(ID)
        end
    end
end

function TouringBandMgr:IsCurTouringBandValid()
    if not self:IsTouringBandUnLock() then
        return false
    end

    if self.CurBandID <= 0 then
        return false
    end

    local Timeline = BandTimelineMgr:GetTimelineByBandID(self.CurBandID)
    if Timeline == nil then
        return false
    end

    if not self.IsAreaEnter then
        return false
    end
    
    return true
end

--- 判断相遇乐团是否已满
---@return boolean
function TouringBandMgr:IsMeetBandFull()
    local CurrentMeet, TotalMeet = self:GetCurUnlockBandNum()
    return CurrentMeet >= TotalMeet
end

--- 获取当前相遇数量
---@return number
function TouringBandMgr:GetCurrentMeetCount()
    local CurrentMeet, _ = self:GetCurUnlockBandNum()
    return CurrentMeet
end

--- 获取可以相遇的总数量
---@return number
function TouringBandMgr:GetTotalMeetableCount()
    local _, TotalMeet = self:GetCurUnlockBandNum()
    return TotalMeet
end

--- 获取已經成为粉丝的数量
---@return number
function TouringBandMgr:GetAvailableFansCount()
    local CurrentFans, TotalFans = self:GetCurFansBandNum()
    return CurrentFans
end

--- 获取可以为粉丝的总数量
---@return number
function TouringBandMgr:GetTotalFansCount()
    local CurrentFans, TotalFans = self:GetCurFansBandNum()
    return TotalFans
end

-- 静音函数
function TouringBandMgr:EnterTouringBandSilentMode()
    if not self:IsCurTouringBandValid() then
        return
    end
    
    local Timeline = BandTimelineMgr:GetCurEffectiveRangeTimeline()
    if Timeline ~= nil then
        self.SilentModeEntityID = Timeline:GetBandEobjEntityID()
        local Actor = ActorUtil.GetActorByEntityID(self.SilentModeEntityID)
        if Actor then
            _G.UE.UAkGameplayStatics.SetOutputBusVolume(0, Actor)
        end
    end
end

-- 恢复函数
function TouringBandMgr:ExitTouringBandSilentMode()
    if not self:IsCurTouringBandValid() then
        return
    end

    if self.SilentModeEntityID ~= nil then
        local Actor = ActorUtil.GetActorByEntityID(self.SilentModeEntityID)
        _G.UE.UAkGameplayStatics.SetOutputBusVolume(1, Actor)
        self.SilentModeEntityID = nil
    end
end

---查询当前是否在聆听状态中
---@return boolean
function TouringBandMgr:IsListeningStatus()
    if not self:IsCurTouringBandValid() then
        return false
    end

    local Timeline = BandTimelineMgr:GetTimelineByBandID(self.CurBandID)
    if Timeline == nil then
        return false
    end
    
    local IsPerformState = BandTimelineMgr:GetTimelineState(Timeline.TimelineID, TouringBandDefine.STATES_TYPE.PERFORMING)
    return IsPerformState
end

---查询当前区域的乐团是否是粉丝
---@return boolean
function TouringBandMgr:IsCurTouringBandFans()
    if not self:IsCurTouringBandValid() then
        return false
    end

    return self:IsBandFansByID(self.CurBandID)
end

-- 复制的情感动作接口
function TouringBandMgr:IsEmotionValidState()
    if MajorUtil.GetMajorCurHp() <= 0 then
        return
    end
    if MajorUtil.IsMajorCombat() then
        return
    end
    local Major = MajorUtil.GetMajor()
    if not Major then
        return
    end
    if Major:GetIsSequenceing() then
        return	--过场动画
    end
    --if Major:GetRideComponent():IsInRide() then
    --    return
    --end
    if Major:IsInFly() then
        return
    end
    local Velocity = Major.CharacterMovement.Velocity
    if Velocity:Size() > 0.01 then
        return
    end
    if PWorldMgr:GetCrystalPortalMgr():GetIsTransferring() then
        return	--传送中
    end
    if _G.FishMgr:IsInFishState() then
        return
    end
    if _G.SingBarMgr:GetMajorIsSinging() then
        return	--读条中
    end
    if _G.NpcDialogMgr:IsDialogPlaying() then
        return	--对话中
    end
    if _G.GatherMgr:IsGatherState() then
        return	--采集中
    end
    if _G.CrafterMgr:GetIsMaking() then
        return	--制作中
    end
    if _G.GoldSaucerMiniGameMgr:CheckIsInMiniGame() then
        return
    end
    return true
end

function TouringBandMgr:TestCreateTimeline(ID, Time)
    self.TestBeginTime = TimeUtil.GetServerLogicTime() - (Time or 0)
    BandTimelineMgr:CreateBandTimeline(ID or 1200301001, self.TestBeginTime)
end

function TouringBandMgr:DestroyBandTimeline(ID)
    BandTimelineMgr:DestroyBandTimeline(ID or 1200301001)
end

return TouringBandMgr