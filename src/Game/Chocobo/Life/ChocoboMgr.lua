---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2023/11/13 11:07
----
---
local LuaClass = require("Core/LuaClass")
local EventID = require("Define/EventID")
local EventMgr = require("Event/EventMgr")
local MgrBase = require("Common/MgrBase")
local ProtoCS = require("Protocol/ProtoCS")
local UIViewID = require("Define/UIViewID")
local UIViewMgr = require("UI/UIViewMgr")
local ProtoRes = require("Protocol/ProtoRes")
local ChocoboVMBase = require("Game/Chocobo/Life/VM/ChocoboVM")
local ChocoboDefine = require("Game/Chocobo/ChocoboDefine")
local ActorUtil = require("Utils/ActorUtil")
local ChocoboRaceSkillDisplayCfg = require("TableCfg/ChocoboRaceSkillDisplayCfg")
local ChocoboRaceSkillCfg = require("TableCfg/ChocoboRaceSkillCfg")
local ChocoboNameCfg = require("TableCfg/ChocoboNameCfg")
local GlobalCfg = require("TableCfg/GlobalCfg")
local TeleportCrystalCfg = require("TableCfg/TeleportCrystalCfg")
local SaveKey = require("Define/SaveKey")
local MajorUtil = require("Utils/MajorUtil")
local ProtoCommon = require("Protocol/ProtoCommon")
local PWorldEntUtil = require("Game/PWorld/Entrance/PWorldEntUtil")
local NpcCfg = require("TableCfg/NpcCfg")
local TimeUtil = require("Utils/TimeUtil")
local SidebarDefine = require("Game/Sidebar/SidebarDefine")

local GameNetworkMgr = nil
local USaveMgr = nil
local MsgTipsUtil = nil
local EasyTraceMapMgr = nil
local ChocoboMainVM = nil
local LSTR = nil
local FLOG_ERROR = nil
local FLOG_INFO = nil
local SUB_MSG_ID = ProtoCS.ChocoboCmd
local CS_CMD_CHOCOBO = ProtoCS.CS_CMD.CS_CMD_CHOCOBO

---@class ChocoboMgr : MgrBase
local ChocoboMgr = LuaClass(MgrBase)

function ChocoboMgr:OnInit()
    self.MaxMemCnt = 8
    self.MatchTimerID = 0
    self.ChocoboAllInfoList = {} -- 自己所有陆行鸟数据
    self.ChocoboSkillList = {}  -- 自己所有技能数据
    self.RoleOutChocoboInfoList = {}   -- 查询的玩家出战陆行鸟数据
    self.RoleOutChocoboVMList = {}   -- 查询的玩家出战陆行鸟VM
    self.TitleCounter = {}
    self.TitleAwards = {}
    self.QueryMatchChocoboList = {}  -- 匹配的玩家ID，用于根据种族预创建动作，特效
    self.CustomizeRedDotList = {} -- 自定义红点
end

function ChocoboMgr:OnBegin()
    GameNetworkMgr = _G.GameNetworkMgr
    USaveMgr = _G.UE.USaveMgr
    MsgTipsUtil = _G.MsgTipsUtil
    EasyTraceMapMgr = _G.EasyTraceMapMgr
    LSTR = _G.LSTR
    ChocoboMainVM = _G.ChocoboMainVM
    FLOG_ERROR = _G.FLOG_ERROR
    FLOG_INFO = _G.FLOG_INFO
    
    local Value = nil
    Value = GlobalCfg:FindValue(ProtoRes.global_cfg_id.GlobalCfgChocoboGeneStarMax, "Value")
    self.GeneMaxStarNum = Value and tonumber(Value[1]) or 4
    Value = GlobalCfg:FindValue(ProtoRes.global_cfg_id.GlobalCfgChocoboActiveSkillLimit, "Value")
    self.CarryActiveSkillNum = Value and tonumber(Value[1]) or 3
    Value = GlobalCfg:FindValue(ProtoRes.global_cfg_id.GlobalCfgChocoboPassiveSkillLimit, "Value")
    self.CarryPassiveSkillNum = Value and tonumber(Value[1]) or 1

    Value = GlobalCfg:FindValue(ProtoRes.global_cfg_id.GlobalCfgChocoboMatingLevel, "Value")
    self.MatingLevel = Value and tonumber(Value[1]) or 2
    Value = GlobalCfg:FindValue(ProtoRes.global_cfg_id.GlobalCfgChocoboMatingTime, "Value")
    self.MatingNeedTime = Value and tonumber(Value[1]) or 10
    Value = GlobalCfg:FindValue(ProtoRes.global_cfg_id.GlobalCfgChocoboPerGenLimit, "Value")
    self.GenerationLimit = Value and tonumber(Value[1]) or 5
    Value = GlobalCfg:FindValue(ProtoRes.global_cfg_id.GlobalCfgChocoboRentLimit, "Value") or {}
    self.RentLimit = Value and tonumber(Value[1]) or 5
end

function ChocoboMgr:OnEnd()
end

function ChocoboMgr:OnShutdown()
    self.MaleChocoboID = nil
    self.FemaleChocoboID = nil
    self.ChocoboAllInfoList = {}
    self.ChocoboSkillList = {}
    self.RoleOutChocoboInfoList = {}
    self.RoleOutChocoboVMList = {}
    self.TitleCounter = {}
    self.TitleAwards = {}
    self.QueryMatchChocoboList = {}
    self.CustomizeRedDotList = {}
end

function ChocoboMgr:OnRegisterGameEvent()
    self:RegisterGameEvent(EventID.BuddyEquipmentUpdate, self.OnUpdateBuddyEquipmentUpdate)
    self:RegisterGameEvent(EventID.BuddyDyeUpdate, self.OnUpdateBuddyDyeUpdate)
    self:RegisterGameEvent(EventID.RoleLoginRes, self.OnGameEventLoginRes)
    self:RegisterGameEvent(EventID.SidebarItemTimeOut, self.OnGameEventSidebarItemTimeOut) --侧边栏Item超时
end

function ChocoboMgr:OnRegisterNetMsg()
    self:RegisterGameNetMsg(CS_CMD_CHOCOBO, SUB_MSG_ID.ChocoboCmdQueryMatchChocobo, self.OnNetMsgQueryMatchChocobo) -- 玩家 查询匹配的陆行鸟
    self:RegisterGameNetMsg(CS_CMD_CHOCOBO, SUB_MSG_ID.ChocoboCmdQuery, self.OnNetMsgQuery) -- 玩家 陆行鸟详细信息
    self:RegisterGameNetMsg(CS_CMD_CHOCOBO, SUB_MSG_ID.ChocoboCmdQuerySkillList, self.OnNetMsgQuerySkillList) --技能 玩家已解锁全量技能
    self:RegisterGameNetMsg(CS_CMD_CHOCOBO, SUB_MSG_ID.ChocoboCmdLearnSkill, self.OnNetMsgLearnSkill) --技能 玩家学会技能
    self:RegisterGameNetMsg(CS_CMD_CHOCOBO, SUB_MSG_ID.ChocoboCmdSkillOp, self.OnNetMsgSkillOp) --技能 替换/卸载
    self:RegisterGameNetMsg(CS_CMD_CHOCOBO, SUB_MSG_ID.ChocoboCmdMating, self.OnNetMsgMating) --配种 发起配种
    self:RegisterGameNetMsg(CS_CMD_CHOCOBO, SUB_MSG_ID.ChocoboCmdMatingReceive, self.OnNetMsgMatingReceive) --配种 子鸟领取
    self:RegisterGameNetMsg(CS_CMD_CHOCOBO, SUB_MSG_ID.ChocoboCmdRentInfo, self.OnNetMsgRentInfo)   --租借 租借信息
    self:RegisterGameNetMsg(CS_CMD_CHOCOBO, SUB_MSG_ID.ChocoboCmdRentRefresh, self.OnNetMsgRentRefresh) --租借 刷新鸟
    self:RegisterGameNetMsg(CS_CMD_CHOCOBO, SUB_MSG_ID.ChocoboCmdRent, self.OnNetMsgRent)   --租借 发起/不再租借
    self:RegisterGameNetMsg(CS_CMD_CHOCOBO, SUB_MSG_ID.ChocoboCmdLike, self.OnNetMsgLike)   --喜爱
    self:RegisterGameNetMsg(CS_CMD_CHOCOBO, SUB_MSG_ID.ChocoboCmdFree, self.OnNetMsgFree)   --放生
    self:RegisterGameNetMsg(CS_CMD_CHOCOBO, SUB_MSG_ID.ChocoboCmdRename, self.OnNetMsgRename)   --改名
    self:RegisterGameNetMsg(CS_CMD_CHOCOBO, SUB_MSG_ID.ChocoboCmdUpdateNotify, self.OnNetMsgUpdateNotify)   --属性等级变更通知
    self:RegisterGameNetMsg(CS_CMD_CHOCOBO, SUB_MSG_ID.ChocoboCmdOut, self.OnNetMsgOut)   --出战
    self:RegisterGameNetMsg(CS_CMD_CHOCOBO, SUB_MSG_ID.ChocoboCmdLevelUpNotify, self.OnNetMsgLevelUpNotify)   --等级变更通知
    self:RegisterGameNetMsg(CS_CMD_CHOCOBO, SUB_MSG_ID.ChocoboCmdQueryTitle, self.OnNetMsgQueryTitle)   --称号查询
    self:RegisterGameNetMsg(CS_CMD_CHOCOBO, SUB_MSG_ID.ChocoboCmdGetTitleAward, self.OnNetMsgGetTitleAward)   --领取称号奖励
    self:RegisterGameNetMsg(CS_CMD_CHOCOBO, SUB_MSG_ID.ChocoboCmdGetMissionAward, self.OnNetMsgGetMissionAward)   --领取任务奖励
    self:RegisterGameNetMsg(CS_CMD_CHOCOBO, SUB_MSG_ID.ChocoboCmdAdopt, self.OnNetMsgAdopt)   --领养
    self:RegisterGameNetMsg(CS_CMD_CHOCOBO, SUB_MSG_ID.ChocoboCmdGetNewbieChocobo, self.OnNetMsgGetNewbieChocobo)   --任务解锁
end

function ChocoboMgr:OnGameEventLoginRes()
    local ModuleID = ProtoCommon.ModuleID
    local IsChocoboOpen = _G.ModuleOpenMgr:CheckOpenState(ModuleID.ModuleIDChocobo)
    local IsChocoboArmorCollectOpen = _G.ModuleOpenMgr:CheckOpenState(ModuleID.ModuleIDChocoboArmorCollect)

    if IsChocoboOpen or IsChocoboArmorCollectOpen then
        self:ReqQuery()
        self:ReqQuerySkillList()
        self:ReqQueryTitle()
        self:ReadSaveKeyData()
    end

    if IsChocoboArmorCollectOpen then
        _G.BuddyMgr:SendBuddyQueryMessage()
        _G.ChocoboCodexArmorMgr:ChocoboGetSuitCollectedReq()
    end
end

--region 协议请求
--玩家 陆行鸟详细信息
function ChocoboMgr:ReqQueryMatchChocobo(List)
    if List == nil then return end
    self.QueryMatchChocoboList = List

    local Params = {}
    Params.MatchChocobo = {}
    Params.MatchChocobo.RoleIDs = List
    Params.Cmd = SUB_MSG_ID.ChocoboCmdQueryMatchChocobo
    GameNetworkMgr:SendMsg(CS_CMD_CHOCOBO, SUB_MSG_ID.ChocoboCmdQueryMatchChocobo, Params)
end

--玩家 陆行鸟详细信息
function ChocoboMgr:ReqQuery(ID, CallBack)
    local data = nil
    self.ReqQueryCallBack = CallBack
    if ID ~= nil then
        data = { ID }
    end

    local Params = {}
    Params.Query = {}
    Params.Query.ID = data
    Params.Cmd = SUB_MSG_ID.ChocoboCmdQuery
    GameNetworkMgr:SendMsg(CS_CMD_CHOCOBO, SUB_MSG_ID.ChocoboCmdQuery, Params)
end

function ChocoboMgr:ReqQuerySkillList()
    local Params = {}
    Params.QuerySkillList = {}
    Params.Cmd = SUB_MSG_ID.ChocoboCmdQuerySkillList
    GameNetworkMgr:SendMsg(CS_CMD_CHOCOBO, SUB_MSG_ID.ChocoboCmdQuerySkillList, Params)
end

function ChocoboMgr:ReqLearnSkill(SkillID)
    local Params = {}
    Params.LearnSkill = {}
    Params.LearnSkill.SkillID = SkillID
    Params.Cmd = SUB_MSG_ID.ChocoboCmdLearnSkill
    GameNetworkMgr:SendMsg(CS_CMD_CHOCOBO, SUB_MSG_ID.ChocoboCmdLearnSkill, Params)
end

function ChocoboMgr:ReqSkillOp(ID, SkillOp, Pos, SkillID)
    local Params = {}
    Params.SkillOp = {}
    Params.SkillOp.ID = ID
    Params.SkillOp.Op = SkillOp
    Params.SkillOp.Pos = Pos - 1
    Params.SkillOp.SkillID = SkillID
    Params.Cmd = SUB_MSG_ID.ChocoboCmdSkillOp
    GameNetworkMgr:SendMsg(CS_CMD_CHOCOBO, SUB_MSG_ID.ChocoboCmdSkillOp, Params)
end

function ChocoboMgr:ReqMating(Male, Female)
    self.MaleChocoboID = Male
    self.FemaleChocoboID = Female
    local Params = {}
    Params.Mating = {}
    Params.Mating.Male = Male
    Params.Mating.Female = Female
    Params.Cmd = SUB_MSG_ID.ChocoboCmdMating
    GameNetworkMgr:SendMsg(CS_CMD_CHOCOBO, SUB_MSG_ID.ChocoboCmdMating, Params)
end

function ChocoboMgr:ReqMatingReceive(MatingChocoboID, Name)
    local Params = {}
    Params.MatingReceive = {}
    Params.MatingReceive.ID = MatingChocoboID
    Params.MatingReceive.Name = Name
    Params.Cmd = SUB_MSG_ID.ChocoboCmdMatingReceive
    GameNetworkMgr:SendMsg(CS_CMD_CHOCOBO, SUB_MSG_ID.ChocoboCmdMatingReceive, Params)
end

function ChocoboMgr:RenameReq(Rename)
    local SubMsgID = SUB_MSG_ID.ChocoboCmdRename

    local MsgBody = {}
    MsgBody.Cmd = SubMsgID
    MsgBody.Rename = Rename
    GameNetworkMgr:SendMsg(CS_CMD_CHOCOBO, SubMsgID, MsgBody)
end

function ChocoboMgr:AdoptReq(Gender, Name)
    local Params = {}
    Params.AdoptReq = {}
    Params.AdoptReq.Gender = Gender
    Params.AdoptReq.Name = Name
    Params.Cmd = SUB_MSG_ID.ChocoboCmdAdopt
    GameNetworkMgr:SendMsg(CS_CMD_CHOCOBO, SUB_MSG_ID.ChocoboCmdAdopt, Params)
end

function ChocoboMgr:GetNewbieChocoboReq(Gender, Name)
    local Params = {}
    Params.GetNewbieChocobo = {}
    Params.GetNewbieChocobo.Gender = Gender
    Params.GetNewbieChocobo.Name = Name
    Params.Cmd = SUB_MSG_ID.ChocoboCmdGetNewbieChocobo
    GameNetworkMgr:SendMsg(CS_CMD_CHOCOBO, SUB_MSG_ID.ChocoboCmdGetNewbieChocobo, Params)
end

function ChocoboMgr:RentInfoReq(InGender, InGeneration)
    local SubMsgID = SUB_MSG_ID.ChocoboCmdRentInfo

    local MsgBody = {}
    MsgBody.Cmd = SubMsgID
    MsgBody.RentInfo = {}
    MsgBody.RentInfo.Gender = InGender
    MsgBody.RentInfo.Generation = InGeneration
    GameNetworkMgr:SendMsg(CS_CMD_CHOCOBO, SubMsgID, MsgBody)
end

function ChocoboMgr:RentRefreshReq(InGender, InGeneration)
    local SubMsgID = SUB_MSG_ID.ChocoboCmdRentRefresh

    local MsgBody = {}
    MsgBody.Cmd = SubMsgID
    MsgBody.RentRefresh = {}
    MsgBody.RentRefresh.Gender = InGender
    MsgBody.RentRefresh.Generation = InGeneration
    GameNetworkMgr:SendMsg(CS_CMD_CHOCOBO, SubMsgID, MsgBody)
end

function ChocoboMgr:ReqRent(Rent, ID, Gender, Generation)
    local Params = {}
    Params.Rent = {}
    Params.Rent.Rent = Rent
    Params.Rent.ID = ID
    Params.Rent.Gender = Gender
    Params.Rent.Generation = Generation
    Params.Cmd = SUB_MSG_ID.ChocoboCmdRent
    GameNetworkMgr:SendMsg(CS_CMD_CHOCOBO, SUB_MSG_ID.ChocoboCmdRent, Params)
end

function ChocoboMgr:ReqLike(ID, IsLike)
    local Params = {}
    Params.Like = {}
    Params.Like.ID = ID
    Params.Like.Like = IsLike; --=false取消喜欢
    Params.Cmd = SUB_MSG_ID.ChocoboCmdLike
    GameNetworkMgr:SendMsg(CS_CMD_CHOCOBO, SUB_MSG_ID.ChocoboCmdLike, Params)
end

function ChocoboMgr:ReqFree(ID)
    local Params = {}
    Params.Free = {}
    Params.Free.ID = ID
    Params.Cmd = SUB_MSG_ID.ChocoboCmdFree
    GameNetworkMgr:SendMsg(CS_CMD_CHOCOBO, SUB_MSG_ID.ChocoboCmdFree, Params)
end

function ChocoboMgr:ReqDyeColor(ID)
    --TODO:
    local Params = {}
    Params.DyeColor = {}
    Params.DyeColor.ID = ID
    Params.Cmd = SUB_MSG_ID.ChocoboCmdDyeColor
    GameNetworkMgr:SendMsg(CS_CMD_CHOCOBO, SUB_MSG_ID.ChocoboCmdDyeColor, Params)
end

function ChocoboMgr:ReqArmor(ID, Armor, Pos)
    local Params = {}
    Params.Armor = {}
    Params.Armor.ID = ID
    Params.Armor.Armor = Armor
    Params.Armor.Pos = Pos
    Params.Cmd = SUB_MSG_ID.ChocoboCmdArmor
    GameNetworkMgr:SendMsg(CS_CMD_CHOCOBO, SUB_MSG_ID.ChocoboCmdArmor, Params)
end

function ChocoboMgr:ReqOut(ID, Out)
    if _G.PWorldMatchMgr:IsMatching() then
        -- LSTR string: 匹配中禁止切换出战陆行鸟
        MsgTipsUtil.ShowTips(LSTR(420080))
        return
    end

    local Params = {}
    Params.Out = {}
    Params.Out.ID = ID
    Params.Out.Out = Out;
    Params.Cmd = SUB_MSG_ID.ChocoboCmdOut
    GameNetworkMgr:SendMsg(CS_CMD_CHOCOBO, SUB_MSG_ID.ChocoboCmdOut, Params)
end

-- 陆行鸟称号
function ChocoboMgr:ReqQueryTitle()
    local Params = {}
    Params.Title = {}
    Params.Cmd = SUB_MSG_ID.ChocoboCmdQueryTitle
    GameNetworkMgr:SendMsg(CS_CMD_CHOCOBO, SUB_MSG_ID.ChocoboCmdQueryTitle, Params)
end

function ChocoboMgr:ReqGetTitleAward(Title)
    local Params = {}
    Params.TitleAward = {}
    Params.TitleAward.Title = Title
    Params.Cmd = SUB_MSG_ID.ChocoboCmdGetTitleAward
    GameNetworkMgr:SendMsg(CS_CMD_CHOCOBO, SUB_MSG_ID.ChocoboCmdGetTitleAward, Params)
end

function ChocoboMgr:ReqGetMissionAward(Title, Mission)
    local Params = {}
    Params.MissionAward = {}
    Params.MissionAward.Title = Title
    Params.MissionAward.Mission = Mission
    Params.Cmd = SUB_MSG_ID.ChocoboCmdGetMissionAward
    GameNetworkMgr:SendMsg(CS_CMD_CHOCOBO, SUB_MSG_ID.ChocoboCmdGetMissionAward, Params)
end
--endregion

--region 协议回包
function ChocoboMgr:OnNetMsgQueryMatchChocobo(MsgBody)
    if nil == MsgBody then
        FLOG_ERROR("ChocoboMgr:OnNetMsgQueryMatchChocobo: MsgBody is nil")
        return
    end
    --FLOG_INFO("ChocoboMgr.OnNetMsgQueryMatchChocobo: " .. _G.table_to_string_block(MsgBody, 10))

    local MatchChocobo = MsgBody.MatchChocobo
    if nil == MatchChocobo then
        return
    end

    self.RoleOutChocoboInfoList = MatchChocobo.Outing
    for RoleID, Info in pairs(self.RoleOutChocoboInfoList) do
        if RoleID == MajorUtil.GetMajorRoleID() then
            local ViewModel = ChocoboMainVM:FindChocoboVM(ChocoboMainVM.CurRaceEntryID)
            if ViewModel ~= nil then
                if ViewModel.ChocoboID ~= Info.ID then
                    FLOG_ERROR("ERROR: ChocoboMgr.OnNetMsgQueryMatchChocobo UpdateVM False ID = " .. Info.ID)
                end
                ViewModel:UpdateVM(Info)
            end
        else
            local ViewModel = self.RoleOutChocoboVMList[RoleID]
            if ViewModel ~= nil then
                ViewModel:UpdateVM(Info)
            end
        end
    end
end

--玩家 陆行鸟详细信息
function ChocoboMgr:OnNetMsgQuery(MsgBody)
    if nil == MsgBody then
        FLOG_ERROR("ChocoboMgr:OnNetMsgQuery: MsgBody is nil")
        return
    end
    --FLOG_INFO("ChocoboMgr.OnNetMsgQuery: " .. _G.table_to_string_block(MsgBody, 10))

    local Query = MsgBody.Query
    if nil == Query then
        return
    end

    for __, Value in pairs(Query.Infos) do
        self.ChocoboAllInfoList[Value.ID] = Value

        _G.BuddyMgr:SetChocoboArmor(Value.ID, Value.Armor)
        _G.BuddyMgr:SetChocoboColor(Value.ID, Value.Color)
    end

    for __, Value in pairs(Query.Infos) do
        local Info = self.ChocoboAllInfoList[Value.ID]
        ChocoboMainVM:UpdateSingleInfo(Info)
    end

    ChocoboMainVM:UpdateOverviewChocobo()
    --ChocoboMainVM:GetGenePanelVM():InitGeneList()
    if self.ReqQueryCallBack ~= nil and #Query.Infos == 1 then
        local Info = Query.Infos[1]
        self.ReqQueryCallBack(Info)
        self.ReqQueryCallBack = nil
    end
end

function ChocoboMgr:OnNetMsgAdopt(MsgBody)
    if nil == MsgBody then
        FLOG_ERROR("ChocoboMgr:OnNetMsgAdopt: MsgBody is nil")
        return
    end
    FLOG_INFO("ChocoboMgr.OnNetMsgAdopt: " .. _G.table_to_string_block(MsgBody))

    local AdoptRsp = MsgBody.AdoptRsp
    if nil == AdoptRsp then
        return
    end
    
    local Info = AdoptRsp.Bird
    self.ChocoboAllInfoList[Info.ID] = Info
    ChocoboMainVM:UpdateSingleInfo(Info)
    ChocoboMainVM:UpdateOverviewChocobo()
    UIViewMgr:HideView(UIViewID.ChocoboNameWinView)
end

function ChocoboMgr:OnNetMsgGetNewbieChocobo(MsgBody)
    if nil == MsgBody then
        FLOG_ERROR("ChocoboMgr:OnNetMsgGetNewbieChocobo: MsgBody is nil")
        return
    end
    FLOG_INFO("ChocoboMgr.OnNetMsgGetNewbieChocobo: " .. _G.table_to_string_block(MsgBody))

    local NewbieChocobo = MsgBody.GetNewbieChocobo
    if nil == NewbieChocobo then
        return
    end

    local Info = NewbieChocobo.Bird
    self.ChocoboAllInfoList[Info.ID] = Info
    ChocoboMainVM:UpdateSingleInfo(Info)
    ChocoboMainVM:UpdateOverviewChocobo()
    local View = UIViewMgr:FindView(UIViewID.ChocoboNameWinView)
    if View then
        View.IsSuc = true
    end
    UIViewMgr:HideView(UIViewID.ChocoboNameWinView)
    EventMgr:SendEvent(EventID.BuddyRenameSuccess)
end

function ChocoboMgr:OnNetMsgQuerySkillList(MsgBody)
    if nil == MsgBody then
        FLOG_ERROR("ChocoboMgr:OnNetMsgQuerySkillList: MsgBody is nil") 
        return
    end
    --FLOG_INFO("ChocoboMgr.OnNetMsgQuerySkillList: " .. _G.table_to_string_block(MsgBody))

    local QuerySkillList = MsgBody.QuerySkillList
    if nil == QuerySkillList then
        return
    end

    self.ChocoboSkillList = QuerySkillList.SkillList
    ChocoboMainVM:GetSkillPanelVM():UpdateSkillList()
end

function ChocoboMgr:OnNetMsgLearnSkill(MsgBody)
    if nil == MsgBody then
        FLOG_ERROR("ChocoboMgr:OnNetMsgLearnSkill: MsgBody is nil")
        return
    end
    --FLOG_INFO("ChocoboMgr.OnNetMsgLearnSkill: " .. _G.table_to_string_block(MsgBody))

    local LearnSkill = MsgBody.LearnSkill
    if nil == LearnSkill then
        return
    end

    if table.find_item(self.ChocoboSkillList, LearnSkill.SkillID) == nil then
        table.insert(self.ChocoboSkillList, LearnSkill.SkillID)
    end

    local SkillCfg = ChocoboRaceSkillDisplayCfg:FindCfgByKey(LearnSkill.SkillID)
    if SkillCfg ~= nil then
        -- LSTR string: 陆行鸟领悟了“%s”技能
        _G.ModuleOpenMgr:OnSkillUnlock(SkillCfg.Icon, string.format(LSTR(420081), SkillCfg.Name))
    end
end

function ChocoboMgr:OnNetMsgSkillOp(MsgBody)
    if nil == MsgBody then
        FLOG_ERROR("ChocoboMgr:OnNetMsgSkillOp: MsgBody is nil")
        return
    end
    --FLOG_INFO("ChocoboMgr.OnNetMsgSkillOp: " .. _G.table_to_string_block(MsgBody))

    local SkillOp = MsgBody.SkillOp
    if nil == SkillOp then
        return
    end

    local ChocoboID = SkillOp.ID
    local ChocoboInfo = self.ChocoboAllInfoList[ChocoboID]
    if ChocoboInfo == nil then
        return
    end

    local SkillCfg = ChocoboRaceSkillCfg:FindCfgByKey(SkillOp.SkillID)
    if SkillCfg == nil then
        return
    end

    if SkillCfg.Type == ProtoRes.CHOCOBO_RACE_SKILL_CASTING_TYPE.CHOCOBO_RACE_SKILL_CASTING_ACTIVE then
        if SkillOp.Op == ProtoCS.SkillOp.OpRemove then
            ChocoboInfo.Skill.Active[SkillOp.Pos + 1] = 0
        else
            ChocoboInfo.Skill.Active[SkillOp.Pos + 1] = SkillOp.SkillID
        end
    elseif SkillCfg.Type == ProtoRes.CHOCOBO_RACE_SKILL_CASTING_TYPE.CHOCOBO_RACE_SKILL_CASTING_PASSIVE then
        if SkillOp.Op == ProtoCS.SkillOp.OpRemove then
            ChocoboInfo.Skill.Passive[1] = 0
        else
            ChocoboInfo.Skill.Passive[1] = SkillOp.SkillID
        end
    end

    local VM = ChocoboMainVM:FindChocoboVM(ChocoboID)
    if VM ~= nil then
        VM:UpdateSkillData(ChocoboInfo.Skill)
    end
    ChocoboMainVM:GetSkillPanelVM():UpdateHasSkillList(ChocoboInfo.Skill)

    local EventParams = {}
    EventParams.SkillID = SkillOp.SkillID
    EventParams.Type = SkillCfg.Type
    EventParams.Op = SkillOp.Op
    EventMgr:SendEvent(EventID.ChocoboSkillOp, EventParams)
end

function ChocoboMgr:OnNetMsgMating(MsgBody)
    if MsgBody == nil then
        FLOG_ERROR("ChocoboMgr:OnNetMsgMating: MsgBody is nil")
        return
    end

    local Mating  = MsgBody.Mating
    if Mating  == nil then return end

    local MatingChocoboID = Mating.Child
    ChocoboMainVM:SetCurChildID(MatingChocoboID)
    self:ReqQuery(MatingChocoboID)
    ChocoboMainVM:SetMatingStatus(true)
    ChocoboMainVM.MatingTime = Mating.MatingTime
    -- LSTR string: 恭喜你，您的陆行鸟配种成功...
    MsgTipsUtil.ShowTips(LSTR(420082))
    self.MatchTimerID = self:RegisterTimer(self.TryResumeChocoboSideBar, 0, 1, 0)

    if self.FemaleChocoboID and self.MaleChocoboID then
        local StainID1 = 1
        local StainID2 = 1
        local FemaleChocoboVM = ChocoboMainVM:FindChocoboVM(self.FemaleChocoboID)
        if FemaleChocoboVM ~= nil then
            StainID1 = FemaleChocoboVM.ColorID
        end
        local MaleChocoboVM = ChocoboMainVM:FindChocoboVM(self.MaleChocoboID)
        if MaleChocoboVM ~= nil then
            StainID2 = MaleChocoboVM.ColorID
        end
        _G.StoryMgr:PlayChocoboSequence(21600117, nil, StainID1, StainID2)
    end
end

function ChocoboMgr:OnNetMsgMatingReceive(MsgBody)
    if MsgBody == nil then
        FLOG_ERROR("ChocoboMgr:OnNetMsgMatingReceive: MsgBody is nil")
        return
    end

    FLOG_ERROR("ChocoboMgr.OnNetMsgMatingReceive: " .. _G.table_to_string_block(MsgBody))
    local MatingReceive  = MsgBody.MatingReceive
    if MatingReceive  == nil then return end

    ChocoboMainVM:SetMatingStatus(false)
    -- 父鸟和母鸟的族谱有也会有变化，请求一下全量
    self:ReqQuery()
    UIViewMgr:HideView(UIViewID.ChocoboNameWinView)
end

function ChocoboMgr:OnNetMsgRentInfo(MsgBody)
    if MsgBody == nil then
        FLOG_ERROR("ChocoboMgr:OnNetMsgRentInfo: MsgBody is nil")
        return
    end

    local RentInfo  = MsgBody.RentInfo
    if RentInfo  == nil then return end

    _G.ChocoboBorrowPanelVM:UpdateRentInfo(RentInfo)
    _G.ChocoboBorrowPanelVM:UpdateBorrowBtn(true)
end

function ChocoboMgr:OnNetMsgRentRefresh(MsgBody)
    if MsgBody == nil then
        FLOG_ERROR("ChocoboMgr:OnNetMsgRentRefresh: MsgBody is nil")
        return
    end

    local RentRefresh  = MsgBody.RentRefresh
    if RentRefresh  == nil then return end

    _G.ChocoboBorrowPanelVM:UpdateRentInfo(RentRefresh)
    _G.ChocoboBorrowPanelVM:UpdateBorrowBtn(true)
end

function ChocoboMgr:OnNetMsgRent(MsgBody)
    if nil == MsgBody then
        FLOG_ERROR("ChocoboMgr:OnNetMsgRent: MsgBody is nil")
        return
    end
    --FLOG_INFO("ChocoboMgr.OnNetMsgRent: " .. _G.table_to_string_block(MsgBody))

    local Rent = MsgBody.Rent
    if nil == Rent then return end

    local ChocoboID = Rent.ID
    if Rent.Rent == 0 then --不再租界
        self.ChocoboAllInfoList[ChocoboID] = nil
        ChocoboMainVM:DeleteChocoboVM(ChocoboID)
        ChocoboMainVM:FilterShowChocoboVMList(ChocoboMainVM.LastConditionStr)
        EventMgr:SendEvent(EventID.ChocoboFree)
    elseif Rent.Rent == 1 then
        local Data = Rent.Info.Info
        self.ChocoboAllInfoList[Data.ID] = Data
        ChocoboMainVM:UpdateSingleInfo(Data)
        ChocoboMainVM:InitOverviewChocoboList()

        _G.ChocoboBorrowPanelVM:UpdateBorrowBtn(false)
        self:RentInfoReq(_G.ChocoboBorrowPanelVM.Gender, _G.ChocoboBorrowPanelVM.Generation)
    end
end

function ChocoboMgr:OnNetMsgLike(MsgBody)
    if nil == MsgBody then
        FLOG_ERROR("ChocoboMgr:OnNetMsgLike: MsgBody is nil")
        return
    end
    --FLOG_INFO("ChocoboMgr.OnNetMsgLike: " .. _G.table_to_string_block(MsgBody))

    local Like = MsgBody.Like
    if nil == Like then
        return
    end

    local ChocoboID = Like.ID
    local IsLike = Like.Like
    local ChocoboInfo = self.ChocoboAllInfoList[ChocoboID]
    if ChocoboInfo == nil then
        return
    end

    if ChocoboInfo.Status == ProtoCS.ChocoboStatus.StatusMating then
        return
    end

    if IsLike then
        ChocoboInfo.Status = ProtoCS.ChocoboStatus.StatusLike
    else
        ChocoboInfo.Status = ProtoCS.ChocoboStatus.StatusNormal
    end
    local VM = ChocoboMainVM:FindChocoboVM(ChocoboID)
    if VM ~= nil then
        VM:SetState(ChocoboInfo.Status)
    end
end

function ChocoboMgr:OnNetMsgFree(MsgBody)
    if nil == MsgBody then
        FLOG_ERROR("ChocoboMgr:OnNetMsgFree: MsgBody is nil")
        return
    end
    --FLOG_INFO("ChocoboMgr.OnNetMsgFree: " .. _G.table_to_string_block(MsgBody))

    local Free = MsgBody.Free
    if nil == Free then
        return
    end

    local ChocoboID = Free.ID
    self.ChocoboAllInfoList[ChocoboID] = nil
    ChocoboMainVM:DeleteChocoboVM(ChocoboID)
    ChocoboMainVM:FilterShowChocoboVMList(ChocoboMainVM.LastConditionStr)
    EventMgr:SendEvent(EventID.ChocoboFree)
end

function ChocoboMgr:OnNetMsgRename(MsgBody)
    if nil == MsgBody then
        FLOG_ERROR("ChocoboMgr:OnNetMsgRename: MsgBody is nil")
        return
    end
    local Rename = MsgBody.Rename
    if nil == Rename then return end
    
    self:ReqQuery(Rename.ID)
    UIViewMgr:HideView(UIViewID.ChocoboNameWinView)
end

function ChocoboMgr:OnNetMsgUpdateNotify(MsgBody)
    if nil == MsgBody then
        FLOG_ERROR("ChocoboMgr:OnNetMsgUpdateNotify: MsgBody is nil")
        return
    end
    --FLOG_INFO("ChocoboMgr.OnNetMsgUpdateNotify: " .. _G.table_to_string_block(MsgBody))

    local Update = MsgBody.Update
    if nil == Update then
        return
    end

    local ID = Update.Info.ID
    local OldInfo = self.ChocoboAllInfoList[ID]
    if OldInfo == nil then
        FLOG_ERROR("ChocoboMgr:OnNetMsgUpdateNotify: OldInfo is nil")
        return
    end

    local NewInfo = Update.Info

    local NeedShowTips = false;
    local Params = {}
    Params.LevelUp = NewInfo.Level > OldInfo.Level
    NeedShowTips = NeedShowTips or Params.LevelUp
    Params.Attr = {}

    local Count = #NewInfo.Attr.Attr
    for i = 1, Count do
        local Temp = {}
        Temp.AttrID = i
        Temp.NewValue = NewInfo.Attr.Attr[i]
        Temp.OldValue = OldInfo.Attr.Attr[i]
        Temp.MaxValue = NewInfo.Attr.Max[i]

        if Temp.NewValue > Temp.OldValue then
            NeedShowTips = NeedShowTips or true
            table.insert(Params.Attr, Temp)
        end
    end

    if ID == ChocoboMainVM.CurRaceEntryID and NeedShowTips then
        local TipsContent = LSTR(420053)
        if Params.LevelUp then
            TipsContent = LSTR(420009)
        end
        MsgTipsUtil.ShowInfoTextTips(3, TipsContent, "", 2)
        UIViewMgr:ShowView(UIViewID.ChocoboLevelUpTipsView, Params)
    end

    self.ChocoboAllInfoList[ID] = NewInfo
    local ChocoboVM = ChocoboMainVM:FindChocoboVM(ID)
    if ChocoboVM ~= nil then
        ChocoboVM:UpdateVM(NewInfo)
    end
end

function ChocoboMgr:OnNetMsgOut(MsgBody)
    if nil == MsgBody then
        FLOG_ERROR("ChocoboMgr:OnNetMsgOut: MsgBody is nil")
        return
    end
    --FLOG_INFO("ChocoboMgr.OnNetMsgOut: " .. _G.table_to_string_block(MsgBody))

    local Out = MsgBody.Out
    if nil == Out then
        return
    end

    local ID = Out.ID
    local IsOut = Out.Out
    if self.ChocoboAllInfoList[ChocoboMainVM.CurRaceEntryID] ~= nil then
        self.ChocoboAllInfoList[ChocoboMainVM.CurRaceEntryID].IsRacer = false
    end

    local Info = self.ChocoboAllInfoList[ID]
    Info.IsRacer = IsOut
    ChocoboMainVM:ChangeRaceEntryVM(ID)
    EventMgr:SendEvent(EventID.ChocoboRacerIDChange, {RacerID = ID})
end

function ChocoboMgr:OnNetMsgLevelUpNotify(MsgBody)
    if nil == MsgBody then
        FLOG_ERROR("ChocoboMgr:OnNetMsgLevelUpNotify: MsgBody is nil")
        return
    end
    --FLOG_INFO("ChocoboMgr.OnNetMsgLevelUpNotify: " .. _G.table_to_string_block(MsgBody))

    local LevelUp = MsgBody.LevelUp
    local OldLevel = LevelUp.OldLevel
    local NewLevel = LevelUp.NewLevel
    local EntityID = LevelUp.EntityID

    local NameCfg1 = ChocoboNameCfg:FindValue(LevelUp.Name.Name1, "Name") or ""
    local NameCfg2 = ChocoboNameCfg:FindValue(LevelUp.Name.Name2, "Name") or ""
    local Name = NameCfg1.. " " .. NameCfg2

    if NewLevel >= self:GetChocoboMaxLevel() then
        EventMgr:SendEvent(EventID.ChocoboMaxLevelChange)
    end
    -- 升级提示与特效
    for Level = OldLevel + 1, NewLevel do
        -- LSTR string: 等级提升了！%s的"%s"升到了%d级
        _G.ChatMgr:AddSysChatMsg(string.format(LSTR(420083), ActorUtil.GetActorName(EntityID), Name, Level))
    end
end

function ChocoboMgr:OnNetMsgQueryTitle(MsgBody)
    if nil == MsgBody then
        FLOG_ERROR("ChocoboMgr:OnNetMsgQueryTitle: MsgBody is nil")
        return
    end
    --FLOG_INFO("ChocoboMgr.OnNetMsgQueryTitle: " .. _G.table_to_string_block(MsgBody))

    local Title = MsgBody.Title
    self.TitleCounter = Title.Counter
    self.TitleAwards = Title.TitleAwards

    local TitleVM = ChocoboMainVM:GetTitlePanelVM()
    TitleVM:UpdateTitleCounter(self.TitleCounter)
    TitleVM:UpdateTitleAwards(self.TitleAwards)
    TitleVM:UpdateTitleData()
end

function ChocoboMgr:OnNetMsgGetTitleAward(MsgBody)
    if nil == MsgBody then
        FLOG_ERROR("ChocoboMgr:OnNetMsgGetTitleAward: MsgBody is nil")
        return
    end
    --FLOG_INFO("ChocoboMgr.OnNetMsgGetTitleAward: " .. _G.table_to_string_block(MsgBody))

    local TitleAward = MsgBody.TitleAward
    local TitleID = TitleAward.Title

    local IsOn = false
    for __, Value in pairs(self.TitleAwards) do
        if Value.ID == TitleID then
            IsOn = true
            Value.AwardGet = true
        end
    end

    if not IsOn then
        local ChocoboTitleAward = {}
        ChocoboTitleAward.ID = TitleID
        ChocoboTitleAward.AwardGet = true
        ChocoboTitleAward.MissionAwards = {}
        table.insert(self.TitleAwards, ChocoboTitleAward)
    end

    local TitleVM = ChocoboMainVM:GetTitlePanelVM()
    TitleVM:UpdateTitleAwards(self.TitleAwards)
    TitleVM:UpdateTitleAward(TitleID, ChocoboDefine.TITLE_REWARD_STATE.ALREADY_GET)
end

function ChocoboMgr:OnNetMsgGetMissionAward(MsgBody)
    if nil == MsgBody then
        FLOG_ERROR("ChocoboMgr:OnNetMsgGetMissionAward: MsgBody is nil")
        return
    end
    --FLOG_INFO("ChocoboMgr.OnNetMsgGetMissionAward: " .. _G.table_to_string_block(MsgBody))

    local MissionAward = MsgBody.MissionAward
    local TitleID = MissionAward.Title
    local Mission = MissionAward.Mission

    local IsOn = false
    for __, Value in ipairs(self.TitleAwards) do
        if Value.ID == TitleID then
            IsOn = true
            table.insert(Value.MissionAwards, Mission)
        end
    end

    if not IsOn then
        local ChocoboTitleAward = {}
        ChocoboTitleAward.ID = TitleID
        ChocoboTitleAward.AwardGet = false
        ChocoboTitleAward.MissionAwards = {}
        table.insert(ChocoboTitleAward.MissionAwards, Mission)
        table.insert(self.TitleAwards, ChocoboTitleAward)
    end

    local TitleVM = ChocoboMainVM:GetTitlePanelVM()
    TitleVM:UpdateTitleAwards(self.TitleAwards)
    TitleVM:UpdateMissionAward(TitleID, Mission)
end
--endregion

--region UI消息
function ChocoboMgr:OnUpdateBuddyEquipmentUpdate(Params)
    local ChocoboID = Params.ID
    if ChocoboID <= 0 then
        return
    end

    local Info = self:GetChocoboInfoByID(ChocoboID)
    if Info == nil then
        return
    end
    
    local VM = ChocoboMainVM:FindChocoboVM(ChocoboID)
    if VM ~= nil and Info.Armor ~= nil then
        VM:UpdateArmorVMList(Info.Armor)
    end
end

function ChocoboMgr:OnUpdateBuddyDyeUpdate(Params)
    local ChocoboID = Params.ID
    if ChocoboID <= 0 then
        return
    end

    local Info = self:GetChocoboInfoByID(ChocoboID)
    local VM = ChocoboMainVM:FindChocoboVM(ChocoboID)
    if VM ~= nil and Info.Armor ~= nil then
        FLOG_ERROR("ChocoboMgr.OnUpdateBuddyDyeUpdate: " .. _G.table_to_string_block(Info.Color, 10))
        VM:UpdateColor(Info.Color)
    end
end
--endregion

---GetRaceChocoboVM
---@return table, boolean
function ChocoboMgr:GetRaceChocoboVM()
    if ChocoboMainVM.CurRaceEntryID > 0 then
        return ChocoboMainVM:FindChocoboVM(ChocoboMainVM.CurRaceEntryID), true
    end

    local RoleID = MajorUtil.GetMajorRoleID()
    return self:FindRoleChocoboVM(RoleID)
end

---GetChocoboVM
---@param ChocoboID number
---@return table
function ChocoboMgr:GetChocoboVM(ChocoboID)
    return ChocoboMainVM:FindChocoboVM(ChocoboID)
end

---GetQueryMatchChocoboList
---@return table
function ChocoboMgr:GetQueryMatchChocoboList()
    return self.QueryMatchChocoboList
end

---其他玩家的出战陆行鸟VM
---@param RoleID number
---@return table, boolean
function ChocoboMgr:FindRoleChocoboVM(RoleID)
    if RoleID == MajorUtil.GetMajorRoleID() then
        if ChocoboMainVM.CurRaceEntryID > 0 then
            return ChocoboMainVM:FindChocoboVM(ChocoboMainVM.CurRaceEntryID), true
        end
    end
    
    local ViewModel = self.RoleOutChocoboVMList[RoleID]
    if nil == ViewModel then
        ViewModel = ChocoboVMBase.New()
        self.RoleOutChocoboVMList[RoleID] = ViewModel
    end
    
    local IsSuc = false
    local Info = self.RoleOutChocoboInfoList[RoleID]
    if Info == nil then
        FLOG_INFO("ChocoboMgr:FindRoleChocoboVM.Info == nil RoleID: %d", RoleID)
    else
        IsSuc = true
        ViewModel:UpdateVM(Info)
    end
    return ViewModel, IsSuc
end

---QueryChocoboSimples
---@param RoleIDList table
---@param Callback function
function ChocoboMgr:QueryChocoboSimples(RoleIDList)
    self:ReqQueryMatchChocobo(RoleIDList)
end

---OpenChocoboBorrowPanel
function ChocoboMgr:OpenChocoboBorrowPanel()
    UIViewMgr:ShowView(UIViewID.ChocoboBorrowPanelView)
end

function ChocoboMgr:OpenNameView(InSource)
    UIViewMgr:ShowView(UIViewID.ChocoboNameWinView, {Source = InSource})
end

---OpenChocoboBreedPanel
function ChocoboMgr:OpenChocoboBreedPanel(IsShowTips)
    IsShowTips = IsShowTips == nil and true or IsShowTips

    if ChocoboMainVM:IsMatingStatus() then
        -- LSTR string: 有配种正在进行中
        if IsShowTips then MsgTipsUtil.ShowTips(LSTR(420172)) end
        return true
    end
    
    local function CheckAndOpenPanel(ChocoboVM)
        if ChocoboVM == nil then
            -- LSTR string: 找不到指定的陆行鸟
            --if IsShowTips then MsgTipsUtil.ShowTips(LSTR(420092)) end
            return false
        end

        if ChocoboVM.RemainCount < 1 then
            -- LSTR string: 陆行鸟配种次数不足
            --if IsShowTips then MsgTipsUtil.ShowTips(LSTR(420093)) end
            return false
        end

        if not ChocoboVM.IsRent and ChocoboVM.Level < ChocoboMgr.MatingLevel then
            -- LSTR string: 陆行鸟等级不足，不能配种
            --if IsShowTips then MsgTipsUtil.ShowTips(LSTR(420094)) end
            return false
        end

        local MatesChocoboVM = ChocoboMainVM:FindMatesChocoboVM(ChocoboVM.ChocoboID)
        if MatesChocoboVM == nil then
            -- LSTR string: 没有符合条件的陆行鸟
            --if IsShowTips then MsgTipsUtil.ShowTips(LSTR(420096)) end
            return false
        end
        
        local Params = {}
        if ChocoboVM.Gender == 0 then
            Params.MaleChocoboID = ChocoboVM.ChocoboID
            Params.FemaleChocoboID = MatesChocoboVM.ChocoboID
        else
            Params.MaleChocoboID = MatesChocoboVM.ChocoboID
            Params.FemaleChocoboID = ChocoboVM.ChocoboID
        end
        
        UIViewMgr:ShowView(UIViewID.ChocoboBreedPanelView, Params)
        return true
    end

    local ChocoboID = ChocoboMainVM.CurSelectEntryID
    if CheckAndOpenPanel(ChocoboMainVM:FindChocoboVM(ChocoboID)) then
        return true
    end

    for _, ChocoboVM in pairs(ChocoboMainVM:GetChocoboViewModels()) do
        if CheckAndOpenPanel(ChocoboVM) then
            return true
        end
    end

    return false
end

function ChocoboMgr:CanOpenChocoboAdopt()
    local ForbidLevelCount = _G.ChocoboMainVM:GetChocoboCount(1)
    if ForbidLevelCount >= self.GenerationLimit then
        MsgTipsUtil.ShowTips(LSTR(420180))
        return false
    end
    return true
end

---OpenChocoboTransferPanel
function ChocoboMgr:OpenChocoboTransferPanel(IsBreed)
    local CrystalID = 3
    local cfg = TeleportCrystalCfg:FindCfgByKey(CrystalID)
    if cfg ~= nil then 
        local MapID = cfg.MapID
        local NPCID = ChocoboDefine.CHOCOBO_MATING_NPC_ID
        local NpcConfig = NpcCfg:FindCfgByKey(NPCID)
        local NpcName = ""
        if NpcConfig then
            NpcName = NpcConfig.Name
        end

        --正在追踪<span color="#490f00">%s</>
        local MapTitle = string.format(LSTR(350018), NpcName)
        EasyTraceMapMgr:ShowEasyTraceMap(MapID, MapTitle, {CrystalID = CrystalID},{ID = NPCID})
    end  
end

---ShowChocoboMainPanelView
function ChocoboMgr:ShowChocoboMainPanelView(PageIndex)
    local TaskID = 150221
    local Cfg = GlobalCfg:FindValue(ProtoRes.global_cfg_id.GlobalCfgChocoboNewbieQuest, "Value")
    if Cfg ~= nil and Cfg[1] ~= nil then
        TaskID = Cfg[1]
    end
    local status = _G.QuestMgr:GetQuestStatus(TaskID)
    if status ~= ProtoCS.CS_QUEST_STATUS.CS_QUEST_STATUS_FINISHED then
        -- LSTR string: 没有完成陆行鸟前置任务
        MsgTipsUtil.ShowTips(LSTR(420099))
        return
    end
    UIViewMgr:ShowView(UIViewID.ChocoboMainPanelView, { PageIndex = PageIndex })
end

---OpenMatingReceivePanel
---@return boolean IsExitInteractive
function ChocoboMgr:OpenMatingReceivePanel(IsShowTips)
    IsShowTips = IsShowTips == nil and true or IsShowTips
    local ChocoboVM = ChocoboMainVM:FindChocoboVM(ChocoboMainVM:GetCurChildID())
    if ChocoboVM ~= nil and ChocoboVM.Status == ProtoCS.ChocoboStatus.StatusMating then
        local CurrentTime = TimeUtil.GetServerLogicTime()
        local MatingEndTime = ChocoboMainVM.MatingTime + ChocoboMgr.MatingNeedTime
        if CurrentTime >= MatingEndTime then
            local function Callback(ChocboInfo)
                local ChocoboID = ChocboInfo.ID
                ChocoboMainVM:SetCurChildID(ChocoboID)
                local StainID = 1
                local ChildChocoboVM = ChocoboMainVM:FindChocoboVM(ChocoboID)
                if ChildChocoboVM ~= nil then
                    ChildChocoboVM:UpdateVM(ChocboInfo)
                    StainID = ChildChocoboVM.ColorID
                end

                local CallBack = function()
                    UIViewMgr:ShowView(UIViewID.ChocoboNameWinView, {Source = ChocoboDefine.SOURCE.SEQUENCE})
                end

                _G.StoryMgr:PlayChocoboSequence(21600118, CallBack, StainID)
                _G.ChocoboMgr:RemoveChocoboSideBar()
            end
            
            self:ReqQuery(ChocoboVM.ChocoboID, Callback)
            return true
        else
            -- LSTR string: 新陆行鸟暂不可领取，请耐心等待
            MsgTipsUtil.ShowTips(LSTR(420171))
            return true
        end
    --else
    --    if IsShowTips then
    --        -- LSTR string: 没有幼鸟可领取
    --        MsgTipsUtil.ShowTips(LSTR(420100))
    --    end
    end
    return false
end

---GetChocoboAllInfoList
function ChocoboMgr:GetChocoboAllInfoList()
    return self.ChocoboAllInfoList --无序的，因为会删除数据
end

---GetChocoboInfoByID
---@param ID number
---@return table
function ChocoboMgr:GetChocoboInfoByID(ID)
    local Info = self.ChocoboAllInfoList[ID]
    if Info == nil then
        FLOG_ERROR("ChocoboMgr:GetChocoboInfoByID.Info == nil ID: %d", ID)
    end
    return Info
end

function ChocoboMgr:GetRaceChocoboName()
    local ChocoboVM, IsSuc = self:GetRaceChocoboVM()
    if IsSuc then
        return ChocoboVM.Name
    end
    
    return ""
end

---IsSkillLockByID
---@param ID table
---@return boolean
function ChocoboMgr:IsSkillLockByID(ID)
    if self.ChocoboSkillList == nil then return true end
    for __, Value in pairs(self.ChocoboSkillList) do
        if ID == Value then
            return false
        end
    end

    return true
end

---GetAllSkillData
---@return table
function ChocoboMgr:GetAllSkillData()
    local AllCfg = ChocoboRaceSkillCfg:FindAllCfg() or {}
    local AllSkillCfg = table.find_all_by_predicate(AllCfg, function(e)
        return e.Rarity ~= ProtoRes.CHOCOBO_SKILL_QUALITY.CHOCOBO_SKILL_QUALITY_ITEM
    end)

    local Ret = {}
    for i = 1, #AllSkillCfg do
        local TempData = {}
        local ID = AllSkillCfg[i].ID
        TempData.SkillID = ID
        TempData.IsLock = self:IsSkillLockByID(ID)
        TempData.Type = AllSkillCfg[i].Type
        TempData.Rarity = AllSkillCfg[i].Rarity
        table.insert(Ret, TempData)
    end
    return Ret
end

---GetHasActiveSkillData
---@return table
function ChocoboMgr:GetHasActiveSkillData()
    if self.ChocoboSkillList == nil then
        return
    end
    
    local Ret = {}
    for i = 1, #self.ChocoboSkillList do
        local ID = self.ChocoboSkillList[i]
        local SkillCfg = ChocoboRaceSkillCfg:FindCfgByKey(ID)
        if SkillCfg ~= nil and SkillCfg.Type == ProtoRes.CHOCOBO_RACE_SKILL_CASTING_TYPE.CHOCOBO_RACE_SKILL_CASTING_ACTIVE then
            local TempData = {}
            TempData.SkillID = ID
            TempData.IsLock = false
            TempData.bAllowLongClickTips = true
            table.insert(Ret, TempData)
        end
    end
    return Ret
end

---GetHasPassiveSkillData
---@return table
function ChocoboMgr:GetHasPassiveSkillData()
    if self.ChocoboSkillList == nil then
        return
    end

    local Ret = {}
    for i = 1, #self.ChocoboSkillList do
        local ID = self.ChocoboSkillList[i]
        local SkillCfg = ChocoboRaceSkillCfg:FindCfgByKey(ID)
        if SkillCfg ~= nil and SkillCfg.Type == ProtoRes.CHOCOBO_RACE_SKILL_CASTING_TYPE.CHOCOBO_RACE_SKILL_CASTING_PASSIVE then
            local TempData = {}
            TempData.SkillID = ID
            TempData.IsLock = false
            TempData.bAllowLongClickTips = true
            table.insert(Ret, TempData)
        end
    end
    return Ret
end

---GetHasSkillNum
---@return number
function ChocoboMgr:GetHasSkillNum()
    local num = 0
    if self.ChocoboSkillList ~= nil then
        num = #self.ChocoboSkillList
    end
    return num, #self:GetAllSkillData()
end

--- 获取玩家拥有的非配种/非租借陆行鸟中的最高等级
---@return number @最高等级，无符合条件时返回0
function ChocoboMgr:GetChocoboMaxLevel()
    local CurrentMaxLevel = 0
    local ChocoboDataList = self.ChocoboAllInfoList or {}

    for _, ChocoboData in pairs(ChocoboDataList) do
        local IsValid = (ChocoboData.Status ~= ProtoCS.ChocoboStatus.StatusMating) and (not ChocoboData.IsRent)
        if IsValid and ChocoboData.Level > CurrentMaxLevel then
            CurrentMaxLevel = ChocoboData.Level
        end
    end
    
    return CurrentMaxLevel
end

--- 获取玩家出战陆行鸟等级
---@return number 无符合条件时返回0
function ChocoboMgr:GetRaceChocoboLevel()
    local ViewModel = ChocoboMainVM:FindChocoboVM(ChocoboMainVM.CurRaceEntryID)
    if ViewModel ~= nil then
        return ViewModel.Level
    end
    
    return 0
end

---GetCustomizeRedDotList
---@return table
function ChocoboMgr:GetCustomizeRedDotList()
    return self.CustomizeRedDotList
end

---AddCustomizeRedDotName
---@param RedDotName string
function ChocoboMgr:AddCustomizeRedDotName(RedDotName)
    for _, NodeName in pairs(self.CustomizeRedDotList) do
        if RedDotName == NodeName then
            return
        end
    end

    table.insert(self.CustomizeRedDotList, RedDotName)
    self:WriteSaveKeyData()
end

function ChocoboMgr:ReadSaveKeyData()
    local HideRedDotStr = USaveMgr.GetString(SaveKey.ChocoboRedDot, "", true)
    self.CustomizeRedDotList = string.split(HideRedDotStr,",")
    --FLOG_INFO("ChocoboMgr.ReadSaveKeyData: " .. _G.table_to_string_block(self.CustomizeRedDotList))
end

function ChocoboMgr:WriteSaveKeyData()
    local HideRedDotStr = ""
    for _, HideNodeName in pairs(self.CustomizeRedDotList) do
        HideRedDotStr = string.format("%s,%s", HideRedDotStr, HideNodeName)
    end
    USaveMgr.SetString(SaveKey.ChocoboRedDot, HideRedDotStr, true)
end

function ChocoboMgr:OpenChocoboMatchPanel()
    PWorldEntUtil.ShowPWorldEntView(ProtoCommon.ScenePoolType.ScenePoolChocobo)
end

function ChocoboMgr:OpenChocoboFee(GameID)
    UIViewMgr:ShowView(UIViewID.ChocoboFeeDingMainPanelView, {GameID = GameID})
end

function ChocoboMgr:TryResumeChocoboSideBar()
    if ChocoboMainVM.IsMating then
        local CurrentTime = TimeUtil.GetServerLogicTime()
        local MatingEndTime = ChocoboMainVM.MatingTime + ChocoboMgr.MatingNeedTime
        if CurrentTime >= MatingEndTime then
            if self.MatchTimerID > 0 then
                self:UnRegisterTimer(self.MatchTimerID)
            end
            self.MatchTimerID = 0
            if _G.SidebarMgr:GetSidebarItemVM(SidebarDefine.SidebarType.ChocoboBabyClaim) ~= nil then
                _G.SidebarMgr:TryOpenSidebarMainWin()
            else
                _G.SidebarMgr:AddSidebarItem(SidebarDefine.SidebarType.ChocoboBabyClaim, CurrentTime)
            end
        end
    end
end

function ChocoboMgr:RemoveChocoboSideBar()
    if _G.SidebarMgr:GetSidebarItemVM(SidebarDefine.SidebarType.ChocoboBabyClaim) ~= nil then
        _G.SidebarMgr:RemoveSidebarItem(SidebarDefine.SidebarType.ChocoboBabyClaim)
    end
end

function ChocoboMgr:OnGameEventSidebarItemTimeOut(Type, TransData)
    if Type ~= SidebarDefine.SidebarType.ChocoboBabyClaim then
        return
    end

    self:RemoveChocoboSideBar()
end

function ChocoboMgr:OpenChocoboBabyClaimSidebar(StartTime, CountDown, Type)
    if not ChocoboMainVM.IsMating then
        return
    end

    local AcceptCallBack = function()
        self:OpenChocoboTransferPanel()
        self:RemoveChocoboSideBar()
    end

    local RefuseCallBack = function()
        self:RemoveChocoboSideBar()
    end

    local Params = {
        BtnTextLeft  = LSTR(10003), --"取消"
        BtnTextRight = LSTR(420032), --"前 往"
        Title        = LSTR(420168), --"陆行鸟配种完成"
        Desc1        = LSTR(420169), --"是否前往领取幼鸟？"
        StartTime    = StartTime,
        CountDown    = CountDown,
        CBFuncRight  = AcceptCallBack,
        CBFuncLeft   = RefuseCallBack,
        Type         = Type,
    }

    UIViewMgr:ShowView(UIViewID.SidebarCommon, Params)
end

return ChocoboMgr