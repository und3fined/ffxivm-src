---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2023/12/25 11:05
---

local LuaClass = require("Core/LuaClass")
local UIViewModel = require("UI/UIViewModel")
local ProtoRes = require("Protocol/ProtoRes")
local ChocoboRaceSkillDisplayCfg = require("TableCfg/ChocoboRaceSkillDisplayCfg")
local ChocoboRaceSkillCfg = require("TableCfg/ChocoboRaceSkillCfg")
local ChocoboSkillVM = require("Game/Chocobo/Life/VM/ChocoboSkillVM")
local ChocoboCarrySkill02ItemVM = require("Game/Chocobo/Life/VM/ChocoboCarrySkill02ItemVM")
local ChocoboUiIconCfg = require("TableCfg/ChocoboUiIconCfg")
local RichTextUtil = require("Utils/RichTextUtil")
local ChocoboDefine = require("Game/Chocobo/ChocoboDefine")
local LSTR = nil
local ChocoboMgr = nil

local SkillFilterType = {
    All = 1,
    QualityCommo = 2,
    QualityRarity = 3,
    TypeActive = 4,
    TypePassive = 5,
}

---@class ChocoboSkillPanelVM : UIViewModel
local ChocoboSkillPanelVM = LuaClass(UIViewModel)

---Ctor
function ChocoboSkillPanelVM:Ctor()
    LSTR = _G.LSTR
    ChocoboMgr = _G.ChocoboMgr

    self.ItemID = 0
    self.Name = ""
    self.Type = 0
    self.Rarity = 0
    self.Cost = ""
    self.CD = ""
    self.Desc = ""
    self.Icon = ""
    self.IsLock = true
    self.IsShowAll = true
    self.IsSelect = false
    self.IsShowCost = false
    self.IsShowCD = false
    self.FilterType = SkillFilterType.All
    self.IsSkillVMListNotEmpty = false

    self.ShowSkillVMList = self:ResetBindableList(self.ShowSkillVMList, ChocoboSkillVM)
    self.AllSkillVMList = {}

    self.SkillTypeTagList = self:ResetBindableList(self.SkillTypeTagList, ChocoboCarrySkill02ItemVM)

    self.HasActiveSkillVMList = self:ResetBindableList(self.HasActiveSkillVMList, ChocoboSkillVM)
    self.HasPassiveSkillVMList = self:ResetBindableList(self.HasPassiveSkillVMList, ChocoboSkillVM)

    self.SkillTypeTagItemData = {
        [ProtoRes.CHOCOBO_RACE_SKILL_CASTING_TYPE.CHOCOBO_RACE_SKILL_CASTING_ACTIVE] = {
            -- LSTR string: 主动
            TagText = LSTR(420026),
            IconPath = ChocoboUiIconCfg:FindPathByKey(ProtoRes.CHOCOBO_UI_ICON_TYPE.SKILL_TYPE_PASSIVE),
        },
        [ProtoRes.CHOCOBO_RACE_SKILL_CASTING_TYPE.CHOCOBO_RACE_SKILL_CASTING_PASSIVE] = {
            -- LSTR string: 被动
            TagText = LSTR(420027),
            IconPath = ChocoboUiIconCfg:FindPathByKey(ProtoRes.CHOCOBO_UI_ICON_TYPE.SKILL_TYPE_PASSIVE),
        },
    }

    self.SkillQualityTagItemData = {
        [ProtoRes.CHOCOBO_SKILL_QUALITY.CHOCOBO_SKILL_QUALITY_COMMON] = {
            -- LSTR string: 普通
            TagText = LSTR(420090),
            IconPath = ChocoboUiIconCfg:FindPathByKey(ProtoRes.CHOCOBO_UI_ICON_TYPE.SKILL_QUALITY_COMMO),
        },
        [ProtoRes.CHOCOBO_SKILL_QUALITY.CHOCOBO_SKILL_QUALITY_RARITY] = {
            -- LSTR string: 稀有
            TagText = LSTR(420091),
            IconPath = ChocoboUiIconCfg:FindPathByKey(ProtoRes.CHOCOBO_UI_ICON_TYPE.SKILL_QUALITY_RARITY),
        },
    }
end

local function SafeFormat(FormatString, ...)
    if not FormatString then return "" end

    local Args = {...}
    local Result = {}
    local ArgIndex = 1
    local Len = #FormatString
    local Pos = 1

    while Pos <= Len do
        local Char = FormatString:sub(Pos, Pos)
        if Char == "%" then
            local NextChar = FormatString:sub(Pos + 1, Pos + 1)
            if NextChar == "d" or NextChar == "s" then
                -- 处理占位符 %d 或 %s
                table.insert(Result, Args[ArgIndex] or "")
                ArgIndex = ArgIndex + 1
                Pos = Pos + 2
            elseif NextChar == "%" then
                table.insert(Result, "%")
                Pos = Pos + 2  -- 跳过 %%
            else
                table.insert(Result, "%")
                Pos = Pos + 1
            end
        else
            table.insert(Result, Char)
            Pos = Pos + 1
        end
    end

    return table.concat(Result)
end

function ChocoboSkillPanelVM:UpdateVM(SkillEffectCfg, SkillDisplayCfg)
    self.Name = SkillDisplayCfg.Name
    self.Icon = SkillDisplayCfg.Icon
    self.ItemID = SkillDisplayCfg.ItemID

    self.Type = SkillEffectCfg.Type
    self.Rarity = SkillEffectCfg.Rarity
    self.IsLock = ChocoboMgr:IsSkillLockByID(SkillEffectCfg.ID)
    self.IsSelect = false

    if SkillEffectCfg.Cost ~= nil then
        self.Cost = tostring(SkillEffectCfg.Cost.Max)
        if SkillEffectCfg.Cost.Max > 0 then
            self.IsShowCost = true
        else
            self.IsShowCost = false
        end
    else
        self.IsShowCost = false
    end

    local CDText = ""
    if SkillEffectCfg.Level[1].CD > 0 then
        local Path = RichTextUtil.GetTexture(ChocoboUiIconCfg:FindPathByKey(ProtoRes.CHOCOBO_UI_ICON_TYPE.ABILITIES_LEVEL_ICON_PATH_1), 40, 40, -8) or ""
        CDText = CDText .. Path .. RichTextUtil.GetText(SkillEffectCfg.Level[1].CD .. "s/", "d1ba8e")
    end
    if SkillEffectCfg.Level[2].CD > 0 then
        local Path = RichTextUtil.GetTexture(ChocoboUiIconCfg:FindPathByKey(ProtoRes.CHOCOBO_UI_ICON_TYPE.ABILITIES_LEVEL_ICON_PATH_2), 40, 40, -8) or ""
        CDText = CDText .. Path .. RichTextUtil.GetText(SkillEffectCfg.Level[2].CD .. "s/", "d1ba8e")
    end
    if SkillEffectCfg.Level[3].CD > 0 then
        local Path = RichTextUtil.GetTexture(ChocoboUiIconCfg:FindPathByKey(ProtoRes.CHOCOBO_UI_ICON_TYPE.ABILITIES_LEVEL_ICON_PATH_3), 40, 40, -8) or ""
        CDText = CDText .. Path .. RichTextUtil.GetText(SkillEffectCfg.Level[3].CD .. "s", "d1ba8e")
    end

    if CDText == "" then
        self.IsShowCD = false
    else
        self.IsShowCD = true
        self.CD = CDText
    end
    
    local DescParam = SkillEffectCfg.Level[1].Param
    if #DescParam == 0 then
        self.Desc = SkillDisplayCfg.Desc
    elseif #DescParam == 1 then
        self.Desc = SafeFormat(SkillDisplayCfg.Desc, DescParam[1])
    elseif #DescParam == 2 then
        self.Desc = SafeFormat(SkillDisplayCfg.Desc, DescParam[1], DescParam[2])
    end
    

    local TagList = {}
    local TempData = self.SkillTypeTagItemData[self.Type]
    if TempData ~= nil then
        table.insert(TagList, TempData)
    end
    TempData = self.SkillQualityTagItemData[self.Rarity]
    if TempData ~= nil then
        table.insert(TagList, TempData)
    end

    self.SkillTypeTagList:Clear()
    self.SkillTypeTagList:UpdateByValues(TagList)
end

function ChocoboSkillPanelVM:InitSkillList()
    local AllSkillData = ChocoboMgr:GetAllSkillData()

    self.AllSkillVMList = AllSkillData
    self.ShowSkillVMList:Clear()
    self.ShowSkillVMList:UpdateByValues(AllSkillData)
    self.IsSkillVMListNotEmpty = self.ShowSkillVMList:Length() > 0
end

function ChocoboSkillPanelVM:UpdateSkillList()
    for i = 1, self.ShowSkillVMList:Length() do
        local ViewMode = self.ShowSkillVMList:Get(i)
        local ID = ViewMode.SkillID
        ViewMode.IsLock = ChocoboMgr:IsSkillLockByID(ID)
    end
end

function ChocoboSkillPanelVM:InitHasSkillList(ChocoboID)
    local HasActiveSkillData = ChocoboMgr:GetHasActiveSkillData()
    self.HasActiveSkillVMList:Clear()
    self.HasActiveSkillVMList:UpdateByValues(HasActiveSkillData)

    local HasPassiveSkillData = ChocoboMgr:GetHasPassiveSkillData()
    self.HasPassiveSkillVMList:Clear()
    self.HasPassiveSkillVMList:UpdateByValues(HasPassiveSkillData)

    local SkillInfo = (ChocoboMgr:GetChocoboInfoByID(ChocoboID) or {}).Skill
    self:UpdateHasSkillList(SkillInfo)
end

function ChocoboSkillPanelVM:UpdateHasSkillList(SkillInfo)
    if SkillInfo == nil then
        return
    end

    for i = 1, self.HasActiveSkillVMList:Length() do
        local ViewMode = self.HasActiveSkillVMList:Get(i)
        local IsCheck = false
        for j = 1, #SkillInfo.Active do
            if ViewMode.SkillID == SkillInfo.Active[j] then
                IsCheck = true
            end
        end
        ViewMode.IsCheck = IsCheck
    end

    for i = 1, self.HasPassiveSkillVMList:Length() do
        local ViewMode = self.HasPassiveSkillVMList:Get(i)
        local IsCheck = false
        for j = 1, #SkillInfo.Passive do
            if ViewMode.SkillID == SkillInfo.Passive[j] then
                IsCheck = true
            end
        end
        ViewMode.IsCheck = IsCheck
    end
end

function ChocoboSkillPanelVM:ChangeSelectSkillID(SkillID)
    local SkillEffectCfg = ChocoboRaceSkillCfg:FindCfgByKey(SkillID)
    local SkillDisplayCfg = ChocoboRaceSkillDisplayCfg:FindCfgByKey(SkillID)
    if SkillEffectCfg ~= nil and SkillDisplayCfg ~= nil then
        self:UpdateVM(SkillEffectCfg, SkillDisplayCfg)
    end
end

function ChocoboSkillPanelVM:FilterSkillVM(FilterFunc)
    local Result = {}
    local AllSkillVMList = self.AllSkillVMList
	for i = 1, #AllSkillVMList do
		local SkillVM = AllSkillVMList[i]
		if FilterFunc(SkillVM) then
			Result[#Result + 1] = SkillVM
		end
	end
	return Result
end

function ChocoboSkillPanelVM:FilterGroupVMByType(IsShowAll, Type)
    if IsShowAll ~= nil then
        self.IsShowAll = IsShowAll
    end
    if Type ~= nil then
        self.FilterType = Type
    end

    local GroupVM = nil
    if self.IsShowAll then
        if self.FilterType == SkillFilterType.QualityCommo then
            GroupVM = self:FilterSkillVM(function(Item)
                return Item.Rarity == ProtoRes.CHOCOBO_SKILL_QUALITY.CHOCOBO_SKILL_QUALITY_COMMON
            end)
        elseif self.FilterType == SkillFilterType.QualityRarity then
            GroupVM = self:FilterSkillVM(function(Item)
                return Item.Rarity == ProtoRes.CHOCOBO_SKILL_QUALITY.CHOCOBO_SKILL_QUALITY_RARITY
            end)
        elseif self.FilterType == SkillFilterType.TypeActive then
            GroupVM = self:FilterSkillVM(function(Item)
                return Item.Type == ProtoRes.CHOCOBO_RACE_SKILL_CASTING_TYPE.CHOCOBO_RACE_SKILL_CASTING_ACTIVE
            end)
        elseif self.FilterType == SkillFilterType.TypePassive then
            GroupVM = self:FilterSkillVM(function(Item)
                return Item.Type == ProtoRes.CHOCOBO_RACE_SKILL_CASTING_TYPE.CHOCOBO_RACE_SKILL_CASTING_PASSIVE
            end)
        else
            GroupVM = self.AllSkillVMList
        end
    else
        if self.FilterType == SkillFilterType.QualityCommo then
            GroupVM = self:FilterSkillVM(function(Item)
                return Item.Rarity == ProtoRes.CHOCOBO_SKILL_QUALITY.CHOCOBO_SKILL_QUALITY_COMMON and not Item.IsLock
            end)
        elseif self.FilterType == SkillFilterType.QualityRarity then
            GroupVM = self:FilterSkillVM(function(Item)
                return Item.Rarity == ProtoRes.CHOCOBO_SKILL_QUALITY.CHOCOBO_SKILL_QUALITY_RARITY and not Item.IsLock
            end)
        elseif self.FilterType == SkillFilterType.TypeActive then
            GroupVM = self:FilterSkillVM(function(Item)
                return Item.Type == ProtoRes.CHOCOBO_RACE_SKILL_CASTING_TYPE.CHOCOBO_RACE_SKILL_CASTING_ACTIVE and not Item.IsLock
            end)
        elseif self.FilterType == SkillFilterType.TypePassive then
            GroupVM = self:FilterSkillVM(function(Item)
                return Item.Type == ProtoRes.CHOCOBO_RACE_SKILL_CASTING_TYPE.CHOCOBO_RACE_SKILL_CASTING_PASSIVE and not Item.IsLock
            end)
        else
            GroupVM = self:FilterSkillVM(function(Item)
                return not Item.IsLock
            end)
        end
    end

    self.ShowSkillVMList:Clear()
    self.ShowSkillVMList:UpdateByValues(GroupVM)
    self.IsSkillVMListNotEmpty = self.ShowSkillVMList:Length() > 0
end

return ChocoboSkillPanelVM