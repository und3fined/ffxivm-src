---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2023/12/19 11:32
---
---
local LuaClass = require("Core/LuaClass")
local UIViewModel = require("UI/UIViewModel")
local ChocoboDefine = require("Game/Chocobo/ChocoboDefine")
local ChocoboInfoAttrItemStarVM = require("Game/Chocobo/Life/VM/ChocoboInfoAttrItemStarVM")
local ChocoboInfoAttrItemVM = require("Game/Chocobo/Life/VM/ChocoboInfoAttrItemVM")
local ChocoboSkillVM = require("Game/Chocobo/Life/VM/ChocoboSkillVM")
local ChocoboArmorVM = require("Game/Chocobo/Life/VM/ChocoboArmorVM")
local ChocoboOffspringItemVM = require("Game/Chocobo/Life/VM/ChocoboOffspringItemVM")
local ProtoRes = require("Protocol/ProtoRes")
local ChocoboUiIconCfg = require("TableCfg/ChocoboUiIconCfg")
local ChocoboLevelCfg = require("TableCfg/ChocoboLevelCfg")
local ChocoboNameCfg = require("TableCfg/ChocoboNameCfg")
local BuddyColorCfg = require("TableCfg/BuddyColorCfg")
local ChocoboMatchSectionCfg = require("TableCfg/ChocoboMatchSectionCfg")
local ProtoCS = require("Protocol/ProtoCS")
local LSTR = nil
local ChocoboMgr = nil
local UE = nil

---@class ChocoboVM : UIViewModel
local ChocoboVM = LuaClass(UIViewModel)

---Ctor
function ChocoboVM:Ctor()
    UE = _G.UE
    LSTR = _G.LSTR
    ChocoboMgr = _G.ChocoboMgr

    self.ChocoboID = 0
    self.IsSelect = false
    self.IsSelectParent = false
    self.IsChecked = false
    self.Level = 0
    self.IsLike = false
    self.IsRacer = false
    self.Name = ""
    self.Generation = 0
    self.MatingTime = 0
    self.Mating = {}

    self.RemainCount = 0
    self.RemainCountText = ""
    self.Gender = 0
    self.GenderPath = ""
    self.ExpSliderValue = 0
    self.ExpText = ""
    self.FeatherValue = 0
    self.FeatherIconPath = ""
    self.IsRent = false
    self.HasFather = false
    self.HasMother = false
    self.HasChild = false
    self.Status = ProtoCS.ChocoboStatus.StatusNull
    self.ColorName = ""
    self.ColorID = 1
    self.Color = ChocoboDefine.DEFAULT_HEAD_COLOR
    self.FatherColor = ChocoboDefine.DEFAULT_HEAD_COLOR
    self.MotherColor = ChocoboDefine.DEFAULT_HEAD_COLOR
    -- LSTR string: 已不在鸟栏
    self.FatherName = LSTR(420101)
    -- LSTR string: 已不在鸟栏
    self.MotherName = LSTR(420101)
    self.CurFilterType = ChocoboDefine.OVERVIEW_FILTER_TYPE.LEVEL

    self.Skill = {}
    self.Attr = {}
    self.Gene = {}
    self.Armor = {}
    self.StarCount = 0
    self.FilterBlueStarVMList = self:ResetBindableList(self.FilterBlueStarVMList, ChocoboInfoAttrItemStarVM)
    self.FilterRedStarVMList = self:ResetBindableList(self.FilterRedStarVMList, ChocoboInfoAttrItemStarVM)
    self.AttrVMList = self:ResetBindableList(self.AttrVMList, ChocoboInfoAttrItemVM)
    self.ActiveSkillVMList = self:ResetBindableList(self.ActiveSkillVMList, ChocoboSkillVM)
    self.PassiveSkillVMList = self:ResetBindableList(self.PassiveSkillVMList, ChocoboSkillVM)
    self.ArmorVMList = self:ResetBindableList(self.ArmorVMList, ChocoboArmorVM)
    self.ChildVMList = self:ResetBindableList(self.ChildVMList, ChocoboOffspringItemVM)

    self.FeatherIconPathCfg = {
        [1] = ChocoboUiIconCfg:FindPathByKey(ProtoRes.CHOCOBO_UI_ICON_TYPE.FEATHER_STAGE_1),
        [2] = ChocoboUiIconCfg:FindPathByKey(ProtoRes.CHOCOBO_UI_ICON_TYPE.FEATHER_STAGE_2),
        [3] = ChocoboUiIconCfg:FindPathByKey(ProtoRes.CHOCOBO_UI_ICON_TYPE.FEATHER_STAGE_3),
        [4] = ChocoboUiIconCfg:FindPathByKey(ProtoRes.CHOCOBO_UI_ICON_TYPE.FEATHER_STAGE_4),
        [5] = ChocoboUiIconCfg:FindPathByKey(ProtoRes.CHOCOBO_UI_ICON_TYPE.FEATHER_STAGE_5),
        [6] = ChocoboUiIconCfg:FindPathByKey(ProtoRes.CHOCOBO_UI_ICON_TYPE.FEATHER_STAGE_6),
        [7] = ChocoboUiIconCfg:FindPathByKey(ProtoRes.CHOCOBO_UI_ICON_TYPE.FEATHER_STAGE_7),
        [8] = ChocoboUiIconCfg:FindPathByKey(ProtoRes.CHOCOBO_UI_ICON_TYPE.FEATHER_STAGE_8),
        [9] = ChocoboUiIconCfg:FindPathByKey(ProtoRes.CHOCOBO_UI_ICON_TYPE.FEATHER_STAGE_9),
    }

    self.FilterAttrIconPathCfg = {
        [ChocoboDefine.OVERVIEW_FILTER_TYPE.MAX_SPEED] = ChocoboUiIconCfg:FindPathByKey(ProtoRes.CHOCOBO_UI_ICON_TYPE.ATTR_MAX_SPEED),
        [ChocoboDefine.OVERVIEW_FILTER_TYPE.SPRINT_SPEED] = ChocoboUiIconCfg:FindPathByKey(ProtoRes.CHOCOBO_UI_ICON_TYPE.ATTR_SPRINT_SPEED),
        [ChocoboDefine.OVERVIEW_FILTER_TYPE.ACCELERATION] = ChocoboUiIconCfg:FindPathByKey(ProtoRes.CHOCOBO_UI_ICON_TYPE.ATTR_ACCELERATION),
        [ChocoboDefine.OVERVIEW_FILTER_TYPE.STAMINA] = ChocoboUiIconCfg:FindPathByKey(ProtoRes.CHOCOBO_UI_ICON_TYPE.ATTR_STAMINA),
        [ChocoboDefine.OVERVIEW_FILTER_TYPE.SKILL_STRENGTH] = ChocoboUiIconCfg:FindPathByKey(ProtoRes.CHOCOBO_UI_ICON_TYPE.ATTR_SKILL_STRENGTH),
    }
end

---UpdateVM
---@param Data table
function ChocoboVM:UpdateVM(Data)
    if Data == nil or Data.ID <= 0 then
        return
    end
    
    self.ChocoboID = Data.ID
    self.Level = Data.Level
    -- LSTR string: 级
    self.LevelText = self.Level .. LSTR(420107)
    local NameCfg1 = ChocoboNameCfg:FindValue(Data.Name.Name1, "Name") or ""
    local NameCfg2 = ChocoboNameCfg:FindValue(Data.Name.Name2, "Name") or ""
    self.Name = NameCfg1 .. " " .. NameCfg2

    self.Gender = Data.Gender
    if Data.Gender == 0 then
        self.GenderPath = ChocoboUiIconCfg:FindPathByKey(ProtoRes.CHOCOBO_UI_ICON_TYPE.GENDER_BOY)
    else
        self.GenderPath = ChocoboUiIconCfg:FindPathByKey(ProtoRes.CHOCOBO_UI_ICON_TYPE.GENDER_GIRL)
    end
    self.IsRent = Data.IsRent
    self.IsRacer = Data.Outing
    self.IsSelect = false
    self.IsSelectParent = false
    self.Status = Data.Status
    self.IsLike = Data.Status == ProtoCS.ChocoboStatus.StatusLike

    local MaxExp = 100
    self.Mating = Data.Mating
    self.Generation = Data.Mating.Generation
    self.MatingTime = Data.Mating.MatingTime
    self.RemainCount = Data.Mating.RemainCount
    if self.Status ~= ProtoCS.ChocoboStatus.StatusMating then
        local Color = "#d5d5d5"
        if self.RemainCount <= 0 then
            Color = "#dc5868"
        end
        local Str = string.format("<span color=\"%s\">%s</>", Color, tostring(self.RemainCount))
        self.RemainCountText = string.format(LSTR(420185), Str)
    end

    self.GenerationText = tostring(self.Generation)
    local GeneCfg = ChocoboLevelCfg:FindCfgByKey(Data.Level + 1)
    if GeneCfg == nil then
        GeneCfg = ChocoboLevelCfg:FindCfgByKey(Data.Level)
    end
    if GeneCfg ~= nil and GeneCfg.Gene ~= nil and GeneCfg.Gene[self.Generation] ~= nil then
        MaxExp = GeneCfg.Gene[self.Generation].Exp
    end

    self.ExpSliderValue = Data.Exp / MaxExp
    self.ExpText = string.format("<span color=\"#d1ba8eFF\">%d/</><span color=\"#828282FF\">%d</>", Data.Exp, MaxExp)

    local FeatherValue = 0
    for __, MaxValue in ipairs(Data.Attr.Max) do
        FeatherValue = FeatherValue + MaxValue
    end

    --羽力值=五项属性上限的总和×(竞赛等级+10) / 500。计算结果向下取整
    self.FeatherValue = math.floor((Data.Level + 10) * FeatherValue / 500)
    self.FeatherLevel = 1

    local SectionCfgs = ChocoboMatchSectionCfg:FindAllCfg()
    for __, SectionCfg in pairs(SectionCfgs) do
        if self.FeatherValue >= SectionCfg.LowerLimit and self.FeatherValue <= SectionCfg.UpperLimit then
            self.FeatherLevel = SectionCfg.ID
            self.FeatherLimitText = SectionCfg.LowerLimit .. "-" .. SectionCfg.UpperLimit .. LSTR(420161)
        end
    end

    self.FeatherRankText = tostring(self.FeatherLevel)
    self.FeatherRankStagesText = ChocoboDefine.FEATHER_FORCE_STAGES_TEXT[self.FeatherLevel] or ""
    self.FeatherIconPath = self.FeatherIconPathCfg[self.FeatherLevel]

    self.FilterAttrIconPath = self.FilterAttrIconPathCfg[self.CurFilterType]
    self.Skill = Data.Skill
    self.Attr = Data.Attr
    self.Gene = Data.Gene
    self.Armor = Data.Armor

    self.ColorID = Data.Color.RGB
    local ColorCfg = BuddyColorCfg:FindCfgByKey(Data.Color.RGB)
    if ColorCfg ~= nil then
        self.ColorName = ColorCfg.Name
        self.Color = UE.FLinearColor(ColorCfg.R / 255, ColorCfg.G / 255, ColorCfg.B / 255, 1)
    end
    self.HasFather = Data.Mating.Father > 0
    self.HasMother = Data.Mating.Mother > 0
    if self.HasFather then
        local FatherInfo = ChocoboMgr:GetChocoboInfoByID(Data.Mating.Father)
        if FatherInfo ~= nil then
            local FatherName1 = ChocoboNameCfg:FindValue(FatherInfo.Name.Name1, "Name") or ""
            local FatherName2 = ChocoboNameCfg:FindValue(FatherInfo.Name.Name2, "Name") or ""
            self.FatherName = FatherName1 .. FatherName2

            local FatherColorCfg = BuddyColorCfg:FindCfgByKey(FatherInfo.Color.RGB)
            if FatherColorCfg ~= nil then
                self.FatherColor = UE.FLinearColor(FatherColorCfg.R / 255, FatherColorCfg.G / 255, FatherColorCfg.B / 255, 1)
            end
        end
    end
    if self.HasMother then
        local MotherInfo = ChocoboMgr:GetChocoboInfoByID(Data.Mating.Mother)
        if MotherInfo ~= nil then
            local MotherName1 = ChocoboNameCfg:FindValue(MotherInfo.Name.Name1, "Name") or ""
            local MotherName2 = ChocoboNameCfg:FindValue(MotherInfo.Name.Name2, "Name") or ""
            self.MotherName = MotherName1 .. MotherName2
            local MotherColorCfg = BuddyColorCfg:FindCfgByKey(MotherInfo.Color.RGB)
            if MotherColorCfg ~= nil then
                self.MotherColor = UE.FLinearColor(MotherColorCfg.R / 255, MotherColorCfg.G / 255, MotherColorCfg.B / 255, 1)
            end
        end
    end

    -- 统计总星数
    self.StarCount = 0
    for __, V in pairs(Data.Gene.GeneRed) do
        self.StarCount = self.StarCount + V
    end
    for __, V in pairs(Data.Gene.GeneBlue) do
        self.StarCount = self.StarCount + V
    end
    self.StarCountText = string.format(LSTR(420160), self.StarCount)

    self.AttrInfoList = {}
    local Count = #Data.Attr.Attr
    for i = 1, Count do
        local TempData = {}
        TempData.GeneRed = {}
        TempData.GeneBlue = {}
        if Data.Attr.Attr[i] ~= nil and Data.Attr.Max[i] ~= nil then
            TempData.AttrID = i
            TempData.IsRent = Data.IsRent
            TempData.AttrName = ChocoboDefine.CHOCOBO_ATTR_TYPE_NAME[i]
            TempData.AttrValue = Data.Attr.Attr[i]
            TempData.MaxAttrValue = Data.Attr.Max[i]
            TempData.GeneRed = Data.Gene.GeneRed[i] == nil and 0 or Data.Gene.GeneRed[i]
            TempData.GeneBlue = Data.Gene.GeneBlue[i] == nil and 0 or Data.Gene.GeneBlue[i]
        end
        table.insert(self.AttrInfoList, TempData);
    end

    self.ActiveSkillInfoList = {}
    for i = 1, ChocoboMgr.CarryActiveSkillNum do
        local TempData = {}
        TempData.SkillID = self.Skill.Active[i] == nil and 0 or self.Skill.Active[i]
        table.insert(self.ActiveSkillInfoList, TempData);
    end
    self.PassiveSkillInfoList = {}
    for i = 1, ChocoboMgr.CarryPassiveSkillNum do
        local TempData = {}
        TempData.SkillID = self.Skill.Passive[i] == nil and 0 or self.Skill.Passive[i]
        table.insert(self.PassiveSkillInfoList, TempData);
    end

    self.ArmorInfoList = {}
    table.insert(self.ArmorInfoList, { ArmorID = Data.Armor.Head, Pos = ProtoCS.ChocoboArmorPos.ChocoboArmorPosHead });
    table.insert(self.ArmorInfoList, { ArmorID = Data.Armor.Body, Pos = ProtoCS.ChocoboArmorPos.ChocoboArmorPosBody });
    table.insert(self.ArmorInfoList, { ArmorID = Data.Armor.Feet, Pos = ProtoCS.ChocoboArmorPos.ChocoboArmorPosLeg });

    self.ChildInfoList = {}
    self.HasChild = #Data.Mating.Child > 0
    for i = 1, #Data.Mating.Child do
        local ChocoboID = Data.Mating.Child[i]
        local ChildInfo = ChocoboMgr:GetChocoboInfoByID(ChocoboID)
        if ChildInfo ~= nil then
            local TempData = {}
            TempData.ChocoboID = ChocoboID
            local ChildName1 = ChocoboNameCfg:FindValue(ChildInfo.Name.Name1, "Name") or ""
            local ChildName2 = ChocoboNameCfg:FindValue(ChildInfo.Name.Name2, "Name") or ""
            TempData.Name = ChildName1 .. ChildName2
            if ChildInfo.Gender == 1 then
                TempData.GenderPath = ChocoboUiIconCfg:FindPathByKey(ProtoRes.CHOCOBO_UI_ICON_TYPE.GENDER_BOY)
            else
                TempData.GenderPath = ChocoboUiIconCfg:FindPathByKey(ProtoRes.CHOCOBO_UI_ICON_TYPE.GENDER_GIRL)
            end
            TempData.Color = ChocoboDefine.DEFAULT_HEAD_COLOR
            local ChildColorCfg = BuddyColorCfg:FindCfgByKey(ChildInfo.Color.RGB)
            if ChildColorCfg ~= nil then
                TempData.Color = UE.FLinearColor(ChildColorCfg.R / 255, ChildColorCfg.G / 255, ChildColorCfg.B / 255, 1)
            end
            table.insert(self.ChildInfoList, TempData);
        end
    end
end

---ResetAttrVMList
function ChocoboVM:ResetAttrVMList()
    self.AttrVMList:Clear()
    self.AttrVMList:UpdateByValues(self.AttrInfoList)
end

---ResetSkillVMList
function ChocoboVM:ResetSkillVMList()
    self.ActiveSkillVMList:Clear()
    self.PassiveSkillVMList:Clear()
    self.ActiveSkillVMList:UpdateByValues(self.ActiveSkillInfoList)
    self.PassiveSkillVMList:UpdateByValues(self.PassiveSkillInfoList)
end

---ResetArmorVMList
function ChocoboVM:ResetArmorVMList()
    self.ArmorVMList:Clear()
    self.ArmorVMList:UpdateByValues(self.ArmorInfoList)
end

---ResetChildList
function ChocoboVM:ResetChildList()
    self.ChildVMList:Clear()
    self.ChildVMList:UpdateByValues(self.ChildInfoList)
end

---UpdateSkillData
---@param Data table
function ChocoboVM:UpdateSkillData(Data)
    self.Skill = Data
    self.ActiveSkillInfoList = {}
    for i = 1, ChocoboMgr.CarryActiveSkillNum do
        local TempData = {}
        TempData.SkillID = self.Skill.Active[i] == nil and 0 or self.Skill.Active[i]
        table.insert(self.ActiveSkillInfoList, TempData);

        local ItemVM = self.ActiveSkillVMList:Get(i)
        if ItemVM ~= nil then
            ItemVM:UpdateVM(TempData)
        end
    end

    self.PassiveSkillInfoList = {}
    for i = 1, ChocoboMgr.CarryPassiveSkillNum do
        local TempData = {}
        TempData.SkillID = self.Skill.Passive[i] == nil and 0 or self.Skill.Passive[i]
        table.insert(self.PassiveSkillInfoList, TempData);

        local ItemVM = self.PassiveSkillVMList:Get(i)
        if ItemVM ~= nil then
            ItemVM:UpdateVM(TempData)
        end
    end
end

---UpdateArmorVMList
---@param ArmorInfo table
function ChocoboVM:UpdateArmorVMList(ArmorInfo)
    self.Armor.Head = ArmorInfo.Head
    self.Armor.Body = ArmorInfo.Body
    self.Armor.Feet = ArmorInfo.Feet
    
    self.ArmorInfoList[ProtoCS.ChocoboArmorPos.ChocoboArmorPosHead + 1] = { ArmorID = ArmorInfo.Head, Pos = ProtoCS.ChocoboArmorPos.ChocoboArmorPosHead }
    self.ArmorInfoList[ProtoCS.ChocoboArmorPos.ChocoboArmorPosBody + 1] = { ArmorID = ArmorInfo.Body, Pos = ProtoCS.ChocoboArmorPos.ChocoboArmorPosBody }
    self.ArmorInfoList[ProtoCS.ChocoboArmorPos.ChocoboArmorPosLeg + 1] = { ArmorID = ArmorInfo.Feet, Pos = ProtoCS.ChocoboArmorPos.ChocoboArmorPosLeg }
    
    for i = 1, self.ArmorVMList:Length() do
        local ItemVM = self.ArmorVMList:Get(i)
        if ItemVM ~= nil then
            ItemVM:UpdateVM(self.ArmorInfoList[i])
        end
    end
end

---UpdateColor
---@param ColorInfo table
function ChocoboVM:UpdateColor(ColorInfo)
    self.ColorID = ColorInfo.RGB
    local ColorCfg = BuddyColorCfg:FindCfgByKey(ColorInfo.RGB)
    if ColorCfg ~= nil then
        self.ColorName = ColorCfg.Name
        self.Color = UE.FLinearColor(ColorCfg.R / 255, ColorCfg.G / 255, ColorCfg.B / 255, 1)
    end
end

---SetOverviewFilterType
---@param InFilter number ChocoboDefine.OVERVIEW_FILTER_TYPE
function ChocoboVM:SetOverviewFilterType(InFilter)
    if not InFilter then
        return 
    end
    
    self.CurFilterType = InFilter
    self.FilterAttrIconPath = self.FilterAttrIconPathCfg[self.CurFilterType]

    self.FilterBlueStarVMList:Clear()
    self.FilterRedStarVMList:Clear()

    local Data = self.AttrInfoList[self.CurFilterType - ChocoboDefine.OVERVIEW_FILTER_TYPE.FEATHER_VALUE]
    if Data == nil then
        return
    end

    local RedData = {}
    for i = 1, ChocoboMgr.GeneMaxStarNum do
        local TempData = {}
        if Data.GeneRed >= ChocoboMgr.GeneMaxStarNum then
            TempData.IsShwoImgStarM = true
        else
            TempData.IsShwoImgStarM = false
        end
        if i <= Data.GeneRed then
            TempData.IsShwoImgStarS = true
        else
            TempData.IsShwoImgStarS = false
        end
        table.insert(RedData, TempData)
    end
    local BlueData = {}
    for i = 1, ChocoboMgr.GeneMaxStarNum do
        local TempData = {}
        if Data.GeneBlue >= ChocoboMgr.GeneMaxStarNum then
            TempData.IsShwoImgStarM = true
        else
            TempData.IsShwoImgStarM = false
        end
        if i <= Data.GeneBlue then
            TempData.IsShwoImgStarS = true
        else
            TempData.IsShwoImgStarS = false
        end
        table.insert(BlueData, TempData)
    end
    self.FilterRedStarVMList:UpdateByValues(RedData)
    self.FilterBlueStarVMList:UpdateByValues(BlueData)
end

---SetSelect
---@param Value boolean
function ChocoboVM:SetSelect(Value)
    self.IsSelect = Value
end

---SetIsRacer
---@param Value boolean
function ChocoboVM:SetIsRacer(Value)
    self.IsRacer = Value
end 

---SetState
---@param Value number ProtoCS.ChocoboStatus
function ChocoboVM:SetState(Value)
    self.Status = Value
    self.IsLike = Value == ProtoCS.ChocoboStatus.StatusLike
end

return ChocoboVM