---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xieyuhang.
--- DateTime: 2023/12/14 15:55
---

local LuaClass = require("Core/LuaClass")
local UIViewModel = require("UI/UIViewModel")
local UIBindableList = require("UI/UIBindableList")
local ProtoCS = require("Protocol/ProtoCS")
local ChocoboDefine = require("Game/Chocobo/ChocoboDefine")
local ChocoboVMBase = require("Game/Chocobo/Life/VM/ChocoboVM")
local ChocoboSkillPanelVM = require("Game/Chocobo/Life/VM/ChocoboSkillPanelVM")
local ChocoboGenealogyPanelVM = require("Game/Chocobo/Life/VM/ChocoboGenealogyPanelVM")
local ChocoboTitlePanelVM = require("Game/Chocobo/Life/VM/ChocoboTitlePanelVM")
local ChocoboInfoAttrItemVM = require("Game/Chocobo/Life/VM/ChocoboInfoAttrItemVM")

local LSTR = nil
local ChocoboMgr = nil
local EventMgr = nil
-- 日志堆栈打印开关
local ENABLE_PRINT_TRACEBACK = false

---@class ChocoboMainVM : UIViewModel
local ChocoboMainVM = LuaClass(UIViewModel)

---Ctor
function ChocoboMainVM:Ctor()
    self.CurSelectEntryID = 0
    self.CurRaceEntryID = 0
    self.CurSelectGeneID = 0
    self.CurChildID = 0
    self.LastConditionStr = ""
    self.ChocoboViewModels = {}
    self.IsShowSimpleAttrMode = false
    self.IsShowAttrInfo = false
    self.IsChocoboVMListNotEmpty = false
    self.OverviewAttrVMList = UIBindableList.New( ChocoboInfoAttrItemVM )
end

function ChocoboMainVM:OnInit()
    self:Reset()
    self.ShowChocoboVMList = self:ResetBindableList(self.ShowChocoboVMList, ChocoboVMBase)
    self.BorrowedChocoboVMList = self:ResetBindableList(self.BorrowedChocoboVMList, ChocoboVMBase)
    self.MatesChocoboVMList = self:ResetBindableList(self.MatesChocoboVMList, ChocoboVMBase)
end

function ChocoboMainVM:OnBegin()
    LSTR = _G.LSTR
    ChocoboMgr = _G.ChocoboMgr
    EventMgr = _G.EventMgr
end

function ChocoboMainVM:Clear()
end

function ChocoboMainVM:OnEnd()
end

function ChocoboMainVM:OnShutdown()
    self.ShowChocoboVMList:Clear()
    self.BorrowedChocoboVMList:Clear()
    self.MatesChocoboVMList:Clear()
    self.OverviewAttrVMList:Clear()
    self.SkillPanelVM = nil
    self.GenePanelVM = nil
    self.TitlePanelVM = nil
    self:Reset()
end

function ChocoboMainVM:Reset()
    self.FilterType = ChocoboDefine.OVERVIEW_FILTER_TYPE.LEVEL
    self.OverviewFilterType = ChocoboDefine.OVERVIEW_FILTER_TYPE.LEVEL
    self.RentFilterType = ChocoboDefine.OVERVIEW_FILTER_TYPE.STAR
    self.MateFilterType = ChocoboDefine.OVERVIEW_FILTER_TYPE.STAR
    self.CurSelectEntryID = 0
    self.CurRaceEntryID = 0
    self.CurSelectGeneID = 0
    self.CurChildID = 0
    self.ChocoboViewModels = {}
    self.IsShowSimpleAttrMode = false
    self.IsShowAttrInfo = false
    self.IsChocoboVMListNotEmpty = false
    self.IsMating = false
    self.MatingTime = 0
    self.LastConditionStr = ""
    self.ScreenerState = false
end

---InitOverviewChocoboList
function ChocoboMainVM:InitOverviewChocoboList()
    self.ShowChocoboVMList:Clear()

    for __, ViewModel in pairs(self.ChocoboViewModels) do
        if ViewModel.Status ~= ProtoCS.ChocoboStatus.StatusMating then
            self.ShowChocoboVMList:Add(ViewModel)
        end
    end

    self.IsChocoboVMListNotEmpty = self.ShowChocoboVMList:Length() > 0
end

function ChocoboMainVM:UpdateOverviewChocobo()
    local IsMating = false
    local MatingTime = 0
    for __, ViewModel in pairs(self.ChocoboViewModels) do
        if ViewModel.Status == ProtoCS.ChocoboStatus.StatusMating then
            IsMating = true
            MatingTime = ViewModel.MatingTime
        end

        if self.CurSelectEntryID <= 0 and ViewModel.IsRacer then
            self.CurSelectEntryID = ViewModel.ChocoboID
        end
    end

    self.IsMating = IsMating
    self.MatingTime = MatingTime
end

---FilterShowChocoboVMList
---@param ConditionStr string
function ChocoboMainVM:FilterShowChocoboVMList(ConditionStr)
    self.ShowChocoboVMList:Clear()

    --去掉正在配种的 ProtoCS.ChocoboStatus.StatusMating = 3
    if string.isnilorempty(ConditionStr) then
        ConditionStr = "Item.Status ~= 3"
    else
        ConditionStr = ConditionStr .. " and " .. "Item.Status ~= 3"
    end

    for __, Item in pairs(self.ChocoboViewModels) do
        local ConditionFunc = assert(load("return function(Item) return " .. ConditionStr .. " end"))

        if ConditionFunc()(Item) then
            self.ShowChocoboVMList:Add(Item)
        end
    end
    
    self.LastConditionStr = ConditionStr
    self.ScreenerState = self.LastConditionStr ~= "Item.Status ~= 3"
    self.IsChocoboVMListNotEmpty = self.ShowChocoboVMList:Length() > 0
end

---InitBorrowChocoboList
function ChocoboMainVM:InitBorrowChocoboList()
    self.BorrowedChocoboVMList:Clear()
    for __, ViewModel in pairs(self.ChocoboViewModels) do
        if ViewModel.IsRent then
            self.BorrowedChocoboVMList:Add(ViewModel)
        end
    end
end

---GetBorrowCount
---@return number
function ChocoboMainVM:GetBorrowCount()
    local Count = 0
    for __, ViewModel in pairs(self.ChocoboViewModels) do
        if ViewModel.IsRent then
            Count = Count + 1
        end
    end
    return Count
end

-- 父母鸟只能有一个是租借的，如果选中的非租借的，也只能显示一个租借的
---InitMatesChocoboList
---@param ChocoboID number
function ChocoboMainVM:InitMatesChocoboList(ChocoboID)
    local VM = self:FindChocoboVM(ChocoboID)
    if VM == nil then
        return
    end

    self.MatesChocoboVMList:Clear()
    for __, ViewModel in pairs(self.ChocoboViewModels) do
        if ViewModel.Gender ~= VM.Gender and ViewModel.Status ~= ProtoCS.ChocoboStatus.StatusMating and ViewModel.RemainCount > 0 then
            if VM.IsRent then
                if not ViewModel.IsRent and ViewModel.Level >= ChocoboMgr.MatingLevel then
                    self.MatesChocoboVMList:Add(ViewModel)
                end
            else
                if ViewModel.IsRent then
                    self.MatesChocoboVMList:Add(ViewModel)
                elseif ViewModel.Level >= ChocoboMgr.MatingLevel then
                    self.MatesChocoboVMList:Add(ViewModel)
                end
            end
        end
    end
end

---GetChocoboViewModels
---@return table
function ChocoboMainVM:GetChocoboViewModels()
    return self.ChocoboViewModels
end

---GetSkillPanelVM
---@return table
function ChocoboMainVM:GetSkillPanelVM()
    if self.SkillPanelVM == nil then
        self.SkillPanelVM = ChocoboSkillPanelVM.New()
    end

    return self.SkillPanelVM
end

---GetGenePanelVM
---@return table
function ChocoboMainVM:GetGenePanelVM()
    if self.GenePanelVM == nil then
        self.GenePanelVM = ChocoboGenealogyPanelVM.New()
    end

    return self.GenePanelVM
end

---GetTitlePanelVM
---@return table
function ChocoboMainVM:GetTitlePanelVM()
    if self.TitlePanelVM == nil then
        self.TitlePanelVM = ChocoboTitlePanelVM.New()
    end

    return self.TitlePanelVM
end

---ChangeRaceEntryVM
---@param ChocoboID number
function ChocoboMainVM:ChangeRaceEntryVM(ChocoboID)
    if self.CurRaceEntryID ~= 0 then
        local ChocoboVM = self:FindChocoboVM(self.CurRaceEntryID)
        if ChocoboVM ~= nil then
            ChocoboVM:SetIsRacer(false)
        end
    end
    self.CurRaceEntryID = ChocoboID
    local ChocoboVM = self:FindChocoboVM(self.CurRaceEntryID)
    if ChocoboVM ~= nil then
        ChocoboVM:SetIsRacer(true)
    end
end

---ChangeOverviewSelectID
---@param ChocoboID number
function ChocoboMainVM:ChangeOverviewSelectID(ChocoboID)
    self.CurSelectEntryID = ChocoboID
end

function ChocoboMainVM:SetCurRaceEntryID(ChocoboID)
    self.CurRaceEntryID = ChocoboID
end

function ChocoboMainVM:GetCurRaceEntryID()
    return self.CurRaceEntryID
end

function ChocoboMainVM:SetCurChildID(ChocoboID)
    self.CurChildID = ChocoboID
end

function ChocoboMainVM:GetCurChildID()
    if self.CurChildID > 0 then
        return self.CurChildID
    end
    
    local List = ChocoboMgr:GetChocoboAllInfoList()
    for __, Value in pairs(List) do
        if Value.Status == ProtoCS.ChocoboStatus.StatusMating then
            self:SetCurChildID(Value.ID)
            return self.CurChildID
        end
    end
    return self.CurChildID
end

---ChangeOverviewData
---@param ChocoboVM table
function ChocoboMainVM:ChangeOverviewData(ChocoboVM)
    self.OverviewAttrVMList:Clear()
    if ChocoboVM ~= nil then
        self.OverviewAttrVMList:UpdateByValues(ChocoboVM.AttrInfoList)
    end
end

---GetSelectedChocoboID
---@return number
function ChocoboMainVM:GetSelectedChocoboID()
    return self.CurSelectEntryID
end

---GetSelectedIndex
---@return number
function ChocoboMainVM:GetSelectedIndex()
    local CurSelectIndex = 1
    if self.CurSelectEntryID ~= nil and self.ShowChocoboVMList ~= nil then
        for Index, Item in pairs(self.ShowChocoboVMList.Items) do
            if Item.ChocoboID == self.CurSelectEntryID then
                return Index
            end
        end
    end
    return CurSelectIndex
end


---ChangeCurSelectGeneID
---@param ChocoboID number
function ChocoboMainVM:ChangeCurSelectGeneID(ChocoboID)
    self.CurSelectGeneID = ChocoboID
end

---UpdateSingleInfo
---@param Infos table
function ChocoboMainVM:UpdateSingleInfo(Infos)
    local ViewModel = self:FindChocoboVM(Infos.ID)

    if ViewModel == nil then return end
    ViewModel:UpdateVM(Infos)

    if Infos.Outing then
        ChocoboMainVM:ChangeRaceEntryVM(Infos.ID)
    end
end

---FindChocoboVMInternal
---@param ChocoboID number
function ChocoboMainVM:FindChocoboVMInternal(ChocoboID)
    if nil ~= self.ChocoboViewModels then
        return self.ChocoboViewModels[ChocoboID]
    end
end

---FindMatesChocoboVM
---@param ChocoboID number
---@return table
function ChocoboMainVM:FindMatesChocoboVM(ChocoboID)
    local VM = self:FindChocoboVM(ChocoboID)
    if VM == nil then return nil end

    local function IsSuitableMate(CandidateVM)
        if CandidateVM.Gender == VM.Gender then return false end
        if CandidateVM.Status == ProtoCS.ChocoboStatus.StatusMating then return false end
        if CandidateVM.RemainCount <= 0 then return false end

        if VM.IsRent then
            return not CandidateVM.IsRent and CandidateVM.Level >= ChocoboMgr.MatingLevel
        else
            return CandidateVM.IsRent or CandidateVM.Level >= ChocoboMgr.MatingLevel
        end
    end

    for __, CandidateVM in pairs(ChocoboMainVM:GetChocoboViewModels()) do
        if IsSuitableMate(CandidateVM) then
            return CandidateVM
        end
    end

    return nil
end

---FindChocoboVM
---@param ChocoboID number
---@return table
function ChocoboMainVM:FindChocoboVM(ChocoboID)
    if nil == ChocoboID or ChocoboID == 0 or nil == self.ChocoboViewModels then
        _G.FLOG_WARNING(string.format("ChocoboMainVM.FindChocoboVM: failed to find data, ChocoboID=%s", tostring(ChocoboID)))

        if ENABLE_PRINT_TRACEBACK then
            _G.FLOG_WARNING(_G.CommonUtil.GetLuaTraceback())
        end
        
        return nil
    end

    local ViewModel = self:FindChocoboVMInternal(ChocoboID)
    if nil == ViewModel then
        local Data = ChocoboMgr:GetChocoboInfoByID(ChocoboID)
        if Data ~= nil then
            ViewModel = ChocoboVMBase.New()
            ViewModel:UpdateVM(Data)
            self.ChocoboViewModels[ChocoboID] = ViewModel
        end
    end

    return ViewModel
end

-- 获得当前代鸟总数(不包括租借的陆行鸟)
---GetChocoboCount
---@param Generation number
---@return number
function ChocoboMainVM:GetChocoboCount(Generation)
    local Count = 0
    for __, ViewModel in pairs(self.ChocoboViewModels) do
        if ViewModel.Generation == Generation and not ViewModel.IsRent then
            Count = Count + 1
        end
    end
    return Count
end

--当前正在配种
---IsMatingStatus
---@return boolean
function ChocoboMainVM:IsMatingStatus()
    return self.IsMating
end

function ChocoboMainVM:SetMatingStatus(Value)
    self.IsMating = Value
end

---FindMatingChocoboVM
function ChocoboMainVM:FindMatingChocoboVM()
    for __, ViewModel in pairs(self.ChocoboViewModels) do
        if ViewModel.Status == ProtoCS.ChocoboStatus.StatusMating then
            return ViewModel
        end
    end
    return nil
end

---DeleteChocoboVM
---@param ChocoboID number
function ChocoboMainVM:DeleteChocoboVM(ChocoboID)
    self.ChocoboViewModels[ChocoboID] = nil
end

---SetCurFilterType
---@param InFilterType number ChocoboDefine.OVERVIEW_FILTER_TYPE
function ChocoboMainVM:SetCurFilterType(InFilterType)
    if not InFilterType then
        return
    end
    
    self.OverviewFilterType = InFilterType
    self.FilterType = self.OverviewFilterType
end

function ChocoboMainVM:ChangeShowSimpleAttrMode()
    self.IsShowSimpleAttrMode = not self.IsShowSimpleAttrMode
end

function ChocoboMainVM:RefreshByCurFilterType()
    local PredicateEnum = {
        [ChocoboDefine.OVERVIEW_FILTER_TYPE.LEVEL] = ChocoboDefine.SortByLevel,
        [ChocoboDefine.OVERVIEW_FILTER_TYPE.FEATHER_VALUE] = ChocoboDefine.SortByFeatherValue,
        [ChocoboDefine.OVERVIEW_FILTER_TYPE.MAX_SPEED] = ChocoboDefine.SortByMaxSpeed,
        [ChocoboDefine.OVERVIEW_FILTER_TYPE.SPRINT_SPEED] = ChocoboDefine.SortBySprintSpeed,
        [ChocoboDefine.OVERVIEW_FILTER_TYPE.ACCELERATION] = ChocoboDefine.SortByAcceleration,
        [ChocoboDefine.OVERVIEW_FILTER_TYPE.STAMINA] = ChocoboDefine.SortByStamina,
        [ChocoboDefine.OVERVIEW_FILTER_TYPE.SKILL_STRENGTH] = ChocoboDefine.SortBySkillStrenth,
        [ChocoboDefine.OVERVIEW_FILTER_TYPE.STAR] = ChocoboDefine.SortByStar,
    }
    local Predicate = PredicateEnum[self.FilterType]
    if Predicate == nil then
        return
    end
    self.ShowChocoboVMList:Sort(Predicate)
end

---SetCurRentFilterType
---@param InFilterType number ChocoboDefine.OVERVIEW_FILTER_TYPE
function ChocoboMainVM:SetCurRentFilterType(InFilterType)
    self.RentFilterType = InFilterType
    self.FilterType = self.RentFilterType
end

function ChocoboMainVM:RefreshRentByFilter()
    local PredicateEnum = {
        [ChocoboDefine.OVERVIEW_FILTER_TYPE.LEVEL] = ChocoboDefine.SortByLevel,
        [ChocoboDefine.OVERVIEW_FILTER_TYPE.FEATHER_VALUE] = ChocoboDefine.SortByFeatherValue,
        [ChocoboDefine.OVERVIEW_FILTER_TYPE.MAX_SPEED] = ChocoboDefine.SortByMaxSpeed,
        [ChocoboDefine.OVERVIEW_FILTER_TYPE.SPRINT_SPEED] = ChocoboDefine.SortBySprintSpeed,
        [ChocoboDefine.OVERVIEW_FILTER_TYPE.ACCELERATION] = ChocoboDefine.SortByAcceleration,
        [ChocoboDefine.OVERVIEW_FILTER_TYPE.STAMINA] = ChocoboDefine.SortByStamina,
        [ChocoboDefine.OVERVIEW_FILTER_TYPE.SKILL_STRENGTH] = ChocoboDefine.SortBySkillStrenth,
        [ChocoboDefine.OVERVIEW_FILTER_TYPE.STAR] = ChocoboDefine.SortByStar,
    }
    local Predicate = PredicateEnum[self.FilterType]
    if Predicate == nil then
        return
    end
    self.BorrowedChocoboVMList:Sort(Predicate)
end

---SetCurMateFilterType
---@param InFilterType number ChocoboDefine.OVERVIEW_FILTER_TYPE
function ChocoboMainVM:SetCurMateFilterType(InFilterType)
    self.MateFilterType = InFilterType
end

function ChocoboMainVM:RefreshMateByFilter()
    local PredicateEnum = {
        [ChocoboDefine.OVERVIEW_FILTER_TYPE.LEVEL] = ChocoboDefine.SortByLevel,
        [ChocoboDefine.OVERVIEW_FILTER_TYPE.FEATHER_VALUE] = ChocoboDefine.SortByFeatherValue,
        [ChocoboDefine.OVERVIEW_FILTER_TYPE.MAX_SPEED] = ChocoboDefine.SortByMaxSpeed,
        [ChocoboDefine.OVERVIEW_FILTER_TYPE.SPRINT_SPEED] = ChocoboDefine.SortBySprintSpeed,
        [ChocoboDefine.OVERVIEW_FILTER_TYPE.ACCELERATION] = ChocoboDefine.SortByAcceleration,
        [ChocoboDefine.OVERVIEW_FILTER_TYPE.STAMINA] = ChocoboDefine.SortByStamina,
        [ChocoboDefine.OVERVIEW_FILTER_TYPE.SKILL_STRENGTH] = ChocoboDefine.SortBySkillStrenth,
        [ChocoboDefine.OVERVIEW_FILTER_TYPE.STAR] = ChocoboDefine.SortByStar,
    }
    local Predicate = PredicateEnum[self.MateFilterType]
    if Predicate == nil then
        return
    end
    self.MatesChocoboVMList:Sort(Predicate)
end

---SetIsShowAttrInfo
---@param Value boolean
function ChocoboMainVM:SetIsShowAttrInfo(Value)
    self.IsShowAttrInfo = Value
end

return ChocoboMainVM