---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2024/10/22 16:20
---

local LuaClass = require("Core/LuaClass")
local UIViewModel = require("UI/UIViewModel")
local EventID = require("Define/EventID")
local CommScreenerClassItemVM = require("Game/Common/View/Screener/CommScreenerClassItemVM")

local LSTR = nil

---@class ChocoboScreenerVM : UIViewModel
local ChocoboScreenerVM = LuaClass(UIViewModel)

---Ctor
function ChocoboScreenerVM:Ctor()
    LSTR = _G.LSTR
    self.GenerationListVMList = self:ResetBindableList(self.GenerationListVMList, CommScreenerClassItemVM)
    self.OwnerListVMList = self:ResetBindableList(self.OwnerListVMList, CommScreenerClassItemVM)
    self.GenderListVMList = self:ResetBindableList(self.GenderListVMList, CommScreenerClassItemVM)

    self:Reset()
end

function ChocoboScreenerVM:Reset()
    self.GenerationListVMList:Clear()
    self.OwnerListVMList:Clear()
    self.GenderListVMList:Clear()

    local ListData = {
        [1] = { ScreenerName = "9", Filtrate = "Item.Generation == 9" },
        [2] = { ScreenerName = "8", Filtrate = "Item.Generation == 8" },
        [3] = { ScreenerName = "7", Filtrate = "Item.Generation == 7" },
        [4] = { ScreenerName = "6", Filtrate = "Item.Generation == 6" },
        [5] = { ScreenerName = "5", Filtrate = "Item.Generation == 5" },
        [6] = { ScreenerName = "4", Filtrate = "Item.Generation == 4" },
        [7] = { ScreenerName = "3", Filtrate = "Item.Generation == 3" },
        [8] = { ScreenerName = "2", Filtrate = "Item.Generation == 2" },
        [9] = { ScreenerName = "1", Filtrate = "Item.Generation == 1" },
    }
    self.GenerationListVMList.UpdateVMParams = {ShowTag = true}
    self.GenerationListVMList:UpdateByValues(ListData)

    ListData = {
        -- LSTR string: 本人
        [1] = { ScreenerName = LSTR(420084), Filtrate = "Item.IsRent == false" },
        -- LSTR string: 租借
        [2] = { ScreenerName = LSTR(420085), Filtrate = "Item.IsRent == true" },
    }
    self.OwnerListVMList.UpdateVMParams = {ShowTag = true}
    self.OwnerListVMList:UpdateByValues(ListData)

    ListData = {
        -- LSTR string: 雌性
        [1] = { ScreenerName = LSTR(420086), Filtrate = "Item.Gender == 1" },
        -- LSTR string: 雄性
        [2] = { ScreenerName = LSTR(420087), Filtrate = "Item.Gender == 0" },
    }
    self.GenderListVMList.UpdateVMParams = {ShowTag = true}
    self.GenderListVMList:UpdateByValues(ListData)
end

function ChocoboScreenerVM:ResetScreener()
    for i = 1, self.GenerationListVMList:Length() do
        local ItemVM = self.GenerationListVMList:Get(i)
        if ItemVM then
            ItemVM:ResetSelected()
        end
    end

    self:ResetOwnerScreener()
    self:ResetGenderScreener()
end

function ChocoboScreenerVM:ResetOwnerScreener()
    for i = 1, self.OwnerListVMList:Length() do
        local ItemVM = self.OwnerListVMList:Get(i)
        if ItemVM then
            ItemVM:ResetSelected()
        end
    end
end

function ChocoboScreenerVM:ResetGenderScreener()
    for i = 1, self.GenderListVMList:Length() do
        local ItemVM = self.GenderListVMList:Get(i)
        if ItemVM then
            ItemVM:ResetSelected()
        end
    end
end

function ChocoboScreenerVM:SureScreener()
    local ConditionStr = self:GetConditionStr()
    _G.ChocoboMainVM:FilterShowChocoboVMList(ConditionStr)
    _G.EventMgr:SendEvent(EventID.ChocoboOverviewItemSelect, 1)
end

function ChocoboScreenerVM:GetConditionStr()
    local function BuildConditionGroup(ListVM, LogicalConnector)
        local Conditions = {}
        for _, ItemVM in pairs(ListVM:GetItems()) do
            if ItemVM and ItemVM.SelectedNodeVisible and ItemVM.Value.Filtrate then
                table.insert(Conditions, ItemVM.Value.Filtrate)
            end
        end

        if #Conditions == 0 then
            return nil
        end

        -- 当只有一个条件时不需要括号
        if #Conditions == 1 then
            return Conditions[1]
        end

        return string.format("(%s)", table.concat(Conditions, " "..LogicalConnector.." "))
    end

    -- 按业务优先级排序的条件组
    local ConditionGroups = {
        { List = self.GenerationListVMList, Connector = "or" },
        { List = self.OwnerListVMList,      Connector = "or" },
        { List = self.GenderListVMList,     Connector = "or" }
    }

    -- 构建带优先级的条件表达式
    local FinalConditions = {}
    for _, Group in ipairs(ConditionGroups) do
        local ConditionPart = BuildConditionGroup(Group.List, Group.Connector)
        if ConditionPart then
            table.insert(FinalConditions, ConditionPart)
        end
    end

    -- 构建最终条件字符串
    local ConditionStr = ""
    if #FinalConditions > 0 then
        -- 用 AND 连接不同条件组
        ConditionStr = table.concat(FinalConditions, " and ")

        -- 当存在多组条件时添加全局括号保证优先级
        if #FinalConditions > 1 then
            ConditionStr = "(" .. ConditionStr .. ")"
        end
    end
    
    return ConditionStr
end

return ChocoboScreenerVM