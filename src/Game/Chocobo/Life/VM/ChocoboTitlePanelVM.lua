---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2024/1/10 16:41
---

local LuaClass = require("Core/LuaClass")
local UIViewModel = require("UI/UIViewModel")
local ChocoboDefine = require("Game/Chocobo/ChocoboDefine")
local ChocoboTitleCfg = require("TableCfg/ChocoboTitleCfg")
local ChocoboTitleWinItemVM = require("Game/Chocobo/Life/VM/ChocoboTitleWinItemVM")
local ChocoboTitleProbarItemVM = require("Game/Chocobo/Life/VM/ChocoboTitleProbarItemVM")
local ProtoRes = require("Protocol/ProtoRes")

local LSTR = nil

---@class ChocoboTitlePanelVM : UIViewModel
local ChocoboTitlePanelVM = LuaClass(UIViewModel)

---Ctor
function ChocoboTitlePanelVM:Ctor()
    LSTR = _G.LSTR
    self.CurTitleID = 0
    self.RewardID = ProtoRes.SCORE_TYPE.SCORE_TYPE_KING_DEE
    self.TitleCounter = {}
    self.TitleAwards = {}
    self.TitleSubMission = {}
    self.TextContent = ""
    self.TextProgress = ""
    self.TextNum = ""
    self.IsRewardGet = false
    self.IsShowMask = false
    self.IsShowNum = true
    self.CurTitleText = ""
    self.TitleProgressText = ""
    self.SelectNodeIndex = 1
    self.CurSelectTitleID = 0
    self.CurTitleState = ChocoboDefine.TITLE_REWARD_STATE.GO_ON
    self.TitleNodeVMList = self:ResetBindableList(self.TitleNodeVMList, ChocoboTitleProbarItemVM)
    self.TitleMissionVMList = self:ResetBindableList(self.TitleMissionVMList, ChocoboTitleWinItemVM)
end

function ChocoboTitlePanelVM:UpdateTitleCounter(TitleCounter)
    self.TitleCounter = TitleCounter
end

function ChocoboTitlePanelVM:UpdateTitleAwards(TitleAwards)
    self.TitleAwards = TitleAwards
end

function ChocoboTitlePanelVM:UpdateTitleData()
    local AllCfg = ChocoboTitleCfg:FindAllCfg()
    -- LSTR string: 骑士荣誉Ⅰ级
    self.CurTitleText = LSTR(420102)
    local MaxNum = #AllCfg
    for i = 1, MaxNum do
        local Data = AllCfg[i]
        local State = self:GetTitleState(Data.ID)
        if State == ChocoboDefine.TITLE_REWARD_STATE.ALREADY_GET then
            self.CurTitleID = Data.ID
            self.CurTitleText = Data.Name
            self.SelectNodeIndex = i + 1
            if self.SelectNodeIndex >= MaxNum then
                self.SelectNodeIndex = MaxNum
            end
        end

        local SubNum = 0
        for j = 1, #Data.Mission do
            if Data.Mission[j].StatisticID > 0 then
                SubNum = SubNum + 1
            end
        end
        self.TitleSubMission[Data.ID] = SubNum
    end
end

function ChocoboTitlePanelVM:UpdateNode()
    self.TitleNodeVMList:Clear()

    local AllCfg = ChocoboTitleCfg:FindAllCfg()
    local NodeList = {}
    local AlreadyGetNum = 1
    local AllTitleNum = 0

    for i = 1, #AllCfg do
        local Data = AllCfg[i]
        local State = self:GetTitleState(Data.ID)
        local Progress = 0
        AllTitleNum = AllTitleNum + 1
        if State == ChocoboDefine.TITLE_REWARD_STATE.ALREADY_GET then
            Progress = 1
            AlreadyGetNum = AlreadyGetNum + 1
            self.CurTitleID = Data.ID
        end

        local NodeTemp = {}
        NodeTemp.ID = Data.ID
        NodeTemp.Progress = Progress
        NodeTemp.NodeName = Data.Name
        NodeTemp.State = State
        NodeTemp.IsGet = State == ChocoboDefine.TITLE_REWARD_STATE.ALREADY_GET
        NodeTemp.IsShowRedPoint = State == ChocoboDefine.TITLE_REWARD_STATE.CAN_REWARD
        table.insert(NodeList, NodeTemp)
    end

    self.TitleNodeVMList:UpdateByValues(NodeList)
    -- LSTR string: 当前等级：%d级
    self.TitleProgressText = string.format(LSTR(420103), string.NumberToRoman(AlreadyGetNum))
end

function ChocoboTitlePanelVM:UpdateContent()
    self.TitleMissionVMList:Clear()

    local AllCfg = ChocoboTitleCfg:FindAllCfg()
    local CurSelectCfg = AllCfg[self.SelectNodeIndex]
    if CurSelectCfg == nil then
        return
    end

    self.CurSelectTitleID = CurSelectCfg.ID
    local MissionList = {}
    local FinishNum = 0

    for i = 1, #CurSelectCfg.Mission do
        local MissionTemp = {}
        local StatisticID = CurSelectCfg.Mission[i].StatisticID
        local Counter = 0
        local MaxCounter = CurSelectCfg.Mission[i].Param[1]
        local ButtonState = ChocoboDefine.TITLE_REWARD_STATE.GO_ON
        if self.TitleCounter[StatisticID] ~= nil then
            Counter = self.TitleCounter[StatisticID]
        end
        if Counter >= MaxCounter then
            Counter = MaxCounter
            ButtonState = ChocoboDefine.TITLE_REWARD_STATE.CAN_REWARD
            FinishNum = FinishNum + 1
        end

        local MissionAwards = self:GetMissionAwards(CurSelectCfg.ID)
        if MissionAwards ~= nil then
            for __, Value in ipairs(MissionAwards) do
                if Value + 1 == i then
                    ButtonState = ChocoboDefine.TITLE_REWARD_STATE.ALREADY_GET
                end
            end
        end

        MissionTemp.RewardID = ProtoRes.SCORE_TYPE.SCORE_TYPE_KING_DEE
        MissionTemp.ID = CurSelectCfg.ID
        MissionTemp.Index = i
        MissionTemp.IconPath = ""
        MissionTemp.StatisticID = CurSelectCfg.Mission[i].StatisticID
        MissionTemp.Type = CurSelectCfg.Mission[i].Type
        MissionTemp.TextContent = string.format(CurSelectCfg.Mission[i].Desc, CurSelectCfg.Mission[i].Param[1])
        MissionTemp.TextProgress = string.format("%d/%d", Counter, MaxCounter)
        MissionTemp.TextNum = tostring(CurSelectCfg.Mission[i].Reward)
        MissionTemp.IsRewardGet = ButtonState == ChocoboDefine.TITLE_REWARD_STATE.ALREADY_GET
        MissionTemp.IsShowMask = ButtonState == ChocoboDefine.TITLE_REWARD_STATE.ALREADY_GET
        MissionTemp.ButtonState = ButtonState
        table.insert(MissionList, MissionTemp)
    end

    self.CurTitleState = self:GetTitleState(self.CurSelectTitleID)
    if self.CurTitleState == ChocoboDefine.TITLE_REWARD_STATE.LAST_NOT_COMPLETED then
        self.TextContent = string.format(LSTR(420104), CurSelectCfg.Name)-- LSTR string: 升级任务：进阶%s任务
        self.TextProgress = LSTR(420165)-- LSTR string: 领取前置阶段骑师荣誉奖励后开启本阶段任务列表
    elseif self.CurTitleState == ChocoboDefine.TITLE_REWARD_STATE.GO_ON then
        self.TextContent = string.format(LSTR(420104), CurSelectCfg.Name)-- LSTR string: 升级任务：进阶%s任务
        self.TextProgress = string.format(LSTR(420105), FinishNum, self.TitleSubMission[self.CurSelectTitleID])-- LSTR string: 当前完成 %d/%d
        self.TitleMissionVMList:UpdateByValues(MissionList)
    elseif self.CurTitleState == ChocoboDefine.TITLE_REWARD_STATE.CAN_REWARD then
        self.TextContent = LSTR(420106)-- LSTR string: 已满级
        self.TextProgress = string.format(LSTR(420105), FinishNum, self.TitleSubMission[self.CurSelectTitleID])-- LSTR string: 当前完成 %d/%d
        self.TitleMissionVMList:UpdateByValues(MissionList)
    else
        self.TextContent = LSTR(420106)-- LSTR string: 已满级
        self.TextProgress = ""
        self.TitleMissionVMList:UpdateByValues(MissionList)
    end
    self.RewardID = CurSelectCfg.RewardID
    self.TextNum = tostring(CurSelectCfg.RewardNum)
    self.IsRewardGet = self.CurTitleState == ChocoboDefine.TITLE_REWARD_STATE.ALREADY_GET
    self.IsShowMask = self.CurTitleState == ChocoboDefine.TITLE_REWARD_STATE.ALREADY_GET
end

function ChocoboTitlePanelVM:UpdateMissionAward(TitleID, Mission)
    if TitleID ~= self.CurSelectTitleID then
        return
    end

    local NodeVM = self.TitleMissionVMList:Find(function(Element)
        return Element.Index == Mission + 1
    end)
    if NodeVM ~= nil then
        NodeVM:UpdateState(ChocoboDefine.TITLE_REWARD_STATE.ALREADY_GET)
    end
end

function ChocoboTitlePanelVM:UpdateTitleAward(TitleID, State)
    self:UpdateNode()
    local TitleCfg = ChocoboTitleCfg:FindCfgByKey(TitleID)
    self.CurTitleID = TitleID
    self.CurTitleText = TitleCfg.Name
    self.CurTitleState = State
    self.IsRewardGet = self.CurTitleState == ChocoboDefine.TITLE_REWARD_STATE.ALREADY_GET
    self.IsShowMask = self.CurTitleState == ChocoboDefine.TITLE_REWARD_STATE.ALREADY_GET
end

function ChocoboTitlePanelVM:GetMissionAwards(TitleID)
    for __, Value in ipairs(self.TitleAwards) do
        if Value.ID == TitleID then
            return Value.MissionAwards
        end
    end

    return nil
end

function ChocoboTitlePanelVM:HasReceivedAward(ID)
    for _, Value in ipairs(self.TitleAwards or {}) do
        if Value.ID == ID and Value.AwardGet then
            return true
        end
    end
    return false
end

function ChocoboTitlePanelVM:GetTitleState(TitleId)
    -- 基础配置校验
    local TitleCfg = ChocoboTitleCfg:FindCfgByKey(TitleId)
    if not TitleCfg then
        return ChocoboDefine.TITLE_REWARD_STATE.GO_ON
    end

    -- 状态1：已领取状态
    if self:HasReceivedAward(TitleId) then
        return ChocoboDefine.TITLE_REWARD_STATE.ALREADY_GET
    end

    -- 获取全量配置最小ID
    local MinId = self:GetMinTitleId()

    -- 状态判断分支
    if TitleId == MinId then
        -- 第一条称号的特殊处理
        return self:GetFirstTitleState(TitleCfg)
    else
        -- 非第一条称号的标准处理
        return self:GetNormalTitleState(TitleId, TitleCfg, MinId)
    end
end

function ChocoboTitlePanelVM:GetMinTitleId()
    local AllCfg = ChocoboTitleCfg:FindAllCfg() or {}
    local MinId = math.huge
    for _, Cfg in ipairs(AllCfg) do
        MinId = math.min(MinId, Cfg.ID)
    end
    return MinId
end

function ChocoboTitlePanelVM:GetFirstTitleState(TitleCfg)
    local CurrentProgress = self:CalculateMissionProgress(TitleCfg)
    local Required = self.TitleSubMission[TitleCfg.ID] or 0

    return CurrentProgress >= Required
            and ChocoboDefine.TITLE_REWARD_STATE.CAN_REWARD
            or ChocoboDefine.TITLE_REWARD_STATE.GO_ON
end

function ChocoboTitlePanelVM:GetNormalTitleState(TitleId, TitleCfg, MinId)
    -- 检查前置任务完成状态
    for ID = MinId, TitleId - 1 do
        -- 状态2：存在未领取的前置任务
        if not self:HasReceivedAward(ID) then
            return ChocoboDefine.TITLE_REWARD_STATE.LAST_NOT_COMPLETED
        end

        -- 状态3：存在未完成的前置任务
        local PrevCfg = ChocoboTitleCfg:FindCfgByKey(ID)
        local PrevRequired = self.TitleSubMission[ID] or 0
        if self:CalculateMissionProgress(PrevCfg) < PrevRequired then
            return ChocoboDefine.TITLE_REWARD_STATE.LAST_NOT_COMPLETED
        end
    end

    -- 状态4/5：判断当前任务条件
    local CurrentProgress = self:CalculateMissionProgress(TitleCfg)
    local CurrentRequired = self.TitleSubMission[TitleId] or 0

    return CurrentProgress >= CurrentRequired
            and ChocoboDefine.TITLE_REWARD_STATE.CAN_REWARD
            or ChocoboDefine.TITLE_REWARD_STATE.GO_ON
end

function ChocoboTitlePanelVM:CalculateMissionProgress(Cfg)
    local Count = 0
    if Cfg.Mission then
        for _, Mission in ipairs(Cfg.Mission) do
            local StatisticID = Mission.StatisticID
            local Required = Mission.Param[1]
            local Current = self.TitleCounter[StatisticID] or 0
            Count = Current >= Required and Count + 1 or Count
        end
    end
    return Count
end


function ChocoboTitlePanelVM:SetSelectNodeIndex(Value)
    self.SelectNodeIndex = Value
end

return ChocoboTitlePanelVM
