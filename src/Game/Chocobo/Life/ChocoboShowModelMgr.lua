---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2024/4/15 14:19
---

local MgrBase = require("Common/MgrBase")
local LuaClass = require("Core/LuaClass")
local EventID = require("Define/EventID")
local ModelMajorController = require("Game/Model/Actor/ModelMajorController")
local ModelChocoboController = require("Game/Model/Actor/ModelChocoboController")
local ModelCameraController = require("Game/Model/Camera/ModelCameraController")
local StageUniverseController = require("Game/Model/Stage/StageUniverseController")
local ChocoboModelShowCfg = require("TableCfg/ChocoboModelShowCfg")
local RideRaceCfg = require("TableCfg/RideRaceCfg")
local RideCfg = require("TableCfg/RideCfg")
local ChocoboDefine = require("Game/Chocobo/ChocoboDefine")
local ProtoRes = require("Protocol/ProtoRes")
local BuddyEquipCfg = require("TableCfg/BuddyEquipCfg")
local MajorUtil = require("Utils/MajorUtil")
local ModelDefine = require("Game/Model/Define/ModelDefine")
local ObjectGCType = require("Define/ObjectGCType")
local CommonUtil = require("Utils/CommonUtil")
local ProtoCommon = require("Protocol/ProtoCommon")
local ActorUtil = require("Utils/ActorUtil")
local FMath = _G.UE.UKismetMathLibrary

local EquipmentBGPath = "Class'/Game/UI/Render2D/Equipment/BP_EquipmentBackground.BP_EquipmentBackground_C'"

---@class ChocoboShowModelMgr : MgrBase
---UI上显示模型的Mgr, 数据和View分离，用于多个界面共用一个场景和模型以及预加载
local ChocoboShowModelMgr = LuaClass(MgrBase)

function ChocoboShowModelMgr:Ctor()
    self.CurUIType = 1
    self.CommGesture = nil
    self.OnCreateSuccessCallBack = nil
    self.UpdateChocoboModelCallBack = nil
    self.StainID = 1
    self.Armor = nil
    self.IsMajorCreate = false
    self.IsChocoboCreate = false
    self.ChocoboEntityID = -1
    self.bEnableRotator = false
    self.SingleClick = nil
    self.AutoRotateVel = 0.5
    self.LastDragX = 0
    self.IsRotateAroundPoint = true
    self.LightLevelID = nil
    self.LightPresetRef = nil
    self.IsChocoboModelLoading = false
    self.RequestQueue = {}
    self.ImageRole = nil
end

function ChocoboShowModelMgr:OnInit()
    self.CurUIType = ProtoRes.CHOCOBO_MODE_SHOW_UI_TYPE.CHOCOBO_MODE_SHOW_UITYPE_INFO
    self.PlayerPos = ModelDefine.DefaultLocation
    self.ChocoboPos = ModelDefine.DefaultLocation
end

function ChocoboShowModelMgr:OnBegin()

end

function ChocoboShowModelMgr:OnEnd()
    self:OnHide()
end

function ChocoboShowModelMgr:OnShutdown()
end

function ChocoboShowModelMgr:OnRegisterGameEvent()
end

function ChocoboShowModelMgr:OnHide()
    _G.HUDMgr:SetIsDrawHUD(true)
    
    self.CommGesture = nil
    self.PlayerPos = ModelDefine.DefaultLocation
    self.ChocoboPos = ModelDefine.DefaultLocation
    self.OnCreateSuccessCallBack = nil
    self.UpdateChocoboModelCallBack = nil
    self.StainID = 1
    self.Armor = nil
    self.IsMajorCreate = false
    self.IsChocoboCreate = false
    self.ChocoboEntityID = -1
    self.IsInit = false
    self.bEnableRotator = false
    self.SingleClick = nil
    self.AutoRotateVel = 0.5
    self.LastDragX = 0
    self.IsRotateAroundPoint = true
    self.LightPresetRef = nil
    self.IsChocoboModelLoading = false
    self.RequestQueue = {}
    self.LatestRequest = nil
    self.CallBackView = nil

    if self.ModelMajorController then
        self.ModelMajorController:Release()
    end
    if self.ModelChocoboController then
        self.ModelChocoboController:Release()
    end
    if self.StageUniverseController then
        self.StageUniverseController:Release()
    end

    if self.ModelCameraController then
        self.ModelCameraController:Switch(false)
    end

    -- 阴影
    self.ImageRole = nil
    if self.MajorShandowActor then
        _G.CommonUtil.DestroyActor(self.MajorShandowActor)
    end
    self.MajorShandowActor = nil
    -- 阴影End

    if self.BackgroundActor ~= nil then
        CommonUtil.DestroyActor(self.BackgroundActor)
    end
    self.BackgroundActor = nil

    -- 注銷组装完成的消息
    self:UnRegisterGameEvent(EventID.Avatar_AssembleAllEnd, self.OnAssembleAllEnd)
end

function ChocoboShowModelMgr:CreateModel(View, OnCreateSuccessCallBack)
    if self.IsInit and self:IsCreateFinish() == false then
        self.CallBackView = View
        self.OnCreateSuccessCallBack = OnCreateSuccessCallBack
        return
    end

    _G.HUDMgr:SetIsDrawHUD(false)
    -- 注册组装完成的消息
    self:RegisterGameEvent(EventID.Avatar_AssembleAllEnd, self.OnAssembleAllEnd)

    -- 初始化模型数据
    self.ModelCameraController = ModelCameraController.New()
    self.ModelMajorController = ModelMajorController.New()
    self.ModelChocoboController = ModelChocoboController.New()
    self.StageUniverseController = StageUniverseController.New()
    self.StageUniverseController:SetCreateFinish(self, self.OnCreateStageFinish)

    -- 创建模型
    self.IsMajorCreate = false
    self.IsChocoboCreate = false
    self.IsInit = true
    self.CallBackView = View
    self.OnCreateSuccessCallBack = OnCreateSuccessCallBack

    self.PlayerPos = ModelDefine.DefaultLocation
    self.ChocoboPos = ModelDefine.DefaultLocation
    local PlayerDir = 0
    local ChocoboDir = 0
    local Offset = _G.UE.FVector(0, -85, 108)
    local Length = 500
    local FOV = 0
    local RaceID = MajorUtil.GetMajorRaceID()
    local Cfg = ChocoboModelShowCfg:FindCfgByRaceIDAndUIType(RaceID, self.CurUIType)
    if Cfg ~= nil and Cfg[1] ~= nil then
        --self.PlayerPos = Cfg[1].PlayerPos
        --self.ChocoboPos = Cfg[1].ChocoboPos
        PlayerDir = Cfg[1].PlayerDir
        ChocoboDir = Cfg[1].ChocoboDir
        Offset = Cfg[1].Offset
        Length = Cfg[1].Length
        FOV = Cfg[1].FOV
    end

    self.ModelMajorController:Create(self.PlayerPos, _G.UE.FRotator(0, PlayerDir, 0))
    self.ChocoboEntityID = self.ModelChocoboController:Create(self.ChocoboPos, _G.UE.FRotator(0, ChocoboDir, 0))

    self.BackgroundActor = CommonUtil.SpawnActor(_G.ObjectMgr:GetClass(EquipmentBGPath), ModelDefine.DefaultLocation)
    self.BackgroundActor:SetActorHiddenInGame(false)

    self.StageUniverseController:Create(nil, nil, ModelDefine.ChocoboStagePath.Universe)
    self.StageUniverseController:BindUIComplexCharacter(self.ModelChocoboController:GetChildActor())
    self.ModelCameraController:EnableMove(false)

    self.ModelCameraController:SetSpringArmLocation(_G.UE.FVector(Offset.X, Offset.Y, Offset.Z), false)
    self.ModelCameraController:SetSpringArmCompArmLength(Length, false)
    self.ModelCameraController:SetCameraFOV(FOV)
end

function ChocoboShowModelMgr:OnCreateStageFinish()
    self.ModelCameraController:BindCameraActor(self.StageUniverseController:GetActor())
    self.ModelCameraController:Switch(true)
end

-- 模型组装完成
function ChocoboShowModelMgr:OnAssembleAllEnd(Params)
    local IsSelfMajorCreate = Params.ULongParam1 == 0 and Params.IntParam1 == _G.UE.EActorType.UIActor
    local IsSelfChocoCreate = Params.ULongParam1 == self.ChocoboEntityID
    if IsSelfMajorCreate then
        self.IsMajorCreate = true
    end

    if IsSelfChocoCreate then
        _G.FLOG_INFO("ChocoboShowModelMgr:OnAssembleAllEnd  OnAssembleAllEnd  OnAssembleAllEnd")
        self.IsChocoboModelLoading = false
        if self:IsCreateFinish() then
            -- 首次加载已经完成，陆行鸟换装的情况
            self:ProcessNextRequest()
        end
        
        self.IsChocoboCreate = true
        -- 重新组装之后又需要重置模型大小？
        if self.CurUIType == ProtoRes.CHOCOBO_MODE_SHOW_UI_TYPE.CHOCOBO_MODE_SHOW_UITYPE_INFO then
            self:ResetChocoboModelScale(true)
        end
    end

    if self.IsMajorCreate and self.IsChocoboCreate and (IsSelfChocoCreate or IsSelfMajorCreate) then
        if self.OnCreateSuccessCallBack then
            self:SetActorLOD(1)
            self.OnCreateSuccessCallBack(self.CallBackView)
            self.OnCreateSuccessCallBack = nil

            local ChocoboActor = self.ModelChocoboController:GetChildActor()
            local MajorActor = self.ModelMajorController:GetUIComplexCharacter()
            local Table = {}
            table.insert(Table, ChocoboActor)
            table.insert(Table, MajorActor)
            local ShadowPos = MajorActor:K2_GetActorLocation()
            ShadowPos.Z = ModelDefine.DefaultLocation.Z
            if self.MajorShandowActor then
                self.MajorShandowActor:K2_SetActorLocation(ShadowPos)
                --更新捕获Actor
                local AllActor = _G.UE.TArray(_G.UE.AActor)
                for _, value in pairs(Table) do
                    AllActor:Add(value)
                end
                self.MajorShandowActor.SceneCaptureComponent2D.ShowOnlyActors= AllActor
            else
                self.MajorShandowActor = ActorUtil.CreateUIActorShandow(_G.FWORLD(),
                Table, self.ImageRole, ShadowPos, ActorUtil.ShadowType.Chocobo, true)
            end
        end
    end
end

function ChocoboShowModelMgr:IsCreateFinish()
    return self.IsMajorCreate and self.IsChocoboCreate
end

function ChocoboShowModelMgr:SetUIType(InType)
    self.CurUIType = InType
end

function ChocoboShowModelMgr:SetImageRole(Image)
    self.ImageRole = Image
end

function ChocoboShowModelMgr:SetCameraFocusByChocobo()
    if not self:IsCreateFinish() then
        return
    end

    local ChocoboPos = self.ModelChocoboController:GetModelRotation()
    self.ModelCameraController:SetFocusPoint(ChocoboPos)
end

function ChocoboShowModelMgr:SetCameraFocusByCenter()
    self.ModelCameraController:SetFocusPoint(_G.UE.FVector(0, 0, 0))
end

function ChocoboShowModelMgr:SetChocoboColor(StainID)
    if StainID == nil then
        return
    end
    self.StainID = StainID
end

function ChocoboShowModelMgr:SetChocoboArmor(Armor)
    if Armor == nil then
        return
    end

    if self.Armor == nil then
        self.Armor = {}
    end

    self.Armor.Head = Armor.Head or 0
    self.Armor.Body = Armor.Body or 0
    self.Armor.Feet = Armor.Feet or 0
end

function ChocoboShowModelMgr:SetChocoboArmorByPos(Head, Body, Feet)
    if self.Armor == nil then
        self.Armor = {}
    end

    self.Armor.Head = Head or 0
    self.Armor.Body = Body or 0
    self.Armor.Feet = Feet or 0
end

function ChocoboShowModelMgr:ShowMajor(bShow)
    if self.ModelMajorController then
        self.ModelMajorController:HidePlayer(not bShow)
        self.IsRotateAroundPoint = bShow
    end
end

function ChocoboShowModelMgr:ShowChocobo(bShow)
    if self.ModelChocoboController == nil then
        return
    end
    local Actor = self.ModelChocoboController:GetChildActor()
    if Actor and _G.UE.UCommonUtil.IsObjectValid(Actor) then
        Actor:SetActorHiddenInGame(not bShow)
    end
end

---GetMajorAnimComp
function ChocoboShowModelMgr:GetMajorAnimComp()
    if self.ModelMajorController then
        local UIComplexCharacter = self.ModelMajorController:GetUIComplexCharacter()
        if UIComplexCharacter then
            local AnimComp = UIComplexCharacter:GetAnimationComponent()
            if AnimComp then
                return AnimComp
            end
        end
    end

    return nil
end

---GetChocoboAnimComp
function ChocoboShowModelMgr:GetChocoboAnimComp()
    if self.ModelChocoboController then
        local UIActor = self.ModelChocoboController:GetChildActor()
        if UIActor then
            local AnimComp = UIActor:GetAnimationComponent()
            if AnimComp then
                return AnimComp
            end
        end
    end

    return nil
end

---EnableRotator
---设置是否允许旋转
function ChocoboShowModelMgr:EnableRotator(bEnable)
    self.bEnableRotator = bEnable
end

--需要LOD强制设置为0时，参数传1
function ChocoboShowModelMgr:SetActorLOD(LODLevel)
    do
        local UIComplexCharacter = self.ModelMajorController:GetUIComplexCharacter()
        if UIComplexCharacter then
            local AvatarComponent = UIComplexCharacter:GetAvatarComponent()
            if AvatarComponent == nil then
                return
            end

            AvatarComponent:SetForcedLODForAll(LODLevel)
        end
    end

    do
        local UIActor = self.ModelChocoboController:GetChildActor()
        if UIActor then
            local AvatarComponent = UIActor:GetAvatarComponent()
            if AvatarComponent == nil then
                return
            end

            AvatarComponent:SetForcedLODForAll(LODLevel)
        end
    end
end

function ChocoboShowModelMgr:SetModelDefaultPos()
    if self.ModelMajorController == nil then
        return
    end
    if self.ModelChocoboController == nil then
        return
    end
    if self.ModelCameraController == nil then
        return
    end

    local RaceID = MajorUtil.GetMajorRaceID()
    local Cfg = ChocoboModelShowCfg:FindCfgByRaceIDAndUIType(RaceID, self.CurUIType)
    if Cfg == nil and Cfg[1] == nil then
        return
    end

    self.PlayerPos = Cfg[1].PlayerPos
    self.ChocoboPos = Cfg[1].ChocoboPos
    local PlayerDir = Cfg[1].PlayerDir
    local ChocoboDir = Cfg[1].ChocoboDir
    local Offset = Cfg[1].Offset
    local Length = Cfg[1].Length
    local FOV = Cfg[1].FOV

    self.ModelMajorController:SetModelLocation(self.PlayerPos.X, self.PlayerPos.Y, self.ModelMajorController:GetChildActor():GetCapsuleHalfHeight())
    self.ModelMajorController:SetModelRotation(0, PlayerDir, 0)

    self.ModelChocoboController:SetModelLocation(self.ChocoboPos.X, self.ChocoboPos.Y, self.ModelChocoboController:GetChildActor():GetCapsuleHalfHeight())
    self.ModelChocoboController:SetModelRotation(0, ChocoboDir, 0)

    self.ModelCameraController:SetSpringArmLocation(_G.UE.FVector(Offset.X, Offset.Y, Offset.Z), false)
    self.ModelCameraController:SetSpringArmCompArmLength(Length, false)
    self.ModelCameraController:SetCameraFOV(FOV)
end

function ChocoboShowModelMgr:UpdateUIChocoboModel(CallBack)
    -- 确保 self.Armor 不为 nil
    if self.Armor == nil then
        self.Armor = { Head = 0, Body = 0, Feet = 0 }
    end
    
    self.UpdateChocoboModelCallBack = CallBack
    -- 先检查是否已经有记录相同的请求
    if self.LatestRequest then
        local LatestArmor = self.LatestRequest.Armor or {}
        local CurrentArmor = self.Armor or {}

        if self.StainID == (self.LatestRequest.StainID or 0) and
                LatestArmor.Head == (CurrentArmor.Head or 0) and
                LatestArmor.Body == (CurrentArmor.Body or 0) and
                LatestArmor.Feet == (CurrentArmor.Feet or 0) then

            if self.UpdateChocoboModelCallBack then
                self.UpdateChocoboModelCallBack(self.CallBackView)
                self.UpdateChocoboModelCallBack = nil
            end
            return
        end
    end
    
    table.insert(self.RequestQueue, {
        StainID = self.StainID or 0,
        Armor = table.deepcopy(self.Armor) or {}
    })
    if self.IsChocoboModelLoading then
        return
    end

    self:ProcessNextRequest()
end

function ChocoboShowModelMgr:ProcessNextRequest()
    if #self.RequestQueue <= 0 then
        if self.UpdateChocoboModelCallBack then
            self.UpdateChocoboModelCallBack(self.CallBackView)
            self.UpdateChocoboModelCallBack = nil
        end
        return
    end

    self.LatestRequest = self.RequestQueue[#self.RequestQueue]
    local Head, Body, Feet, StainID = 0, 0, 0, 0
    local RequestArmor = self.LatestRequest.Armor or {}
    Head = RequestArmor.Head or 0
    Body = RequestArmor.Body or 0
    Feet = RequestArmor.Feet or 0
    StainID = self.LatestRequest.StainID

    -- 清空请求队列
    self.RequestQueue = {}
    self.IsChocoboModelLoading = true
    local ChildActor = self.ModelChocoboController:GetChildActor()
    if ChildActor then
        local AvatarComp = ChildActor:GetAvatarComponent()
        if AvatarComp == nil then
            return
        end

        AvatarComp:HandleAvatarEquip(Head, ProtoCommon.equip_part.EQUIP_PART_HEAD, -1, false, 0, true)
        AvatarComp:HandleAvatarEquip(Body, ProtoCommon.equip_part.EQUIP_PART_BODY, -1, false, 0, true)
        AvatarComp:HandleAvatarEquip(1, ProtoCommon.equip_part.EQUIP_PART_LEG, -1, false, StainID, true)
        if Feet > 0 then
            AvatarComp:HandleAvatarEquip(Feet, ProtoCommon.equip_part.EQUIP_PART_FEET, -1, false, 0, true)
        else
            AvatarComp:TakeOffAvatarPart(_G.UE.EAvatarPartType.FOOT_ARMOUR, false)
        end

        AvatarComp:StartLoad(true)

        if ChildActor:IsMeshLoaded() then
            _G.FLOG_INFO("ChocoboShowModelMgr:ProcessNextRequest  IsMeshLoaded  IsMeshLoaded IsMeshLoaded")
            self:OnAssembleAllEnd({ ULongParam1 = self.ChocoboEntityID })
        end
    end
end

function ChocoboShowModelMgr:ResetChocoboModelScale(bUseRace)
    if self.ModelChocoboController == nil then
        return
    end

    local ChocoboActor = self.ModelChocoboController:GetChildActor()
    if ChocoboActor == nil then
        return
    end

    if bUseRace then
        local Scale = self:GetRaceScale()
        ChocoboActor:SetScaleFactor(Scale, true)
    else
        ChocoboActor:SetScaleFactor(1, true)
    end
end

function ChocoboShowModelMgr:GetRaceScale()
    local RideData = RideCfg:FindCfgByKey(ChocoboDefine.CHOCOBO_RIDE_ID)
    if RideData == nil then
        return 1
    end

    local RideRaceData = RideRaceCfg:FindCfgByKey(RideData.Customize)
    if RideRaceData == nil then
        return 1
    end

    local UIComplexCharacter = self.ModelMajorController:GetUIComplexCharacter()
    if UIComplexCharacter == nil then
        return 1
    end

    local AvatarComponent = UIComplexCharacter:GetAvatarComponent()
    if AvatarComponent == nil then
        return 1
    end

    local AttachType = AvatarComponent:GetAttachTypeIgnoreChangeRole()
    if AttachType == "c0101" then
        return RideRaceData.Scale01 / 100
    end
    if AttachType == "c0201" then
        return RideRaceData.Scale02 / 100
    end
    if AttachType == "c0301" then
        return RideRaceData.Scale03 / 100
    end
    if AttachType == "c0401" then
        return RideRaceData.Scale04 / 100
    end
    if AttachType == "c0501" then
        return RideRaceData.Scale05 / 100
    end
    if AttachType == "c0601" then
        return RideRaceData.Scale06 / 100
    end
    if AttachType == "c0701" then
        return RideRaceData.Scale07 / 100
    end
    if AttachType == "c0801" then
        return RideRaceData.Scale08 / 100
    end
    if AttachType == "c0901" then
        return RideRaceData.Scale09 / 100
    end
    if AttachType == "c1001" then
        return RideRaceData.Scale10 / 100
    end
    if AttachType == "c1101" then
        return RideRaceData.Scale11 / 100
    end
    if AttachType == "c1201" then
        return RideRaceData.Scale12 / 100
    end

    return 1
end

function ChocoboShowModelMgr:BindCommGesture(UIView, InSingleClick)
    self.CommGesture = UIView
    self.SingleClick = InSingleClick
    UIView:SetOnClickedCallback(function(ScreenPosition)
        self:OnClickedHandle(ScreenPosition)
    end)
    UIView:SetOnPositionChangedCallback(function(X, Y)
        self:OnDragHandle(X, Y)
    end)
end

function ChocoboShowModelMgr:OnClickedHandle(ScreenPosition)
    if self.SingleClick then
        self.SingleClick(ScreenPosition)
    end
end

function ChocoboShowModelMgr:OnDragHandle(X, Y)
    local OffsetX = self.LastDragX - X
    if FMath.abs(OffsetX) <= 5 then
        return
    end

    if OffsetX > 15.0 then
        OffsetX = 15.0
    elseif OffsetX < -15.0 then
        OffsetX = -15.0
    end

    if self.bEnableRotator then
        --do
        --    if self.ModelMajorController ~= nil then
        --        local SkeletalMeshComponent = self.ModelMajorController.SkeletalMeshComponent
        --        if SkeletalMeshComponent ~= nil and _G.UE.UCommonUtil.IsObjectValid(SkeletalMeshComponent) then
        --            local NewRotation = _G.UE.FRotator(0, OffsetX, 0)
        --            local RotateAroundPoint = _G.UE.FVector(0, 0, 0)
        --            --if self.IsRotateAroundPoint then
        --            --    RotateAroundPoint =  _G.UE.FVector(0, self.ChocoboPos.Y, 0)
        --            --end
        --            local ActorLocation = self.ModelMajorController:GetModelLocation()
        --            local OffsetToActor = ActorLocation - RotateAroundPoint
        --            local RotatedOffset = NewRotation:RotateVector(OffsetToActor)
        --            local NewLocation = RotateAroundPoint + RotatedOffset
        --            self.ModelMajorController:SetModelLocation(NewLocation.X, NewLocation.Y, NewLocation.Z)
        --            SkeletalMeshComponent:K2_AddLocalRotation(NewRotation, false, _G.UE.FHitResult(), false)
        --        end
        --    end
        --end
        --
        --do
        --    if self.ModelChocoboController ~= nil then
        --        local SkeletalMeshComponent = self.ModelChocoboController:GetSkeletalMeshComponent()
        --        if SkeletalMeshComponent ~= nil and _G.UE.UCommonUtil.IsObjectValid(SkeletalMeshComponent) then
        --            local NewRotation = _G.UE.FRotator(0, OffsetX, 0)
        --            local RotateAroundPoint = _G.UE.FVector(0, 0, 0)
        --            --if self.IsRotateAroundPoint then
        --            --    RotateAroundPoint = _G.UE.FVector(0, self.PlayerPos.Y, 0)
        --            --end
        --            local ActorLocation = self.ModelChocoboController:GetModelLocation()
        --            local OffsetToActor = ActorLocation - RotateAroundPoint
        --            local RotatedOffset = NewRotation:RotateVector(OffsetToActor)
        --            local NewLocation = RotateAroundPoint + RotatedOffset
        --            self.ModelChocoboController:SetModelLocation(NewLocation.X, NewLocation.Y, NewLocation.Z)
        --            SkeletalMeshComponent:K2_AddLocalRotation(NewRotation, false, _G.UE.FHitResult(), false)
        --        end
        --    end
        --end

        if self.ModelChocoboController ~= nil then
            local SkeletalMeshComponent = self.ModelChocoboController:GetSkeletalMeshComponent()
            if SkeletalMeshComponent ~= nil and _G.UE.UCommonUtil.IsObjectValid(SkeletalMeshComponent) then
                local NewRotation = _G.UE.FRotator(0, OffsetX, 0)
                SkeletalMeshComponent:K2_AddLocalRotation(NewRotation, false, _G.UE.FHitResult(), false)
            end
        end
    end
    self.LastDragX = X
end

return ChocoboShowModelMgr