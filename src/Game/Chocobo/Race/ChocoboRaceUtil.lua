---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2025/3/7 19:39
---

local ChocoboDefine = require("Game/Chocobo/ChocoboDefine")
local ChocoboUiIconCfg = require("TableCfg/ChocoboUiIconCfg")
local ChocoboRaceSkillDisplayCfg = require("TableCfg/ChocoboRaceSkillDisplayCfg")
local ChocoboRaceSkillCfg = require("TableCfg/ChocoboRaceSkillCfg")
local RichTextUtil = require("Utils/RichTextUtil")
local ProtoRes = require ("Protocol/ProtoRes")
local ChocoboRaceUtil = {}

ChocoboRaceUtil.MajorIndexAsset = setmetatable({}, {
    __index = function(t, k)
        local index_type = ProtoRes.CHOCOBO_UI_ICON_TYPE["RANK_SELF_HUD_INDEX_"..k]
        if index_type then
            local path = ChocoboUiIconCfg:FindPathByKey(index_type)
            rawset(t, k, path)
            return path
        end
    end
})

ChocoboRaceUtil.OtherIndexAsset = setmetatable({}, {
    __index = function(t, k)
        local index_type = ProtoRes.CHOCOBO_UI_ICON_TYPE["RANK_OTHER_HUD_INDEX_"..k]
        if index_type then
            local path = ChocoboUiIconCfg:FindPathByKey(index_type)
            rawset(t, k, path)
            return path
        end
    end
})

ChocoboRaceUtil.OtherRankNumIconPath = setmetatable({}, {
    __index = function(t, k)
        local index_type = ProtoRes.CHOCOBO_UI_ICON_TYPE["RANK_OTHER_NUM_ICON_"..k]
        if index_type then
            local path = ChocoboUiIconCfg:FindPathByKey(index_type)
            rawset(t, k, path)
            return path
        end
    end
})

ChocoboRaceUtil.SelfRankNumIconPath = setmetatable({}, {
    __index = function(t, k)
        local index_type = ProtoRes.CHOCOBO_UI_ICON_TYPE["RANK_SELF_NUM_ICON_"..k]
        if index_type then
            local path = ChocoboUiIconCfg:FindPathByKey(index_type)
            rawset(t, k, path)
            return path
        end
    end
})

function ChocoboRaceUtil.Log(Msg)
    if ChocoboDefine.DEBUG_RACE then
        _G.FLOG_INFO("[ChocoboRace]" .. Msg)
    end
end

function ChocoboRaceUtil.Err(Msg)
    if ChocoboDefine.DEBUG_RACE then
        _G.FLOG_ERROR("[ChocoboRace] " .. Msg)
    end
end

function ChocoboRaceUtil.Wrn(Msg)
    if ChocoboDefine.DEBUG_RACE then
        _G.FLOG_WARNING("[ChocoboRace] " .. Msg)
    end
end

local function SafeFormat(FormatString, ...)
    if not FormatString then return "" end

    local Args = {...}
    local Result = {}
    local ArgIndex = 1
    local Len = #FormatString
    local Pos = 1

    while Pos <= Len do
        local Char = FormatString:sub(Pos, Pos)
        if Char == "%" then
            local NextChar = FormatString:sub(Pos + 1, Pos + 1)
            if NextChar == "d" or NextChar == "s" then
                -- 处理占位符 %d 或 %s
                table.insert(Result, Args[ArgIndex] or "")
                ArgIndex = ArgIndex + 1
                Pos = Pos + 2
            elseif NextChar == "%" then
                table.insert(Result, "%")
                Pos = Pos + 2  -- 跳过 %%
            else
                table.insert(Result, "%")
                Pos = Pos + 1
            end
        else
            table.insert(Result, Char)
            Pos = Pos + 1
        end
    end

    return table.concat(Result)
end

function ChocoboRaceUtil.ShowSkillTips(SkillId, Widget)
    if not SkillId or not Widget then
        return
    end
    
    local SkillEffectCfg = ChocoboRaceSkillCfg:FindCfgByKey(SkillId)
    local SkillDisplayCfg = ChocoboRaceSkillDisplayCfg:FindCfgByKey(SkillId)
    if not SkillEffectCfg or not SkillDisplayCfg then
        return
    end

    local function GetCdText(Level, IconType)
        if SkillEffectCfg.Level[Level].CD <= 0 then
            return nil
        end

        local IconPath = ChocoboUiIconCfg:FindPathByKey(IconType)
        local IconTexture = RichTextUtil.GetTexture(IconPath, 40, 40, -8) or ""
        return IconTexture .. RichTextUtil.GetText(SkillEffectCfg.Level[Level].CD .. "s", "d1ba8e")
    end

    local CdParts = {}
    local CdText1 = GetCdText(1, ProtoRes.CHOCOBO_UI_ICON_TYPE.ABILITIES_LEVEL_ICON_PATH_1)
    local CdText2 = GetCdText(2, ProtoRes.CHOCOBO_UI_ICON_TYPE.ABILITIES_LEVEL_ICON_PATH_2)
    local CdText3 = GetCdText(3, ProtoRes.CHOCOBO_UI_ICON_TYPE.ABILITIES_LEVEL_ICON_PATH_3)

    if CdText1 then table.insert(CdParts, CdText1) end
    if CdText2 then table.insert(CdParts, CdText2) end
    if CdText3 then table.insert(CdParts, CdText3) end

    local CdText = ""
    if #CdParts > 0 then
        CdText = _G.LSTR(420089) .. table.concat(CdParts, "/")  -- _G.LSTR: 冷却:
    end

    local CostText = ""
    if SkillEffectCfg.Cost and SkillEffectCfg.Cost.Max > 0 then
        CostText = _G.LSTR(420088) .. tostring(SkillEffectCfg.Cost.Max)  -- _G.LSTR: 消耗:
    end

    local DescContent = SkillDisplayCfg.Desc
    local DescParam = SkillEffectCfg.Level[1].Param
    if #DescParam == 1 then
        DescContent = SafeFormat(DescContent, DescParam[1])
    elseif #DescParam >= 2 then
        DescContent = SafeFormat(DescContent, DescParam[1], DescParam[2])
    end

    local SkillTypeText, SkillTypePath, RarityText, RarityPath = "", "", "", ""

    if SkillEffectCfg.Type == ProtoRes.CHOCOBO_RACE_SKILL_CASTING_TYPE.CHOCOBO_RACE_SKILL_CASTING_ACTIVE then
        SkillTypeText = _G.LSTR(420026)  -- 主动
        SkillTypePath = ChocoboUiIconCfg:FindPathByKey(ProtoRes.CHOCOBO_UI_ICON_TYPE.SKILL_TYPE_ACTIVE)
    elseif SkillEffectCfg.Type == ProtoRes.CHOCOBO_RACE_SKILL_CASTING_TYPE.CHOCOBO_RACE_SKILL_CASTING_PASSIVE then
        SkillTypeText = _G.LSTR(420027)  -- 被动
        SkillTypePath = ChocoboUiIconCfg:FindPathByKey(ProtoRes.CHOCOBO_UI_ICON_TYPE.SKILL_TYPE_PASSIVE)
    end
    

    if SkillEffectCfg.Rarity == ProtoRes.CHOCOBO_SKILL_QUALITY.CHOCOBO_SKILL_QUALITY_COMMON then
        RarityText = _G.LSTR(420090)  -- 普通
        RarityPath = ChocoboUiIconCfg:FindPathByKey(ProtoRes.CHOCOBO_UI_ICON_TYPE.SKILL_QUALITY_COMMO)
    elseif SkillEffectCfg.Rarity == ProtoRes.CHOCOBO_SKILL_QUALITY.CHOCOBO_SKILL_QUALITY_RARITY then
        RarityText = _G.LSTR(420091)  -- 稀有
        RarityPath = ChocoboUiIconCfg:FindPathByKey(ProtoRes.CHOCOBO_UI_ICON_TYPE.SKILL_QUALITY_RARITY)
    elseif SkillEffectCfg.Rarity == ProtoRes.CHOCOBO_SKILL_QUALITY.CHOCOBO_SKILL_QUALITY_ITEM then
        RarityText = _G.LSTR(430024)  -- 道具
        RarityPath = ChocoboUiIconCfg:FindPathByKey(ProtoRes.CHOCOBO_UI_ICON_TYPE.SKILL_QUALITY_COMMO)
    end

    local Params = {}
    Params.SkillName = SkillDisplayCfg.Name
    Params.SkillTagList = {
        { ChocoboSkillTypePath = SkillTypePath, ChocoboSkillTypeText = SkillTypeText },
        { ChocoboSkillTypePath = RarityPath, ChocoboSkillTypeText = RarityText }
    }
    Params.SkillInfoList = {}

    if not string.isnilorempty(DescContent) then
        table.insert(Params.SkillInfoList, DescContent)
    end
    if not string.isnilorempty(CostText) then
        table.insert(Params.SkillInfoList, CostText)
    end
    if not string.isnilorempty(CdText) then
        table.insert(Params.SkillInfoList, CdText)
    end

    return _G.SkillTipsMgr:ShowChocoboRaceSkillTips(Params, Widget)
end

-- 摄像机镜头结算参数
ChocoboRaceUtil.MaxAnimationFrames = 300
ChocoboRaceUtil.AnimationCurves = {
    CraneArmLength = {
        {Time = 0, Value = 500},
        {Time = 143, Value = 480},
        {Time = 299, Value = 420},
    },
    CranePitch = {
        {Time = 0, Value = 29},
        {Time = 56, Value = 29},
        {Time = 239, Value = 8},
        {Time = 299, Value = 8},
    },
    CraneYaw = {
        {Time = 0, Value = -336},
        {Time = 239, Value = 58},
        {Time = 299, Value = 59},
    },
    LocationX = {
        {Time = 0, Value = 0},
        {Time = 179, Value = 0},
        {Time = 239, Value = 152.7},
    },
    LocationY = {
        {Time = 0, Value = 0},
        {Time = 179, Value = 0},
        {Time = 239, Value = -56},
    },
    LocationZ = {
        {Time = 0, Value = 0},
        {Time = 179, Value = 0},
        {Time = 239, Value = 4.6},
    }
}

return ChocoboRaceUtil