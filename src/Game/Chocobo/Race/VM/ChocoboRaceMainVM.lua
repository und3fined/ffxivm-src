---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2023/11/1 10:01
---
local LuaClass = require("Core/LuaClass")
local UIViewModel = require("UI/UIViewModel")
local UIBindableList = require("UI/UIBindableList")
local ChocoboRacePlayerVM = require("Game/Chocobo/Race/VM/ChocoboRacePlayerVM")
local ChocoboMatchSectionCfg = require("TableCfg/ChocoboMatchSectionCfg")
local ChocoboRaceSkillItemVM = require("Game/Chocobo/Race/VM/ChocoboRaceSkillItemVM")
local ChocoboRaceRewardItemVM = require("Game/Chocobo/Race/VM/ChocoboRaceRewardItemVM")
local ProtoRes = require("Protocol/ProtoRes")
local ProtoCS = require("Protocol/ProtoCS")
local TutorialDefine = require("Game/Tutorial/TutorialDefine")
local ChocoboDefine = require("Game/Chocobo/ChocoboDefine")
local ChocoboRaceUtil = require("Game/Chocobo/Race/ChocoboRaceUtil")

local LSTR = nil
local ChocoboRaceMgr = nil
local TimerMgr = nil
local EventMgr = nil

---@class ChocoboRaceMainVM : UIViewModel
local ChocoboRaceMainVM = LuaClass(UIViewModel)

---Ctor
function ChocoboRaceMainVM:Ctor()
    self:ResetRace()
end

function ChocoboRaceMainVM:ResetRace()
    self.ChocoboRaceVMList = {}
    self.ChocoboSkillVMList = {}
    self.MajorIndex = 1
    self.MajorSpeed = ""
    self.ItemID = 0
    self.IsItemSeal = false
    self.IsItemDisable = false
    self.IsShowItemMask = false
    self.IsShowItemCount = false
    self.ItemCount = 0
    self.ItemCountText = ""
    self.MapName = ""
    self.MapLevelName = ""
    -- 主界面
    self.IsShowPanelRace = true
    self.IsShowPanelPlaceName = true
    self.IsShowSkillPanel = true
    self.IsShowPanelPlayer = true
    self.IsShowMiniMap = true
    self.IsShowPanelPhysical = true
    self.IsShowPanelNumber = true
    -- 技能界面
    self.IsShowTreasureTips = false
    -- 结算界面
    self.IsShowPanelReward = false
    self.DurationTimerID = 0
    self.ServerSetupRanking = 1
    self.Mode = 0
    self.IsWin = false
    self.IsMajorOver = false
    self.ResultTitleText = ""
    self.IsShowResultTitleText1st = false
    self.IsShowResultTitleText5st = false
    --奖励
    self.RewardsData = {}
    self.CurRewardIdx = 0
end

function ChocoboRaceMainVM:OnInit()
    self.RewardVMs = UIBindableList.New(ChocoboRaceRewardItemVM)
    self.RacePlayerSortList = UIBindableList.New(ChocoboRacePlayerVM)
    self.RaceResultRankList = UIBindableList.New(ChocoboRacePlayerVM)
end

function ChocoboRaceMainVM:OnBegin()
    LSTR = _G.LSTR
    ChocoboRaceMgr = _G.ChocoboRaceMgr
    EventMgr = _G.EventMgr
    TimerMgr = _G.TimerMgr
end

function ChocoboRaceMainVM:Clear()
    self.RacePlayerSortList:Clear()
    self.RaceResultRankList:Clear()
end

function ChocoboRaceMainVM:OnEnd()
end

function ChocoboRaceMainVM:OnShutdown()
    if self.DurationTimerID ~= 0 then
        TimerMgr:CancelTimer(self.DurationTimerID)
    end
    self.DurationTimerID = 0
    
    self:ResetRace()
end

---UpdateRaceSetup
---@param InRaceSetup table
function ChocoboRaceMainVM:UpdateRaceSetup(InRaceSetup)
    if InRaceSetup == nil then return end
    
    self.Mode = InRaceSetup.Mode or ProtoCS.ChocoboRaceMode.ChocoboRaceModeRoom
    self.IsShowPanelReward = true
    if self.Mode == ProtoCS.ChocoboRaceMode.ChocoboRaceModeRoom then
        self.IsShowPanelReward = false
    end
    self.ServerSetupRanking = InRaceSetup.Ranking or 1
end

---UpdatePlayerInfoList
function ChocoboRaceMainVM:UpdatePlayerInfoList()
    self.RacePlayerSortList:Clear()

    for __, Item in pairs(self.ChocoboRaceVMList) do
        self.RacePlayerSortList:Add(Item)
    end
end

---InitResultRankList
function ChocoboRaceMainVM:InitResultRankList()
    self.RaceResultRankList:Clear()
    for __, Item in pairs(self.ChocoboRaceVMList) do
        self.RaceResultRankList:Add(Item)
    end

    self.RaceResultRankList:Sort(function(a, b)
        local ra = a.Rank or math.huge
        local rb = b.Rank or math.huge
        return ra < rb or (ra == rb and a.Index < b.Index)
    end)
end

---SetMajorIndex
---@param Index number
function ChocoboRaceMainVM:SetMajorIndex(Index)
    self.MajorIndex = Index
end

---IsNpcChallengeByIndex
---@param Index number
function ChocoboRaceMainVM:IsNpcChallengeByIndex(Index)
    local IsNpcChallenge = false
    if self.Mode == ProtoCS.ChocoboRaceMode.ChocoboRaceModeChallenge then
        IsNpcChallenge = Index == ChocoboDefine.NPC_CHALLENGE_INDEX
    end
    return IsNpcChallenge
end

---SetIsShowTreasureTips
---@param Value boolean
function ChocoboRaceMainVM:SetIsShowTreasureTips(Value)
    if Value and not self.IsShowTreasureTips then
        if self.DurationTimerID ~= 0 then
            TimerMgr:CancelTimer(self.DurationTimerID)
        end
        self.IsShowTreasureTips = true
        self.DurationTimerID = TimerMgr:AddTimer(self, self.OnDurationTimer, 3)
    end
end

function ChocoboRaceMainVM:OnDurationTimer()
    self.IsShowTreasureTips = false
end

---UpdateWordsPanelVM
function ChocoboRaceMainVM:UpdateWordsPanelVM()
    self.MapName = LSTR(430012) -- 和策划沟通过，暂时写死
    local LevelName = ChocoboMatchSectionCfg:FindValue(self.ServerSetupRanking, "Name") or ""
    self.MapLevelName = string.format(LSTR(430013), LevelName)
    self.IsShowPanelRace = true
    self.IsShowPanelPlaceName = false
end

function ChocoboRaceMainVM:UpdateSelfResult()
    self.IsMajorOver = true
    local MajorRacer = ChocoboRaceMgr:GetRacerByIndex()
    if self.Mode == ProtoCS.ChocoboRaceMode.ChocoboRaceModeChallenge then
        local NpcRacer = ChocoboRaceMgr:GetRacerByIndex(ChocoboDefine.NPC_CHALLENGE_INDEX)
        self.IsWin = MajorRacer.Ranking < NpcRacer.Ranking
        if self.IsWin then
            self.ResultTitleText = LSTR(430016)
        else
            self.ResultTitleText = LSTR(430017)
        end
    else
        local Rank = MajorRacer.Ranking or 1
        if Rank <= 3 then
            self.IsShowResultTitleText1st = true
            self.IsShowResultTitleText5st = false
        else
            self.IsShowResultTitleText1st = false
            self.IsShowResultTitleText5st = true
        end
        self.ResultTitleText = string.format(LSTR(420130), Rank)
    end
end

function ChocoboRaceMainVM:UpdateResult(Result)
    self.IsMajorOver = true
    self.Mode = Result.Mode or ProtoCS.ChocoboRaceMode.ChocoboRaceModeRoom
    self.IsWin = Result.Win == 1
    if self.Mode == ProtoCS.ChocoboRaceMode.ChocoboRaceModeChallenge then
        if self.IsWin then
            self.ResultTitleText = LSTR(430016)
        else
            self.ResultTitleText = LSTR(430017)
        end
    else
        local MajorRacer = ChocoboRaceMgr:GetRacerByIndex()
        local Rank = MajorRacer.Ranking or 1
        if Rank <= 3 then
            self.IsShowResultTitleText1st = true
            self.IsShowResultTitleText5st = false
        else
            self.IsShowResultTitleText1st = false
            self.IsShowResultTitleText5st = true
        end
        self.ResultTitleText = string.format(LSTR(420130), Rank)
    end
end

---UpdatePickup
---@param ItemID number
function ChocoboRaceMainVM:UpdatePickup(Pickup)
    if Pickup == nil then
        self.ItemCount = self.ItemCount - 1
        if self.ItemCount < 0 then
            self.ItemID = 0
            self.IsShowItemCount = false
            return
        end
    else
        self.ItemID = Pickup.Ability or 0
        self.ItemCount = Pickup.Steal or 0
    end
    
    self.IsShowItemCount = self.ItemCount > 0
    self.ItemCountText = tostring(self.ItemCount + 1)

        ---陆行鸟竞赛新手引导提示: 第一次成功获得宝箱
    local function ShowChocoboRaceGetTreasurTutorial(Params)
        local EventParams = _G.EventMgr:GetEventParams()
        EventParams.Type = TutorialDefine.TutorialConditionType.GamePlayCondition--新手引导触发类型
        EventParams.Param1 = TutorialDefine.GameplayType.Chocobo
        EventParams.Param2 = TutorialDefine.GamePlayStage.ChocoboGetTreasure
        _G.NewTutorialMgr:OnCheckTutorialStartCondition(EventParams)
    end

    local TutorialConfig = {Type = ProtoRes.tip_class_type.TIP_SYS_GUIDE, Callback = ShowChocoboRaceGetTreasurTutorial, Params = {}}
    _G.TipsQueueMgr:AddPendingShowTips(TutorialConfig)
end

---GetItemID
---@return number
function ChocoboRaceMainVM:GetItemID()
    return self.ItemID
end

function ChocoboRaceMainVM:UpdateItemSeal(Value)
    self.IsItemSeal = Value
    self.IsShowItemMask = self.IsItemSeal or self.IsItemDisable
end

function ChocoboRaceMainVM:UpdateItemDisabled(Value)
    self.IsItemDisable = Value
    self.IsShowItemMask = self.IsItemSeal or self.IsItemDisable
end

---GetChocoboRaceVMList
---@return table
function ChocoboRaceMainVM:GetChocoboRaceVMList()
    return self.ChocoboRaceVMList
end

---ClearChocoboRaceVMList
function ChocoboRaceMainVM:ClearChocoboRaceVMList()
    self.ChocoboRaceVMList = {}
    self.ChocoboSkillVMList = {}
end

function ChocoboRaceMainVM:SortChocoboRaceVMList()
    local function STableSort(a, b)
        local ra = a.Rank or math.huge
        local rb = b.Rank or math.huge
        return ra < rb or (ra == rb and a.Index < b.Index)
    end
    
    self.RacePlayerSortList:Sort(STableSort)
    if self.IsMajorOver then
        self.RaceResultRankList:Sort(STableSort)
    end
end

---FindSkillVM
---@param Index number
---@return table
function ChocoboRaceMainVM:FindSkillVM(Index)
    local SkillVM = self.ChocoboSkillVMList[Index]
    if nil == SkillVM then
        SkillVM = ChocoboRaceSkillItemVM.New()
        self.ChocoboSkillVMList[Index] = SkillVM
    end
    return SkillVM
end

---FindChocoboRaceVM
---@param Index number
---@return table
function ChocoboRaceMainVM:FindChocoboRaceVM(Index)
    if nil == Index or nil == self.ChocoboRaceVMList then
        ChocoboRaceUtil.Err("ChocoboRaceMainVM:FindChocoboRaceVM is nil")
        return
    end
    
    local ViewModel = self.ChocoboRaceVMList[Index]
    if nil == ViewModel then
        ViewModel = ChocoboRacePlayerVM.New()
        self.ChocoboRaceVMList[Index] = ViewModel
    end

    return ViewModel
end

-- 奖励
---UpdateRewards
function ChocoboRaceMainVM:UpdateRewards(Rewards)
    if self.IsShowPanelReward == false then return end
    
    if Rewards == nil then return end
    
    local RewardsData = {}
    for __, Item in ipairs(Rewards) do
        local TempData = {}
        TempData.ID = Item.ItemId
        TempData.Num = Item.Num
        if Item.Num > 0 then
            table.insert(RewardsData, TempData)
        end
    end
    self.RewardVMs:Clear()
    self.IsShowPanelReward = #RewardsData > 0
    if self.IsShowPanelReward then
        self.RewardVMs:UpdateByValues(RewardsData)
    end
end

return ChocoboRaceMainVM