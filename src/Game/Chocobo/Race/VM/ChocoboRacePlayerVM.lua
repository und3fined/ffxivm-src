---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2024/1/15 20:18
---
local LuaClass = require("Core/LuaClass")
local UIViewModel = require("UI/UIViewModel")
local ChocoboDefine = require("Game/Chocobo/ChocoboDefine")
local TimeUtil = require("Utils/TimeUtil")
local ProtoCS = require("Protocol/ProtoCS")
local EventMgr = require("Event/EventMgr")
local EventID = require("Define/EventID")
local ProtoRes = require("Protocol/ProtoRes")
local ChocoboUiIconCfg = require("TableCfg/ChocoboUiIconCfg")
local BuddyColorCfg = require("TableCfg/BuddyColorCfg")
local ChocoboRaceEffectVM = require("Game/Chocobo/Race/VM/ChocoboRaceEffectVM")
local UIBindableList = require("UI/UIBindableList")
local ChocoboRaceSkillCfg = require("TableCfg/ChocoboRaceSkillCfg")
local ChocoboRaceStatusCfg = require("TableCfg/ChocoboRaceStatusCfg")
local TutorialDefine = require("Game/Tutorial/TutorialDefine")
local ChocoboRaceUtil = require("Game/Chocobo/Race/ChocoboRaceUtil")
local MajorUtil = require("Utils/MajorUtil")

local ChocoboRaceMgr = nil
local ChocoboRaceMainVM = nil
local TimerMgr = nil

---@class ChocoboRacePlayerVM : UIViewModel
local ChocoboRacePlayerVM = LuaClass(UIViewModel)

---Ctor
function ChocoboRacePlayerVM:Ctor()
    ChocoboRaceMgr = _G.ChocoboRaceMgr
    ChocoboRaceMainVM = _G.ChocoboRaceMainVM
    TimerMgr = _G.TimerMgr
    --初始数据
    self.Index = 0
    self.RoleID = 0
    self.EntityID = 0
    self.IsMajor = false
    self.IsNpcChallenge = false
    self.Name = ""
    self.Level = 0
    self.Armor = nil
    self.Abilities = nil
    self.Passive = nil
    self.Color = ChocoboDefine.DEFAULT_HEAD_COLOR
    self.IsShow30Mark = false
    self.IsShow70Mark = false
    self.IsShowImgRank = false
    self.IsShowImgRankLight = false
    self.IsShowTextNameBlue = false
    self.IsShowTextNameWhite = false
    self.IsShowTextNameRed = false
    --进行中数据
    self.IsOver = false
    self.Progress = 0
    self.StaminaProgress = 1
    self.StaminaText = "100%"
    self.LastEffects = {}
    self.EffectList = UIBindableList.New(ChocoboRaceEffectVM)
    self.Stamina = 0
    self.StaminaState = ChocoboDefine.STAMINA_STATE_ENUM.NORMAL
    self.MajorRankPath = ""
    self.OtherRankPath = ""
    --结算数据
    self.Rank = 1
    self.ArrivedTimeS = 0
    self.ArrivedTimeText = ""
    self.ResultRankBg = ""
    
    self.RaceResultRankListBgPath = {
        Major = ChocoboUiIconCfg:FindPathByKey(ProtoRes.CHOCOBO_UI_ICON_TYPE.RESULT_RANK_LIST_BG_MAJOR),
        TopThree = ChocoboUiIconCfg:FindPathByKey(ProtoRes.CHOCOBO_UI_ICON_TYPE.RESULT_RANK_LIST_BG_TOP_THREE),
        Other = ChocoboUiIconCfg:FindPathByKey(ProtoRes.CHOCOBO_UI_ICON_TYPE.RESULT_RANK_LIST_BG_OTHER),
    }
end

function ChocoboRacePlayerVM:Init(Data)
    self.EffectList:EmptyItems()
    self.Name = Data.Name
    self.RoleID = Data.RoleID
    self.EntityID = Data.EntityID
    self.Index = Data.Index
    self.Level = Data.Level
    self.Armor = Data.Armor
    self.Abilities = Data.Abilities
    self.Passive = Data.Passive
    
    local ColorCfg = BuddyColorCfg:FindCfgByKey(Data.Color)
    if ColorCfg ~= nil then
        self.Color = _G.UE.FLinearColor(ColorCfg.R / 255, ColorCfg.G / 255, ColorCfg.B / 255, 1)
    end

    if MajorUtil.IsMajor(self.EntityID) then
        self.IsMajor = true
        local Skills = {}
        for __, Item in pairs(Data.Abilities) do
            table.insert(Skills, Item)
        end

        if self.Passive then
            table.insert(Skills, self.Passive)
        end
        for __, AbilitieID in pairs(Skills) do
            local AbilitiyCfg = ChocoboRaceSkillCfg:FindCfgByKey(AbilitieID)
            if AbilitiyCfg then
                if AbilitiyCfg.Effect == ProtoRes.Game.GameRaceEffect.RaceEffectWing or AbilitiyCfg.Effect == ProtoRes.Game.GameRaceEffect.RaceEffectSteal
                        or AbilitiyCfg.Effect == ProtoRes.Game.GameRaceEffect.RaceEffectChange then
                    self.IsShow30Mark = true
                    self.IsShow70Mark = true
                end

                if AbilitiyCfg.Effect == ProtoRes.Game.GameRaceEffect.RaceEffectEnergyEnough  then
                    self.IsShow70Mark = true
                end

                if AbilitiyCfg.Effect == ProtoRes.Game.GameRaceEffect.RaceEffectTough  then
                    self.IsShow70Mark = true
                end
            end
        end
    end
    self.Stamina = ChocoboRaceMgr:GetRacerMaxStamina() -- 初始化的時候Stamina放在IsShow70Mark之後
    
    self.MajorRankPath = ChocoboRaceUtil.SelfRankNumIconPath[self.Index] or ""
    self.OtherRankPath = ChocoboRaceUtil.OtherRankNumIconPath[self.Index] or ""
end

function ChocoboRacePlayerVM:UpdateData(Data)
    self.Index = Data.Index
    self.Progress = Data.Progress
    self.Stamina = Data.Stamina
    self.Rank = Data.Ranking
    self.StaminaProgress = Data.Stamina / ChocoboRaceMgr:GetRacerMaxStamina()
    self.StaminaText = Data.Stamina / 100 .. "%"

    if ChocoboRaceMgr:GetGameState() >= ChocoboDefine.GAME_STATE_ENUM.BEGIN then
        self.MajorRankPath = ChocoboRaceUtil.SelfRankNumIconPath[self.Rank] or ""
        self.OtherRankPath = ChocoboRaceUtil.OtherRankNumIconPath[self.Rank] or ""
    end
    
    local IsExcited = false
    for __, Value in ipairs(Data.Effects) do
        if Value == ProtoRes.CHOCOBO_RACE_STATUS.CHOCOBO_EFFECT_ACCELERATION then
            IsExcited = true
        end
        
        local NeedAdd = true
        for i, LastValue in ipairs(self.LastEffects) do
            if LastValue == Value then
                NeedAdd = false
            end
        end

        if NeedAdd then
            self:AddEffectItem(Value)
        end
    end

    for i, LastValue in ipairs(self.LastEffects) do
        local NeedRemove = true
        for j, Value in ipairs(Data.Effects) do
            if LastValue == Value then
                NeedRemove = false
            end
        end

        if NeedRemove then
            self:RemoveEffectItem(LastValue)
        end
    end
    
    self.LastEffects = Data.Effects

    if self.IsMajor then
        for k = 1, 3 do
            local SkillVM = ChocoboRaceMainVM:FindSkillVM(k)
            SkillVM:UpdateStamina(self.Stamina / 100)
        end
        
        if  self.Stamina < ChocoboDefine.FATIGUE_STAMINA then
            self.StaminaState = ChocoboDefine.STAMINA_STATE_ENUM.TIRED
        elseif IsExcited then
            self.StaminaState = ChocoboDefine.STAMINA_STATE_ENUM.EXCITED
        else
            if Data.Status == ProtoCS.ChocoboRacerStatus.ChocoboRacerStatusAcc then
                self.StaminaState = ChocoboDefine.STAMINA_STATE_ENUM.ACCELERATION

                ---陆行鸟竞赛新手引导提示: 第一次超速状态
                local function ShowChocoboRaceOutSpeedTutorial(Params)
                    local EventParams = _G.EventMgr:GetEventParams()
                    EventParams.Type = TutorialDefine.TutorialConditionType.GamePlayCondition--新手引导触发类型
                    EventParams.Param1 = TutorialDefine.GameplayType.Chocobo
                    EventParams.Param2 = TutorialDefine.GamePlayStage.ChocoboOutSpeed
                    _G.NewTutorialMgr:OnCheckTutorialStartCondition(EventParams)
                end

                local TutorialConfig = {Type = ProtoRes.tip_class_type.TIP_SYS_GUIDE, Callback = ShowChocoboRaceOutSpeedTutorial, Params = {}}
                _G.TipsQueueMgr:AddPendingShowTips(TutorialConfig)

            elseif Data.Status == ProtoCS.ChocoboRacerStatus.ChocoboRacerStatusBrake then
                self.StaminaState = ChocoboDefine.STAMINA_STATE_ENUM.LOW
            else
                self.StaminaState = ChocoboDefine.STAMINA_STATE_ENUM.NORMAL
            end
        end
    end

    local Params = {
        ULongParam1 = Data.Index,
        ULongParam2 = Data.Stamina,
    }
    EventMgr:SendEvent(EventID.ChocoboRaceStaminaChange, Params)
end

local function SortPred(ItemA, ItemB)
    --local ACfg = ChocoboRaceStatusCfg:FindCfgByKey(ItemA.EffectID)
    --local BCfg = ChocoboRaceStatusCfg:FindCfgByKey(ItemB.EffectID)
    --if ACfg == nil or BCfg == nil then
    --    return true
    --end
    --
    --return ACfg.IconDisplayWeight > BCfg.IconDisplayWeight
    return ItemA.EffectID > ItemB.EffectID
end

function ChocoboRacePlayerVM:AddEffectItem(EffectID)
    if nil == EffectID then return end
    local EffectCfg = ChocoboRaceStatusCfg:FindCfgByKey(EffectID)
    --if EffectCfg == nil then
    --    _G.FLOG_ERROR("ChocoboRacePlayerVM:AddEffectItem EffectCfg == nil : EffectID is %d", EffectID)
    --end
    
    if EffectCfg == nil or EffectCfg.Icon <= 0 then
        return
    end
    
    --_G.FLOG_ERROR("ChocoboRacePlayerVM:AddEffectItem: EffectID is %d", EffectID)
    self.EffectList:AddByValue(EffectID)
    self.EffectList:Sort(SortPred)
end

function ChocoboRacePlayerVM:RemoveEffectItem(EffectID)
    if EffectID == nil then
        return
    end

    local ItemVM, Index = self.EffectList:Find(
        function(Item)
            return EffectID == Item.EffectID
        end
    )
    if nil ~= ItemVM then
        --_G.FLOG_ERROR("ChocoboRacePlayerVM:RemoveEffectItem: EffectID is %d", EffectID)
        self.EffectList:RemoveAt(Index)
    end
end

function ChocoboRacePlayerVM:SetIsMajor(Value)
    self.IsMajor = Value
    self.IsShowImgRank = not self.IsMajor
    self.IsShowImgRankLight = self.IsMajor
    self:UpdateRankVisibility()
end

function ChocoboRacePlayerVM:SetIsNpcChallenge(Value)
    self.IsNpcChallenge = Value
    self:UpdateRankVisibility()
end

function ChocoboRacePlayerVM:UpdateRankVisibility()
    if self.IsNpcChallenge then
        self.IsShowTextNameBlue = false
        self.IsShowTextNameWhite = false
        self.IsShowTextNameRed = true
    else
        self.IsShowTextNameBlue = not self.IsMajor
        self.IsShowTextNameWhite = self.IsMajor
        self.IsShowTextNameRed = false
    end
end

function ChocoboRacePlayerVM:UpdateResult(Data)
    self.Index = Data.Index
    self.Rank = Data.Rank
    self:SetArrivedTimeS(Data.RunTimesS)
end

function ChocoboRacePlayerVM:SetArrivedTimeS(Value)
    if Value == nil or Value <= 0 then
        return
    end
    
    self.ArrivedTimeS = math.floor(Value)
    self.ArrivedTimeText = TimeUtil.GetTimeFormat("%M:%S", self.ArrivedTimeS)
    self.IsOver = true
    
    if self.IsMajor then
        self.ResultRankBg = self.RaceResultRankListBgPath.Major
    else
        if self.Rank <= 3 then
            self.ResultRankBg = self.RaceResultRankListBgPath.TopThree
        else
            self.ResultRankBg = self.RaceResultRankListBgPath.Other
        end
    end
end

function ChocoboRacePlayerVM:IsEqualVM(Value)
    return false
end

return ChocoboRacePlayerVM