---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2024/3/28 19:15
---
---
local LuaClass = require("Core/LuaClass")
local ActorUtil = require("Utils/ActorUtil")
local ChocoboDefine = require("Game/Chocobo/ChocoboDefine")
local ProtoRes = require("Protocol/ProtoRes")
local ChocoboActiontimelineCfg = require("TableCfg/ChocoboActiontimelineCfg")
local ActiontimelinePathCfg = require("TableCfg/ActiontimelinePathCfg")
local ProtoCS = require("Protocol/ProtoCS")
local MajorUtil = require("Utils/MajorUtil")
local CommonUtil = require("Utils/CommonUtil")
local TutorialDefine = require("Game/Tutorial/TutorialDefine")
local EffectUtil = require("Utils/EffectUtil")
local ChocoboRaceStatusCfg = require("TableCfg/ChocoboRaceStatusCfg")
local ChocoboRaceVfxCfg = require("TableCfg/ChocoboRaceVfxCfg")
local ChocoboRaceUtil = require("Game/Chocobo/Race/ChocoboRaceUtil")
local AudioUtil = require("Utils/AudioUtil")

local ChocoboRaceMainVM = nil
local ChocoboRaceMgr = nil
local ChocoboRaceRacer = LuaClass()

local MOTION_MODE =
{
    NULL = 1,
    ARRIVAL_FIRST = 2,
    ARRIVAL = 3,
    LEFT = 4,
    RIGHT = 5,
    ACCELERATION = 6,
    FATIGUE = 7,
    OTHER = 8,
    MAX = 9,
};

local ACTIONTIMELINE_RESID =
{
    [MOTION_MODE.ARRIVAL_FIRST] = ProtoRes.CHOCOBO_ACTION_TIMELINE_TYPE.EXD_ACTION_TIMELINE_CHOCOBORACE_GLAS_FIRST,
    [MOTION_MODE.ARRIVAL] = ProtoRes.CHOCOBO_ACTION_TIMELINE_TYPE.EXD_ACTION_TIMELINE_CHOCOBORACE_GLAD,
    [MOTION_MODE.LEFT] = ProtoRes.CHOCOBO_ACTION_TIMELINE_TYPE.EXD_ACTION_TIMELINE_CHOCOBORACE_MOVE_L,
    [MOTION_MODE.RIGHT] = ProtoRes.CHOCOBO_ACTION_TIMELINE_TYPE.EXD_ACTION_TIMELINE_CHOCOBORACE_MOVE_R,
    [MOTION_MODE.ACCELERATION] = ProtoRes.CHOCOBO_ACTION_TIMELINE_TYPE.EXD_ACTION_TIMELINE_CHOCOBORACE_ACCELE,
    [MOTION_MODE.FATIGUE] = ProtoRes.CHOCOBO_ACTION_TIMELINE_TYPE.EXD_ACTION_TIMELINE_CHOCOBORACE_FATIGUE,
}

function ChocoboRaceRacer:Ctor()
    ChocoboRaceMgr = _G.ChocoboRaceMgr
    ChocoboRaceMainVM = _G.ChocoboRaceMainVM
    self:Reset()
end

function ChocoboRaceRacer:Update()
    self:UpdateMotion()
end

function ChocoboRaceRacer:Reset()
    self.Index = 0
    self.RoleID = 0
    self.EntityID = 0
    self.IsMajor = false
    self.IsArrival = false
    self.Ranking = 1
    self.IsKeyUp = false
    self.IsKeyLeft = false
    self.IsKeyRight = false
    self.IsKeyJump = false
    self.Stamina = 10000
    self.CurMotionStatusID = 0
    self.IsOtherMode = false
    self.BuffFlags = {}
    self.BuffEffectIDs = {}
    self.StaminaTutorialFlag = false
    self.AccTutorialFlag = false
    self.IsBlindState = false
end

function ChocoboRaceRacer:Init(Data)
    self:Reset()
    self.Index = Data.Index
    self.RoleID = Data.RoleID
    self.EntityID = Data.EntityID
    self.IsMajor = MajorUtil.IsMajor(self.EntityID)
    self.Stamina = ChocoboRaceMgr:GetRacerMaxStamina()
end

function ChocoboRaceRacer:UpdateData(Data)
    if self.Index ~= Data.Index then return end
    
    self.Stamina = Data.Stamina
    self.Ranking = Data.Ranking
    self.Status = Data.Status
    
    if self.IsMajor and not self.AccTutorialFlag and self.Stamina <= 2500 then
        ---陆行鸟竞赛新手引导提示: 当玩家第一次达到疲惫时，提示玩家体力低于25%会进入疲惫，无法主动加速
        local function ShowChocoboRaceCannotUserAccTutorial(Params)
            local EventParams = _G.EventMgr:GetEventParams()
            EventParams.Type = TutorialDefine.TutorialConditionType.GamePlayCondition--新手引导触发类型
            EventParams.Param1 = TutorialDefine.GameplayType.Chocobo
            EventParams.Param2 = TutorialDefine.GamePlayStage.ChocoboTips2
            _G.NewTutorialMgr:OnCheckTutorialStartCondition(EventParams)
        end

        local TutorialConfig = {Type = ProtoRes.tip_class_type.TIP_SYS_GUIDE, Callback = ShowChocoboRaceCannotUserAccTutorial, Params = {}}
        _G.TipsQueueMgr:AddPendingShowTips(TutorialConfig)
        self.AccTutorialFlag = true
    end

    local NewEffects = {}
    for _, Index in pairs(Data.Effects) do
        NewEffects[Index] = true
    end

    for _, Index in pairs(ProtoRes.CHOCOBO_RACE_STATUS) do
        local OldBuff = self:InBuff(Index)
        local CurBuff = NewEffects[Index] or false
        if OldBuff ~= CurBuff then
            self:SetBuff(Index, CurBuff)
        end
    end
end

function ChocoboRaceRacer:ClearBuff()
    for _, Index in pairs(ProtoRes.CHOCOBO_RACE_STATUS) do
        self:SetBuff(Index, false)
    end
end

function ChocoboRaceRacer:UpdateCtrl(Data)
    if self.Index ~= Data.Index then return end
    if self.IsMajor then return end

    if Data.Ctrl == ProtoCS.ChocoboRaceCtrl.ChocoboRaceParamAbilityItem then
        self:PlayActionTimeLineMonTage(ProtoRes.CHOCOBO_ACTION_TIMELINE_TYPE.EXD_ACTION_TIMELINE_CHOCOBORACE_ITEM)
    elseif Data.Ctrl == ProtoCS.ChocoboRaceCtrl.ChocoboRaceParamAbility1 or
            Data.Ctrl == ProtoCS.ChocoboRaceCtrl.ChocoboRaceParamAbility2 or
            Data.Ctrl == ProtoCS.ChocoboRaceCtrl.ChocoboRaceParamAbility3 then
        self:PlayActionTimeLineMonTage(ProtoRes.CHOCOBO_ACTION_TIMELINE_TYPE.EXD_ACTION_TIMELINE_CHOCOBORACE_ABILITY)
    end
end

function ChocoboRaceRacer:UpdateResult(Data)
    if self.Index ~= Data.Index then return end
    
    self.Ranking = Data.Rank
    self:ClearBuff()
end

function ChocoboRaceRacer:SetRank(Value)
    self.Ranking = Value
end

function ChocoboRaceRacer:SetIsArrival(IsOn)
    self.IsArrival = IsOn
end

function ChocoboRaceRacer:InBuff(Status)
    return self.BuffFlags[Status] or false
end

function ChocoboRaceRacer:GetBuffFlags()
    return self.BuffFlags
end

function ChocoboRaceRacer:SetBuff(Index, Flag)
    self.BuffFlags[Index] = Flag
    
    if self.BuffEffectIDs == nil then
        self.BuffEffectIDs = {}
    end
    
    -- 更新Buff特效
    local HandleID = self.BuffEffectIDs[Index]
    if Flag then
        if HandleID == nil then
            local Cfg = ChocoboRaceStatusCfg:FindCfgByKey(Index)
            if Cfg ~= nil then
                HandleID = self:PlayEffect(Cfg.LoopEffect)
                self.BuffEffectIDs[Index] = HandleID
            end
        end
    else
        if HandleID ~= nil then
            EffectUtil.StopVfx(HandleID)
            self.BuffEffectIDs[Index] = nil
        end
    end
    
    if self.IsMajor then
        ChocoboRaceUtil.Log(string.format("ChocoboRaceRacer:SetBuff: Index = %d, Flag = %d", Index, Flag and 1 or 0 ))
        if Index == ProtoRes.CHOCOBO_RACE_STATUS.CHOCOBO_EFFECT_ABILITY_SEAL then
            for k = 1, ChocoboDefine.SKILL_NUM do
                local SkillVM = ChocoboRaceMainVM:FindSkillVM(k)
                SkillVM:UpdateSeal(Flag)
            end
        elseif Index == ProtoRes.CHOCOBO_RACE_STATUS.CHOCOBO_EFFECT_SERVER_MUTE then
            for k = 1, ChocoboDefine.SKILL_NUM do
                local SkillVM = ChocoboRaceMainVM:FindSkillVM(k)
                SkillVM:SetIsDisabled(Flag)
            end
            ChocoboRaceMainVM:UpdateItemDisabled(Flag)
        elseif Index == ProtoRes.CHOCOBO_RACE_STATUS.CHOCOBO_EFFECT_ITEM_SEAL then
            ChocoboRaceMainVM:UpdateItemSeal(Flag)
        elseif Index == ProtoRes.CHOCOBO_RACE_STATUS.CHOCOBO_EFFECT_LIMIT_DASH then
            for k = 1, ChocoboDefine.SKILL_NUM do
                local SkillVM = ChocoboRaceMainVM:FindSkillVM(k)
                if SkillVM and SkillVM.InvocationStatus == ProtoRes.CHOCOBO_RACE_STATUS.CHOCOBO_EFFECT_LIMIT_DASH then
                    SkillVM:UpdateLimitDash(Flag)
                end
            end
        elseif Index == ProtoRes.CHOCOBO_RACE_STATUS.CHOCOBO_EFFECT_BLIND then
            self:SetBlindState(Flag)
        end
    end
end

function ChocoboRaceRacer:SetKeyUp(IsOn)
    self.IsKeyUp = IsOn
end

function ChocoboRaceRacer:SetKeyRight(IsOn)
    self.IsKeyRight = IsOn
    
    if self.IsMajor then
        _G.UE.UChocoboRaceMgr.Get():SetKeyRight(IsOn)
    end
end

function ChocoboRaceRacer:SetKeyLeft(IsOn)
    self.IsKeyLeft = IsOn
    
    if self.IsMajor then
        _G.UE.UChocoboRaceMgr.Get():SetKeyLeft(IsOn)
    end
end

function ChocoboRaceRacer:SetKeyJump(IsOn)
    self.IsKeyJump = IsOn

    local MajorController = MajorUtil.GetMajorController()
    if MajorController == nil then return end

    if self.IsKeyJump then
        self:ClearMotionStatus()
        MajorController:NewJumpStart()
    else
        MajorController:NewJumpEnd()
    end
end

function ChocoboRaceRacer:GetRacerProgress()
    local Progress = _G.UE.UChocoboRaceMgr.Get():GetRacerProgressByIndex(self.Index - 1)

    if self.IsMajor and not self.StaminaTutorialFlag and Progress >= 90 and self.Stamina >= 5000 then
        ---陆行鸟竞赛新手引导提示: 当玩家进度超过90%且剩余体力大于50%时，提示玩家即将到达终点，可以全力加速消耗体力
        local function ShowChocoboRaceUserStaminaTutorial(Params)
            local EventParams = _G.EventMgr:GetEventParams()
            EventParams.Type = TutorialDefine.TutorialConditionType.GamePlayCondition--新手引导触发类型
            EventParams.Param1 = TutorialDefine.GameplayType.Chocobo
            EventParams.Param2 = TutorialDefine.GamePlayStage.ChocoboTips1
            _G.NewTutorialMgr:OnCheckTutorialStartCondition(EventParams)
        end

        local TutorialConfig = {Type = ProtoRes.tip_class_type.TIP_SYS_GUIDE, Callback = ShowChocoboRaceUserStaminaTutorial, Params = {}}
        _G.TipsQueueMgr:AddPendingShowTips(TutorialConfig)
        self.StaminaTutorialFlag = true
    end
    
    return Progress
end

function ChocoboRaceRacer:UpdateMotion()
    local Actor = ActorUtil.GetActorByEntityID(self.EntityID)
    if Actor == nil then return end
    
    local MotionMode = self:GetMotionMode()
    if MotionMode == MOTION_MODE.NULL then
        self:ClearMotionStatus()
    else
        if self:GetCurMotionStatusID() ~= MotionMode then
            self:SetMotionStatus(MotionMode);
        end
    end
end

function ChocoboRaceRacer:GetMotionMode()
    local Actor = ActorUtil.GetActorByEntityID(self.EntityID)
    if Actor == nil then return MOTION_MODE.NULL end

    local MoveComp = MajorUtil.GetMajor():GetMovementComponent()
    if MoveComp then
        --if self.IsMajor then
        --    _G.FLOG_ERROR("ChocoboRaceRacer:GetMotionMode: bIsJumping = %d", MoveComp:IsFalling() and 1 or 0 )
        --end
        if MoveComp:IsFalling() then
            return MOTION_MODE.OTHER
        end
    end

    if self.IsOtherMode then
        return MOTION_MODE.OTHER
    end

    if self.IsArrival == true then
        if self.Ranking == 1 then
            return MOTION_MODE.ARRIVAL_FIRST
        elseif self.Ranking <= 3 then
            return MOTION_MODE.ARRIVAL
        else
            return MOTION_MODE.NULL
        end
    end

    if self.IsArrival == false then
        if self.IsKeyLeft then
            return MOTION_MODE.LEFT
        end

        if self.IsKeyRight then
            return MOTION_MODE.RIGHT
        end
    end

    if self.Stamina < ChocoboDefine.FATIGUE_STAMINA then
        return MOTION_MODE.FATIGUE
    end

    if self.IsArrival == false then
        --if self:InBuff(ProtoRes.CHOCOBO_RACE_STATUS.CHOCOBO_EFFECT_ACCELERATION) then
        --    return MOTION_MODE.ACCELERATION
        --end

        if self.Status == ProtoCS.ChocoboRacerStatus.ChocoboRacerStatusAcc then
            return MOTION_MODE.ACCELERATION
        end

        if self.IsKeyUp then
            return MOTION_MODE.ACCELERATION
        end
    end
    
    return MOTION_MODE.NULL
end

function ChocoboRaceRacer:GetCurMotionStatusID()
    return self.CurMotionStatusID
end

function ChocoboRaceRacer:ClearMotionStatus()
    if self.CurMotionStatusID == MOTION_MODE.NULL then return end

    self.CurMotionStatusID = MOTION_MODE.NULL
    local AnimComp = ActorUtil.GetActorAnimationComponent(self.EntityID)
    if AnimComp == nil then
        return
    end

    ChocoboRaceUtil.Log(string.format("ChocoboRaceRacer:ClearMotionStatus: Index = %d   StatusID = %d", self.Index, self.CurMotionStatusID))
    --主角
    AnimComp:StopAnimation()
    --坐骑
    AnimComp:StopAnimation("", _G.UE.EAvatarPartType.RIDE_MASTER)
end

function ChocoboRaceRacer:SetMotionStatus(MotionID)
    if self.CurMotionStatusID == MotionID then return end

    ChocoboRaceUtil.Log(string.format("ChocoboRaceRacer:SetMotionStatus: Index = %d   MontionID = %d", self.Index, MotionID))
    self.CurMotionStatusID = MotionID
    local ResID = self:GetATLResIDByMotionMode(MotionID)
    if ResID ~= 0 then
        self:PlayActionTimeline(ResID)
    end
end

function ChocoboRaceRacer:RevertState()
    self.IsOtherMode = false
    --_G.FLOG_INFO("ChocoboRaceRacer:RevertState: Index = %d   IsOtherMode = %d", self.Index, self.IsOtherMode and 1 or 0 )
end

function ChocoboRaceRacer:PlayActionTimeline(ActionTimelineID)
    local AnimComp = ActorUtil.GetActorAnimationComponent(self.EntityID)
    if AnimComp == nil then
        return
    end

    local Cfg = ChocoboActiontimelineCfg:FindCfgByKey(ActionTimelineID)
    --主角
    if Cfg.PlayerAtlID ~= nil and Cfg.PlayerAtlID > 0 then
        AnimComp:PlayActionTimeline(Cfg.PlayerAtlID)
    end
    --坐骑
    if Cfg.ChocoboAtlID ~= nil and Cfg.ChocoboAtlID > 0 then
        local PathCfg = ActiontimelinePathCfg:FindCfgByKey(Cfg.ChocoboAtlID)
        local ActionTimelinePath = AnimComp:GetActionTimeline(PathCfg.Filename)
        AnimComp:PlayAnimation(ActionTimelinePath, 1.0, 0.25, 0.25, true, _G.UE.EAvatarPartType.RIDE_MASTER)
    end
end

function ChocoboRaceRacer:PlayActionTimeLineMonTage(ActionTimelineID)
    local AnimComp = ActorUtil.GetActorAnimationComponent(self.EntityID)
    if AnimComp == nil then
        return
    end

    local function CallBack()
        self:RevertState()
    end
    
    local Cfg = ChocoboActiontimelineCfg:FindCfgByKey(ActionTimelineID)
    --主角
    if Cfg.PlayerAtlID ~= nil and Cfg.PlayerAtlID > 0 then
        local PathCfg = ActiontimelinePathCfg:FindCfgByKey(Cfg.PlayerAtlID)
        local ActionTimelinePath = AnimComp:GetActionTimeline(PathCfg.Filename)
        self.IsOtherMode = true
        AnimComp:PlayAnimationCallBack(ActionTimelinePath, CommonUtil.GetDelegatePair(CallBack, true))
    end
    --坐骑
    if Cfg.ChocoboAtlID ~= nil and Cfg.ChocoboAtlID > 0 then
        local PathCfg = ActiontimelinePathCfg:FindCfgByKey(Cfg.ChocoboAtlID)
        local ActionTimelinePath = AnimComp:GetActionTimeline(PathCfg.Filename)
        AnimComp:PlayAnimation(ActionTimelinePath, 1.0, 0.25, 0.25, true, _G.UE.EAvatarPartType.RIDE_MASTER)
    end
end

function ChocoboRaceRacer:GetATLResIDByMotionMode(MotionID)
    local Ret = ACTIONTIMELINE_RESID[MotionID]
    if Ret == nil then
        Ret = 0
    end
    return Ret
end

function ChocoboRaceRacer:PlayEffect(VfxID)
    local Cfg = ChocoboRaceVfxCfg:FindCfgByKey(VfxID)
    if Cfg == nil then
        return
    end
    
    local VfxPath = Cfg.Path
    if string.isnilorempty(VfxPath) then
        return
    end

    local Actor = ActorUtil.GetActorByEntityID(self.EntityID)
    if Actor == nil then return end

    local FrontPart = string.sub(VfxPath, 1, #VfxPath - 1)
    local BehindPart = string.sub(VfxPath, #VfxPath)
    local BeUsedPath = string.format("%s_C%s", FrontPart, BehindPart)

    local VfxParameter = _G.UE.FVfxParameter()
    VfxParameter.VfxRequireData.VfxTransform = Actor:GetTransform()
    VfxParameter.VfxRequireData.EffectPath = BeUsedPath
    VfxParameter.PlaySourceType=_G.UE.EVFXPlaySourceType.PlaySourceType_URideComponent
    if Cfg.BindType == ProtoRes.CHOCOBO_RACE_VFX_BIND_TYPE.CHOCOBO_RACE_VFX_BIND_NULL then
        VfxParameter.VfxTransform = Actor:FGetActorTransform()
    elseif Cfg.BindType == ProtoRes.CHOCOBO_RACE_VFX_BIND_TYPE.CHOCOBO_RACE_VFX_BIND_CASTER then
        VfxParameter:SetCaster(Actor, 0, _G.UE.EVFXAttachPointType.AttachPointType_AvatarPartType, _G.UE.EAvatarPartType.RIDE_MASTER)
    elseif Cfg.BindType == ProtoRes.CHOCOBO_RACE_VFX_BIND_TYPE.CHOCOBO_RACE_VFX_BIND_TARGET then
        VfxParameter:AddTarget(Actor, 0, _G.UE.EVFXAttachPointType.AttachPointType_AvatarPartType, _G.UE.EAvatarPartType.RIDE_MASTER)
    end

    local AudioPath = Cfg.AudioPath
    if not string.isnilorempty(AudioPath) then
        AudioUtil.SyncLoadAndPlaySoundEvent(self.EntityID, AudioPath, true)
    end
    return EffectUtil.PlayVfx(VfxParameter)
end

-- 进入或退出失明状态
function ChocoboRaceRacer:SetBlindState(bEnable)
    if self.IsBlindState == bEnable then
        return
    end

    self.IsBlindState = bEnable
    local AllSgActors = _G.UE.TArray(_G.UE.ASgLayoutActorBase)
    _G.UE.UGameplayStatics.GetAllActorsOfClass(_G.FWORLD(), _G.UE.ASgLayoutActorBase.StaticClass(), AllSgActors)
    local AllSgCnt = AllSgActors:Length()
    for Index = 1, AllSgCnt, 1 do
        local Actor = AllSgActors[Index]
        if _G.UE.UCommonUtil.IsObjectValid(Actor) then
            Actor:SetActorHiddenInGame(bEnable)
        end
    end

    -- 遍历所有陆行鸟赛手
    for i, RoleID, EntityID in ChocoboRaceMgr:IterChocoboRacer() do
        if EntityID ~= self.EntityID then
            local ActorHUDVM = _G.HUDMgr:GetActorVM(EntityID)
            if ActorHUDVM then
                ActorHUDVM:UpdateIsDraw(not bEnable)
            end
            local Actor = ActorUtil.GetActorByEntityID(EntityID)
            if _G.UE.UCommonUtil.IsObjectValid(Actor) then
                Actor:SetActorHiddenInGame(bEnable)
            end
        end
    end
end

return ChocoboRaceRacer