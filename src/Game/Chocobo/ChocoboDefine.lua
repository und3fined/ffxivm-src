---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2023/11/8 16:12
---
local ProtoCommon = require("Protocol/ProtoCommon")
local ProtoCS = require("Protocol/ProtoCS")
local LSTR = _G.LSTR

local OVERVIEW_FILTER_TYPE = {
    LEVEL = 1,
    FEATHER_VALUE = 2,
    MAX_SPEED = 3,
    SPRINT_SPEED = 4,
    ACCELERATION = 5,
    STAMINA = 6,
    SKILL_STRENGTH = 7,
    STAR = 8,
}

local ChocoboDefine = {
    DEBUG_RACE = false,
    SKILL_NUM = 3,
    GENERATION_MAX = 9,
    CHOCOBO_MATING_NPC_ID = 1010472,
    CHOCOBO_RIDE_ID = 1, --陆行鸟模型对应坐骑表ID
    NPC_CHALLENGE_INDEX = 2, -- npc挑战固定index = 2
    FATIGUE_STAMINA = 2500, --进入疲惫状态的体力值,后期再决定走配置还是后台下发
    OVERVIEW_FILTER_TYPE = OVERVIEW_FILTER_TYPE,
    DEFAULT_HEAD_COLOR = _G.UE.FLinearColor(172 / 255, 168 / 255, 162 / 255, 1), --默认灰色
    CHOCOBO_RACE_WIN_1ST_SOUND_PATH = "AkAudioEvent'/Game/WwiseAudio/Events/Music/Sequence/Play_BGM_ChocoboRace_Win1st.Play_BGM_ChocoboRace_Win1st'",
    CHOCOBO_RACE_WIN_2ND_SOUND_PATH = "AkAudioEvent'/Game/WwiseAudio/Events/Music/Sequence/Play_BGM_ChocoboRace_Win2nd.Play_BGM_ChocoboRace_Win2nd'",
    CHOCOBO_RACE_LOST_SOUND_PATH = "AkAudioEvent'/Game/WwiseAudio/Events/Music/Sequence/Play_BGM_ChocoboRace_Lose.Play_BGM_ChocoboRace_Lose'",

    ChocoboMainLightID = 12,--id 在天气表里
    ChocoboCodexLightID = 11,
    BuddyLightID = 18,
    ChocoboBorrowLightID = 18,
    
    SOURCE = {
        NPC = 1,
        SEQUENCE = 2,
        ADOPT = 3,
        TASK = 4,
    },
    
    CHOCOBO_FEE_QTE_RESULT = {
        SKIP = 1,
        SUCCESS = 2,
        FAIL = 3,
    },
    
    PAGE_INDEX = {
        INFO_PAGE = 1,
        LIST_PAGE = 2,
        SKILL_PAGE = 3,
        GENE_PAGE = 4,
    },
    
    GAME_STATE_ENUM = {
        NONE = 1,
        SEQUENCE = 2,
        READY = 3,
        BEGIN = 4,
        GOAL = 5,
        RESULT = 6,
    },

    STAMINA_STATE_ENUM = {
        NORMAL = 1,
        ACCELERATION = 2,
        EXCITED = 3,
        LOW = 4,
        TIRED = 5,
    },

    STATUS_TYPE = {
        EXD_CHOCOBO_RACE_STATUS_ACCELERATION = 1 << 0,
        EXD_CHOCOBO_RACE_STATUS_STAMINA_DECREASE_INVALID = 1 << 1,
        EXD_CHOCOBO_RACE_STATUS_STAMINA_DECREASE_COMPLETELY_INVALID = 1 << 2,
        EXD_CHOCOBO_RACE_STATUS_INVINCIBLE = 1 << 3,
        EXD_CHOCOBO_RACE_STATUS_DEBUFF_REFLECTION = 1 << 4,
        EXD_CHOCOBO_RACE_STATUS_HEAVY = 1 << 5,
        EXD_CHOCOBO_RACE_STATUS_EXCITATION = 1 << 6,
        EXD_CHOCOBO_RACE_STATUS_PANIC = 1 << 7,
        EXD_CHOCOBO_RACE_STATUS_ABILITY_SEAL = 1 << 8,
        EXD_CHOCOBO_RACE_STATUS_ITEM_SEAL = 1 << 9,
        EXD_CHOCOBO_RACE_STATUS_STAMINA_DECREASE_FIELD_OMEN = 1 << 10,
        EXD_CHOCOBO_RACE_STATUS_STAMINA_DECREASE_FIELD = 1 << 11,
        EXD_CHOCOBO_RACE_STATUS_ABILITY_SEAL_FIELD_OMEN = 1 << 12,
        EXD_CHOCOBO_RACE_STATUS_ABILITY_SEAL_FIELD = 1 << 13,
        EXD_CHOCOBO_RACE_STATUS_ITEM_SEAL_FIELD_OMEN = 1 << 14,
        EXD_CHOCOBO_RACE_STATUS_ITEM_SEAL_FIELD = 1 << 15,
        EXD_CHOCOBO_RACE_STATUS_BEFORE_PANIC = 1 << 16,
        EXD_CHOCOBO_RACE_STATUS_BEFORE_EXCITATION = 1 << 17,
        EXD_CHOCOBO_RACE_STATUS_STAMINA_ABS_FIELD_OMEN = 1 << 18,
        EXD_CHOCOBO_RACE_STATUS_STAMINA_ABS_FIELD = 1 << 19,
        EXD_CHOCOBO_RACE_STATUS_IMPERSONATOR = 1 << 20,
        EXD_CHOCOBO_RACE_STATUS_FIELD_INVALID = 1 << 21,
        EXD_CHOCOBO_RACE_STATUS_LIMIT_DASH = 1 << 22,
    },

    ------------养成--------------------------
    TITLE_REWARD_STATE = {
        LAST_NOT_COMPLETED = 1,
        GO_ON = 2,
        CAN_REWARD = 3,
        ALREADY_GET = 4,
    },

    CHOCOBO_ATTR_TYPE_NAME = {
        -- LSTR string: 最高速度
        [ProtoCommon.ChocoboAttrType.AttrTypeMaxSpeed] = LSTR(420108),
        -- LSTR string: 冲刺速度
        [ProtoCommon.ChocoboAttrType.AttrTypeSprintSpeed] = LSTR(420109),
        -- LSTR string: 技能强度
        [ProtoCommon.ChocoboAttrType.AttrTypeSkillStrenth] = LSTR(420110),
        -- LSTR string: 加速力
        [ProtoCommon.ChocoboAttrType.AttrTypeAcceleration] = LSTR(420111),
        -- LSTR string: 适应力
        [ProtoCommon.ChocoboAttrType.AttrTypeStamina] = LSTR(420112),
    },

    OVERVIEW_FILTER_TYPE_NAME = {
        -- LSTR string: 显示等级
        [OVERVIEW_FILTER_TYPE.LEVEL] = LSTR(420113),
        -- LSTR string: 显示羽力赛段
        [OVERVIEW_FILTER_TYPE.FEATHER_VALUE] = LSTR(420114),
        -- LSTR string: 显示最高速度星数
        [OVERVIEW_FILTER_TYPE.MAX_SPEED] = LSTR(420115),
        -- LSTR string: 显示冲刺速度星数
        [OVERVIEW_FILTER_TYPE.SPRINT_SPEED] = LSTR(420116),
        -- LSTR string: 显示加速力星数
        [OVERVIEW_FILTER_TYPE.ACCELERATION] = LSTR(420118),
        -- LSTR string: 显示适应力星数
        [OVERVIEW_FILTER_TYPE.STAMINA] = LSTR(420119),
        -- LSTR string: 显示技能强度星数
        [OVERVIEW_FILTER_TYPE.SKILL_STRENGTH] = LSTR(420117),
        -- LSTR string: 显示总星数
        [OVERVIEW_FILTER_TYPE.STAR] = LSTR(420120),
    },

    FEATHER_FORCE_STAGES_TEXT = {
        -- LSTR string: 一段羽力赛
        LSTR(420121),
        -- LSTR string: 二段羽力赛
        LSTR(420122),
        -- LSTR string: 三段羽力赛
        LSTR(420123),
        -- LSTR string: 四段羽力赛
        LSTR(420124),
        -- LSTR string: 五段羽力赛
        LSTR(420125),
        -- LSTR string: 六段羽力赛
        LSTR(420126),
        -- LSTR string: 七段羽力赛
        LSTR(420127),
        -- LSTR string: 八段羽力赛
        LSTR(420128),
        -- LSTR string: 九段羽力赛
        LSTR(420129),
    },

    -----------------------------------------------------------------------------------排序方法
    SortByLevel = function(a, b)
        -- ①等级从大到小
        if not a.IsRent and not b.IsRent then
            if a.Level ~= b.Level then
                return a.Level > b.Level
            end

            -- ②收藏＞未收藏
            if a.Status == ProtoCS.ChocoboStatus.StatusLike and b.Status ~= ProtoCS.ChocoboStatus.StatusLike then
                return true
            elseif a.Status ~= ProtoCS.ChocoboStatus.StatusLike and b.Status == ProtoCS.ChocoboStatus.StatusLike then
                return false
            end

            -- ③代数从大到小
            if a.Generation ~= b.Generation then
                return a.Generation > b.Generation
            end

            -- ④前面相同时，按羽力值从大到小
            if a.FeatherValue ~= b.FeatherValue then
                return a.FeatherValue > b.FeatherValue
            end

            -- ⑤都相同时按获取先后（时间戳大的在后）
            return a.MatingTime < b.MatingTime
        elseif a.IsRent and b.IsRent then
            -- ②收藏＞未收藏
            if a.Status == ProtoCS.ChocoboStatus.StatusLike and b.Status ~= ProtoCS.ChocoboStatus.StatusLike then
                return true
            elseif a.Status ~= ProtoCS.ChocoboStatus.StatusLike and b.Status == ProtoCS.ChocoboStatus.StatusLike then
                return false
            end

            -- ③代数从大到小
            if a.Generation ~= b.Generation then
                return a.Generation > b.Generation
            end

            -- ⑤都相同时按获取先后（时间戳大的在后）
            return a.MatingTime < b.MatingTime
        else
            return not a.IsRent
        end
    end,

    SortByFeatherValue = function(a, b)
        if not a.IsRent and not b.IsRent then
            -- ①羽力值从大到小
            if a.FeatherValue ~= b.FeatherValue then
                return a.FeatherValue > b.FeatherValue
            end

            -- ②收藏＞未收藏
            if a.Status == ProtoCS.ChocoboStatus.StatusLike and b.Status ~= ProtoCS.ChocoboStatus.StatusLike then
                return true
            elseif a.Status ~= ProtoCS.ChocoboStatus.StatusLike and b.Status == ProtoCS.ChocoboStatus.StatusLike then
                return false
            end

            -- ③代数从大到小
            if a.Generation ~= b.Generation then
                return a.Generation > b.Generation
            end

            -- ④前面相同时，自己的鸟按等级从大到小
            if a.Level ~= b.Level then
                return a.Level > b.Level
            end

            -- ⑤都相同时按获取先后（时间戳大的在后）
            return a.MatingTime < b.MatingTime
        elseif a.IsRent and b.IsRent then
            -- ②收藏＞未收藏
            if a.Status == ProtoCS.ChocoboStatus.StatusLike and b.Status ~= ProtoCS.ChocoboStatus.StatusLike then
                return true
            elseif a.Status ~= ProtoCS.ChocoboStatus.StatusLike and b.Status == ProtoCS.ChocoboStatus.StatusLike then
                return false
            end

            -- ③代数从大到小
            if a.Generation ~= b.Generation then
                return a.Generation > b.Generation
            end

            -- ⑤都相同时按获取先后（时间戳大的在后）
            return a.MatingTime < b.MatingTime
        else
            return not a.IsRent
        end
    end,

    SortByMaxSpeed = function(a, b)
        -- ①此条属性星级中两个中的最大值，按此从大到小排序
        local aMaxStar = math.max(a.Gene.GeneBlue[ProtoCommon.ChocoboAttrType.AttrTypeMaxSpeed] or 0, a.Gene.GeneRed[ProtoCommon.ChocoboAttrType.AttrTypeMaxSpeed] or 0)
        local bMaxStar = math.max(b.Gene.GeneBlue[ProtoCommon.ChocoboAttrType.AttrTypeMaxSpeed] or 0, b.Gene.GeneRed[ProtoCommon.ChocoboAttrType.AttrTypeMaxSpeed] or 0)
        if aMaxStar ~= bMaxStar then
            return aMaxStar > bMaxStar
        end

        -- ②相同时比较剩余那条的星级（这里假设是分别比较 GeneBlue 和 GeneRed 中的最大值）
        local aRestStar = math.min(a.Gene.GeneBlue[ProtoCommon.ChocoboAttrType.AttrTypeMaxSpeed] or 0, a.Gene.GeneRed[ProtoCommon.ChocoboAttrType.AttrTypeMaxSpeed] or 0)
        local bRestStar = math.min(b.Gene.GeneBlue[ProtoCommon.ChocoboAttrType.AttrTypeMaxSpeed] or 0, b.Gene.GeneRed[ProtoCommon.ChocoboAttrType.AttrTypeMaxSpeed] or 0)
        if aRestStar ~= bRestStar then
            return aRestStar > bRestStar
        end

        -- ③收藏＞（新获取）＞未收藏
        if a.Status == ProtoCS.ChocoboStatus.StatusLike and b.Status ~= ProtoCS.ChocoboStatus.StatusLike then
            return true
        elseif a.Status ~= ProtoCS.ChocoboStatus.StatusLike and b.Status == ProtoCS.ChocoboStatus.StatusLike then
            return false
        end

        -- ④代数从大到小
        if a.Generation ~= b.Generation then
            return a.Generation > b.Generation
        end

        -- ⑤前面相同时，按等级从大到小
        if a.Level ~= b.Level then
            return a.Level > b.Level
        end

        -- ⑥都相同时按获取先后（时间戳大的在后）
        return a.MatingTime < b.MatingTime
    end,

    SortByAcceleration = function(a, b)
        -- ①此条属性星级中两个中的最大值，按此从大到小排序
        local aMaxStar = math.max(a.Gene.GeneBlue[ProtoCommon.ChocoboAttrType.AttrTypeAcceleration] or 0, a.Gene.GeneRed[ProtoCommon.ChocoboAttrType.AttrTypeAcceleration] or 0)
        local bMaxStar = math.max(b.Gene.GeneBlue[ProtoCommon.ChocoboAttrType.AttrTypeAcceleration] or 0, b.Gene.GeneRed[ProtoCommon.ChocoboAttrType.AttrTypeAcceleration] or 0)
        if aMaxStar ~= bMaxStar then
            return aMaxStar > bMaxStar
        end

        -- ②相同时比较剩余那条的星级（这里假设是分别比较 GeneBlue 和 GeneRed 中的最大值）
        local aRestStar = math.min(a.Gene.GeneBlue[ProtoCommon.ChocoboAttrType.AttrTypeAcceleration] or 0, a.Gene.GeneRed[ProtoCommon.ChocoboAttrType.AttrTypeAcceleration] or 0)
        local bRestStar = math.min(b.Gene.GeneBlue[ProtoCommon.ChocoboAttrType.AttrTypeAcceleration] or 0, b.Gene.GeneRed[ProtoCommon.ChocoboAttrType.AttrTypeAcceleration] or 0)
        if aRestStar ~= bRestStar then
            return aRestStar > bRestStar
        end

        -- ③收藏＞（新获取）＞未收藏
        if a.Status == ProtoCS.ChocoboStatus.StatusLike and b.Status ~= ProtoCS.ChocoboStatus.StatusLike then
            return true
        elseif a.Status ~= ProtoCS.ChocoboStatus.StatusLike and b.Status == ProtoCS.ChocoboStatus.StatusLike then
            return false
        end

        -- ④代数从大到小
        if a.Generation ~= b.Generation then
            return a.Generation > b.Generation
        end

        -- ⑤前面相同时，按等级从大到小
        if a.Level ~= b.Level then
            return a.Level > b.Level
        end

        -- ⑥都相同时按获取先后（时间戳大的在后）
        return a.MatingTime < b.MatingTime
    end,

    SortBySprintSpeed = function(a, b)
        -- ①此条属性星级中两个中的最大值，按此从大到小排序
        local aMaxStar = math.max(a.Gene.GeneBlue[ProtoCommon.ChocoboAttrType.AttrTypeSprintSpeed] or 0, a.Gene.GeneRed[ProtoCommon.ChocoboAttrType.AttrTypeSprintSpeed] or 0)
        local bMaxStar = math.max(b.Gene.GeneBlue[ProtoCommon.ChocoboAttrType.AttrTypeSprintSpeed] or 0, b.Gene.GeneRed[ProtoCommon.ChocoboAttrType.AttrTypeSprintSpeed] or 0)
        if aMaxStar ~= bMaxStar then
            return aMaxStar > bMaxStar
        end

        -- ②相同时比较剩余那条的星级（这里假设是分别比较 GeneBlue 和 GeneRed 中的最大值）
        local aRestStar = math.min(a.Gene.GeneBlue[ProtoCommon.ChocoboAttrType.AttrTypeSprintSpeed] or 0, a.Gene.GeneRed[ProtoCommon.ChocoboAttrType.AttrTypeSprintSpeed] or 0)
        local bRestStar = math.min(b.Gene.GeneBlue[ProtoCommon.ChocoboAttrType.AttrTypeSprintSpeed] or 0, b.Gene.GeneRed[ProtoCommon.ChocoboAttrType.AttrTypeSprintSpeed] or 0)
        if aRestStar ~= bRestStar then
            return aRestStar > bRestStar
        end

        -- ③收藏＞（新获取）＞未收藏
        if a.Status == ProtoCS.ChocoboStatus.StatusLike and b.Status ~= ProtoCS.ChocoboStatus.StatusLike then
            return true
        elseif a.Status ~= ProtoCS.ChocoboStatus.StatusLike and b.Status == ProtoCS.ChocoboStatus.StatusLike then
            return false
        end

        -- ④代数从大到小
        if a.Generation ~= b.Generation then
            return a.Generation > b.Generation
        end

        -- ⑤前面相同时，按等级从大到小
        if a.Level ~= b.Level then
            return a.Level > b.Level
        end

        -- ⑥都相同时按获取先后（时间戳大的在后）
        return a.MatingTime < b.MatingTime
    end,

    SortByStamina = function(a, b)
        -- ①此条属性星级中两个中的最大值，按此从大到小排序
        local aMaxStar = math.max(a.Gene.GeneBlue[ProtoCommon.ChocoboAttrType.AttrTypeStamina] or 0, a.Gene.GeneRed[ProtoCommon.ChocoboAttrType.AttrTypeStamina] or 0)
        local bMaxStar = math.max(b.Gene.GeneBlue[ProtoCommon.ChocoboAttrType.AttrTypeStamina] or 0, b.Gene.GeneRed[ProtoCommon.ChocoboAttrType.AttrTypeStamina] or 0)
        if aMaxStar ~= bMaxStar then
            return aMaxStar > bMaxStar
        end

        -- ②相同时比较剩余那条的星级（这里假设是分别比较 GeneBlue 和 GeneRed 中的最大值）
        local aRestStar = math.min(a.Gene.GeneBlue[ProtoCommon.ChocoboAttrType.AttrTypeStamina] or 0, a.Gene.GeneRed[ProtoCommon.ChocoboAttrType.AttrTypeStamina] or 0)
        local bRestStar = math.min(b.Gene.GeneBlue[ProtoCommon.ChocoboAttrType.AttrTypeStamina] or 0, b.Gene.GeneRed[ProtoCommon.ChocoboAttrType.AttrTypeStamina] or 0)
        if aRestStar ~= bRestStar then
            return aRestStar > bRestStar
        end

        -- ③收藏＞（新获取）＞未收藏
        if a.Status == ProtoCS.ChocoboStatus.StatusLike and b.Status ~= ProtoCS.ChocoboStatus.StatusLike then
            return true
        elseif a.Status ~= ProtoCS.ChocoboStatus.StatusLike and b.Status == ProtoCS.ChocoboStatus.StatusLike then
            return false
        end

        -- ④代数从大到小
        if a.Generation ~= b.Generation then
            return a.Generation > b.Generation
        end

        -- ⑤前面相同时，按等级从大到小
        if a.Level ~= b.Level then
            return a.Level > b.Level
        end

        -- ⑥都相同时按获取先后（时间戳大的在后）
        return a.MatingTime < b.MatingTime
    end,

    SortBySkillStrenth = function(a, b)
        -- ①此条属性星级中两个中的最大值，按此从大到小排序
        local aMaxStar = math.max(a.Gene.GeneBlue[ProtoCommon.ChocoboAttrType.AttrTypeSkillStrenth] or 0, a.Gene.GeneRed[ProtoCommon.ChocoboAttrType.AttrTypeSkillStrenth] or 0)
        local bMaxStar = math.max(b.Gene.GeneBlue[ProtoCommon.ChocoboAttrType.AttrTypeSkillStrenth] or 0, b.Gene.GeneRed[ProtoCommon.ChocoboAttrType.AttrTypeSkillStrenth] or 0)
        if aMaxStar ~= bMaxStar then
            return aMaxStar > bMaxStar
        end

        -- ②相同时比较剩余那条的星级
        local aRestStar = math.min(a.Gene.GeneBlue[ProtoCommon.ChocoboAttrType.AttrTypeSkillStrenth] or 0, a.Gene.GeneRed[ProtoCommon.ChocoboAttrType.AttrTypeSkillStrenth] or 0)
        local bRestStar = math.min(b.Gene.GeneBlue[ProtoCommon.ChocoboAttrType.AttrTypeSkillStrenth] or 0, b.Gene.GeneRed[ProtoCommon.ChocoboAttrType.AttrTypeSkillStrenth] or 0)
        if aRestStar ~= bRestStar then
            return aRestStar > bRestStar
        end

        -- ③收藏＞（新获取）＞未收藏
        if a.Status == ProtoCS.ChocoboStatus.StatusLike and b.Status ~= ProtoCS.ChocoboStatus.StatusLike then
            return true
        elseif a.Status ~= ProtoCS.ChocoboStatus.StatusLike and b.Status == ProtoCS.ChocoboStatus.StatusLike then
            return false
        end

        -- ④代数从大到小
        if a.Generation ~= b.Generation then
            return a.Generation > b.Generation
        end

        -- ⑤前面相同时，按等级从大到小
        if a.Level ~= b.Level then
            return a.Level > b.Level
        end

        -- ⑥都相同时按获取先后（时间戳大的在后）
        return a.MatingTime < b.MatingTime
    end,

    SortByStar = function(a, b)
        local aStar = (a.Gene.GeneBlue[ProtoCommon.ChocoboAttrType.AttrTypeMaxSpeed] or 0)
                + (a.Gene.GeneRed[ProtoCommon.ChocoboAttrType.AttrTypeMaxSpeed] or 0)
                + (a.Gene.GeneBlue[ProtoCommon.ChocoboAttrType.AttrTypeAcceleration] or 0)
                + (a.Gene.GeneRed[ProtoCommon.ChocoboAttrType.AttrTypeAcceleration] or 0)
                + (a.Gene.GeneBlue[ProtoCommon.ChocoboAttrType.AttrTypeSprintSpeed] or 0)
                + (a.Gene.GeneRed[ProtoCommon.ChocoboAttrType.AttrTypeSprintSpeed] or 0)
                + (a.Gene.GeneBlue[ProtoCommon.ChocoboAttrType.AttrTypeSkillStrenth] or 0)
                + (a.Gene.GeneRed[ProtoCommon.ChocoboAttrType.AttrTypeSkillStrenth] or 0)
                + (a.Gene.GeneBlue[ProtoCommon.ChocoboAttrType.AttrTypeStamina] or 0)
                + (a.Gene.GeneRed[ProtoCommon.ChocoboAttrType.AttrTypeStamina] or 0)
        local bStar = (b.Gene.GeneBlue[ProtoCommon.ChocoboAttrType.AttrTypeMaxSpeed] or 0)
                + (b.Gene.GeneRed[ProtoCommon.ChocoboAttrType.AttrTypeMaxSpeed] or 0)
                + (b.Gene.GeneBlue[ProtoCommon.ChocoboAttrType.AttrTypeAcceleration] or 0)
                + (b.Gene.GeneRed[ProtoCommon.ChocoboAttrType.AttrTypeAcceleration] or 0)
                + (b.Gene.GeneBlue[ProtoCommon.ChocoboAttrType.AttrTypeSprintSpeed] or 0)
                + (b.Gene.GeneRed[ProtoCommon.ChocoboAttrType.AttrTypeSprintSpeed] or 0)
                + (b.Gene.GeneBlue[ProtoCommon.ChocoboAttrType.AttrTypeSkillStrenth] or 0)
                + (b.Gene.GeneRed[ProtoCommon.ChocoboAttrType.AttrTypeSkillStrenth] or 0)
                + (b.Gene.GeneBlue[ProtoCommon.ChocoboAttrType.AttrTypeStamina] or 0)
                + (b.Gene.GeneRed[ProtoCommon.ChocoboAttrType.AttrTypeStamina] or 0)

        if aStar ~= bStar then
            return aStar > bStar
        end

        -- ③收藏＞（新获取）＞未收藏
        if a.Status == ProtoCS.ChocoboStatus.StatusLike and b.Status ~= ProtoCS.ChocoboStatus.StatusLike then
            return true
        elseif a.Status ~= ProtoCS.ChocoboStatus.StatusLike and b.Status == ProtoCS.ChocoboStatus.StatusLike then
            return false
        end

        -- ④代数从大到小
        if a.Generation ~= b.Generation then
            return a.Generation > b.Generation
        end

        -- ⑤前面相同时，按等级从大到小
        if a.Level ~= b.Level then
            return a.Level > b.Level
        end

        -- ⑥都相同时按获取先后（时间戳大的在后）
        return a.MatingTime < b.MatingTime
    end
}

return ChocoboDefine