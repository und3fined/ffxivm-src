---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by richyczhou.
--- DateTime: 2024/6/27 10:44
---

local CommonUtil = require("Utils/CommonUtil")
local LoginMapleTabItemVM = require("Game/LoginNew/VM/Item/LoginMapleTabItemVM")
local ServerGroupItemVM = require("Game/LoginNew/VM/Item/ServerGroupItemVM")
local ServerListItemVM = require("Game/LoginNew/VM/Item/ServerListItemVM")
local FriendServerListItemVM = require("Game/LoginNew/VM/Item/FriendServerListItemVM")
local ServerStateItemVM = require("Game/LoginNew/VM/Item/ServerStateItemVM")
local LoginMgr = require("Game/Login/LoginMgr")
local LoginNewDefine = require("Game/LoginNew/LoginNewDefine")
local LuaClass = require("Core/LuaClass")
local UIViewModel = require("UI/UIViewModel")
local UIBindableList = require("UI/UIBindableList")

local FLOG_INFO = _G.FLOG_INFO
local FLOG_ERROR = _G.FLOG_ERROR

---@class LoginMapleVM : UIViewModel
local LoginMapleVM = LuaClass(UIViewModel)

---Ctor
function LoginMapleVM:Ctor()
    FLOG_INFO("LoginMapleVM:Ctor")

    self.RecommendServerCount = 4

    ---@type table<number, ServerListItem>
    self.AllServerListData = {}

    ---@type ServerListItem[]
    self.RecommendListData = {}
    ---@type ServerListItem[]
    self.MyServerListData = {}
    ---@type ServerListItem[]
    self.FriendServerListData = {}

    ---@type ServerGroup
    self.ServerGroup = {}
    ---@type ServerTree
    self.ServerTree = {}

    self.TabIndex = 1
    self.RecommendIndex = 0
    self.GroupIndex = 1
    self.ServerIndex = 1

    self.RecommendOrMineType = true
    self.FriendType = false
    self.AllListType = false

    ---@type UIBindableList
    -- 服务器状态
    self.ServerStateList = UIBindableList.New(ServerStateItemVM)
    -- Tab列表
    self.TabList = UIBindableList.New(LoginMapleTabItemVM)
    -- 推荐服务器列表 or 我的服务器列表
    self.RecommendOrMyList = UIBindableList.New(ServerListItemVM)
    -- 所有服务器列表1
    self.ServerGroupList = UIBindableList.New(ServerGroupItemVM)
    -- 所有服务器列表2
    self.ServerList = UIBindableList.New(ServerListItemVM)
    -- 好友服务器列表
    self.FriendServerList = UIBindableList.New(FriendServerListItemVM)
end

function LoginMapleVM:OnInit()
end

function LoginMapleVM:OnBegin()
end

function LoginMapleVM:OnEnd()
end

function LoginMapleVM:OnShutdown()
end

function LoginMapleVM:UpdateServerState()
    self.ServerStateList:UpdateByValues(LoginNewDefine.ServerStateConfig)
end

function LoginMapleVM:UpdateTab()
    local TabList
    if CommonUtil.IsInternationalChina() then
        TabList = LoginNewDefine.MapleTabCategoryCN
    else
        TabList = LoginNewDefine.MapleTabCategoryOverseas
    end
    self.TabList:UpdateByValues(TabList)
end

function LoginMapleVM:UpdateRecommendList()
    self.RecommendOrMyList:UpdateByValues(self.RecommendListData)
end

function LoginMapleVM:UpdateMyServerList()
    self.RecommendOrMyList:UpdateByValues(self.MyServerListData)
end

function LoginMapleVM:UpdateFriendServerList()
    self.FriendServerList:UpdateByValues(self.FriendServerListData)
end

function LoginMapleVM:UpdateServerGroup()
    self.ServerGroupList:UpdateByValues(self.ServerGroup)
end

function LoginMapleVM:UpdateServerList(CategoryId)
    if nil == self.ServerTree then
        FLOG_ERROR("[LoginMapleVM:UpdateServerList] self.ServerTree is nil")
        return
    end

    local Group = self.ServerTree[CategoryId]
    if nil == Group then
        FLOG_ERROR("[LoginMapleVM:UpdateServerList] Group is nil")
        return
    end

    self.ServerList:UpdateByValues(Group.ServerList)
end

function LoginMapleVM:InitMapleData()
    self:InitServerData(LoginMgr.TreeInfo)
end

---@param TreeInfo FTreeInfo
function LoginMapleVM:InitServerData(TreeInfo)
    if TreeInfo == nil then
        FLOG_ERROR("[LoginMapleVM:InitServerData] TreeInfo is nil")
        return
    end
    FLOG_INFO("[LoginMapleVM:InitServerData] Maple - Use server data")

    self.ServerGroup = {}
    self.ServerTree = {}
    self.RecommendListData = {}
    self.AllServerListData = {}

    local TempRecommendServer = {}
    local TempAllServer = {}

    local ServerGroup = self.ServerGroup
    local ServerTree = self.ServerTree
    local RecommendListData = self.RecommendListData
    local AllServerListData = self.AllServerListData

    local NodeList = TreeInfo.NodeList
    local NodeCount = #NodeList
    -- print("[LoginMapleVM:InitServerData] NodeCount:", NodeCount)
    for i = 1, NodeCount do
        ---@type FNodeWrapper
        local NodeWrapper = NodeList[i]
        if NodeWrapper.Type == UE.ETreeNodeType.TnTypeLeaf then
            -- FLeafNode
            local LeafNode = NodeWrapper.Leaf
            if nil == ServerTree[LeafNode.ParentId] then
                ServerTree[LeafNode.ParentId] = { GroupID = LeafNode.ParentId, ServerList = {}}
            end
            ---@type ServerTreeItem
            local ServerList = ServerTree[LeafNode.ParentId].ServerList
            ---@type ServerListItem
            local ServerListItem = {
                WorldID = LeafNode.Id,
                Name = LeafNode.Name,
                Host = LeafNode.Url,
                State = LeafNode.Flag,
                Index = #ServerList + 1,
                Tag = LeafNode.Tag,
                CustomValue1 = LeafNode.CustomData.Attr1,
                CustomValue2 = LeafNode.CustomData.Attr2,
            }
            table.insert(ServerList, ServerListItem)
            AllServerListData[LeafNode.Id] = ServerListItem

            --print(string.format("[LoginMapleVM:InitServerData] Leaf ---> Id:%d, ParentId:%d, Name:%s, Flag:%d, Tag:%d, Index:%d, Url:%s"
            --    , LeafNode.Id, LeafNode.ParentId, LeafNode.Name, LeafNode.Flag, LeafNode.Tag, ServerListItem.Index, LeafNode.Url))

            -- Recommend
            if LeafNode.Tag & LoginNewDefine.ServerTagEnum.Recommend ~= 0 then
                table.insert(TempRecommendServer, ServerListItem)
            else
                table.insert(TempAllServer, ServerListItem)
            end

            if not UE.UCommonUtil.IsShipping() then
                if LeafNode.ParentId == 2 and #RecommendListData < self.RecommendServerCount then
                    table.insert(RecommendListData, ServerListItem)
                end
            end
        else
            -- FCategoryNode
            local Category = NodeWrapper.Category
             --print(string.format("[LoginMapleVM:InitServerData] Category ===> Id:%d, ParentId:%d, Name:%s"
             --	, Category.Id, Category.ParentId, Category.Name))
            if Category.ParentId > 0 then
                table.insert(ServerGroup, { GroupID = Category.Id, Name = Category.Name, Index = #ServerGroup + 1 })
            end
        end
    end

    --table.sort(TempAllServer, function(L, R)
    --    return L.Index < R.Index
    --end)
    if #TempRecommendServer < self.RecommendServerCount then
        for i = 1, #TempRecommendServer do
            table.insert(TempAllServer, TempRecommendServer[i])
        end
    end
    for i = #TempAllServer, 1, -1 do
        if #RecommendListData < self.RecommendServerCount then
            table.insert(RecommendListData, TempAllServer[i])
            print(string.format("[LoginMapleVM:InitServerData] Recommend + Name:%s, Index:%d, Tag:%d", TempAllServer[i].Name, TempAllServer[i].Index, TempAllServer[i].Tag))
        else
            break
        end
    end

    --for i = 1, #ServerTree do
    --    table.sort(ServerTree[i].ServerList, function(L, R)
    --        return L.WorldID < R.WorldID
    --    end)
    --end
    for GroupID, ServerTreeItem in pairs(self.ServerTree) do
        table.sort(ServerTreeItem.ServerList, function(L, R)
            return L.Index < R.Index
        end)
    end
    table.sort(ServerGroup, function(L, R)
        return L.Index < R.Index
    end)
end

function LoginMapleVM:InitMyServerData()
    self.MyServerListData = {}
    local MyServerListData = self.MyServerListData

    -- 我的服务器角色数据
    local AllRoles = LoginMgr.AllMyRoles
    if AllRoles then
        for WorldID, _ in pairs(AllRoles) do
            local MyServerItem = LoginMgr.AllMapleNodeInfo[WorldID]
            if MyServerItem then
                table.insert(MyServerListData, MyServerItem)
            end
        end
    end

    table.sort(MyServerListData, function(L, R)
        return L.WorldID < R.WorldID
    end)
end

function LoginMapleVM:InitFriendServerData()
    self.FriendServerListData = {}
    local FriendServerListData = self.FriendServerListData

    ---@type ServerFriends
    local FriendServers = LoginMgr.FriendServers
    if FriendServers and #FriendServers > 0 then
        for _, FriendRoleItem in ipairs(FriendServers) do
            FLOG_INFO("[LoginMapleVM:InitFriendServerData] FriendRoleItem name:%s ---------->", FriendRoleItem.Name)
            table.insert(FriendServerListData, FriendRoleItem);

            --local Role = Account.role
            --FLOG_INFO("Name:%s, \nRoleID:%s, \nWorldID:%d, \nOpenID:%s, \nProf:%d, \nLevel:%d, \nLoginTime:%s, \nHeadPortraitID:%d",
            --        Role.Name, Role.RoleID, Role.WorldID, Role.OpenID, Role.Prof, Role.Level, Role.LoginTime, Role.HeadPortraitID)
        end
    end
end

return LoginMapleVM