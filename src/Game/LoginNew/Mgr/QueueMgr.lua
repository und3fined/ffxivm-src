---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by richyczhou.
--- DateTime: 2025/4/1 16:29
---

local EventID = require("Define/EventID")
local EventMgr = require("Event/EventMgr")
local LocalizationUtil = require("Utils/LocalizationUtil")
local LoginNewVM = require("Game/LoginNew/VM/LoginNewVM")
local LuaClass = require("Core/LuaClass")
local MgrBase = require("Common/MgrBase")
local UIViewID = require("Define/UIViewID")
local UIViewMgr = require("UI/UIViewMgr")

local LoginNewDefine = require("Game/LoginNew/LoginNewDefine")
local LoginStrID = LoginNewDefine.LoginStrID
local LSTR = _G.LSTR

local FLOG_INFO = _G.FLOG_INFO
local FLOG_WARNING = _G.FLOG_WARNING

---@class QueueMgr : MgrBase
local QueueMgr = LuaClass(MgrBase)

function QueueMgr:Ctor()
    -- 是否正在排队
    self.bQueueDoing = false

    -- 显示排队或服务器满
    self.bShowQueue = true

    self.FakeWaitCountTime = 0
    self.TimeCounter = 0
    self.TimerId = nil

    self.LastQueueOpenId = nil
end

function QueueMgr:OnInit()
    FLOG_INFO("[QueueMgr:OnInit] ")
end

function QueueMgr:OnBegin()
    FLOG_INFO("[QueueMgr:OnBegin] ")
end

function QueueMgr:OnEnd()

end

function QueueMgr:OnShutdown()

end

function QueueMgr:CancelQueue()
    FLOG_INFO("[QueueMgr:CancelQueue] ")
    if self.TimerId then
        self:UnRegisterTimer(self.TimerId)
        self.TimerId = nil
    end

    self.FakeWaitCountTime = 0
    self.TimeCounter = 0
    UIViewMgr:HideView(UIViewID.LoginQueueWin)

    self.bQueueDoing = false
end

function QueueMgr:StartQueue(WorldRegPercent)
    FLOG_INFO("[QueueMgr:CancelQueue] WorldRegPercent:%d", WorldRegPercent)
    _G.NetworkStateMgr:Disconnect()

    if WorldRegPercent < 100 then
        -- 显示排队
        self.bShowQueue = true
    else
        -- 显示服务器注册已满
        self.bShowQueue = false
    end
    self.bQueueDoing = true

    if self.bShowQueue and not self.TimerId then
        -- X秒刷新一次（3s），随机人数（1000-1500），随机剩余时间（90秒左右）
        LoginNewVM.FakeWaitPeople = math.random(1000, 1500)
        LoginNewVM.FakeWaitTotalTime = math.random(70, 110)
        LoginNewVM.FakeWaitTotalTimeStr = self:GetTimeString(LoginNewVM.FakeWaitTotalTime)
        FLOG_INFO("[LoginNewTipsWinView:OnShow] FakeWaitTotalTime:%d", LoginNewVM.FakeWaitTotalTime)

        self.FakeWaitCountTime = 0
        LoginNewVM.FakeWaitCountTimeStr = LocalizationUtil.GetCountdownTimeForShortTime(self.FakeWaitCountTime, "mm:ss")

        self.TimeCounter = 0
        self.TimerId = self:RegisterTimer(self.UpdateQueue, 1, 1, 0)
    end
end

function QueueMgr:UpdateQueue()
    self.TimeCounter = self.TimeCounter + 1
    if self.TimeCounter > 2 then
        --FLOG_INFO("[LoginNewTipsWinView:UpdateQueue] Update people")
        self.TimeCounter = 0
        LoginNewVM.FakeWaitPeople = math.random(1000, 1500)
    end

    self.FakeWaitCountTime = self.FakeWaitCountTime + 1
    LoginNewVM.FakeWaitCountTimeStr = LocalizationUtil.GetCountdownTimeForShortTime(self.FakeWaitCountTime, "mm:ss")

    if self.FakeWaitCountTime >= LoginNewVM.FakeWaitTotalTime then
        -- 排队结束
        FLOG_INFO("[LoginNewTipsWinView:UpdateQueue] Queue finish")
        UIViewMgr:HideView(UIViewID.LoginServerList)
        EventMgr:PostEvent(EventID.LoginQueueFinishEvent)
        self:CancelQueue()
    end
end

function QueueMgr:GetTimeString(RemainTime)
    if nil == RemainTime then
        return
    end

    if RemainTime < 0 then
        RemainTime = 0
    end

    local Day = math.floor(RemainTime / 86400)
    RemainTime = RemainTime - Day * 86400
    local Hour = math.floor(RemainTime / 3600)
    RemainTime = RemainTime - Hour * 3600
    local Minute = math.floor(RemainTime / 60)
    RemainTime = RemainTime - Minute * 60
    local Second = math.floor(RemainTime)

    if Day > 0 then
        return string.format(LSTR(LoginStrID.DayHour), Day, Hour)
    elseif Hour > 0 then
        return string.format(LSTR(LoginStrID.HourMin), Hour, Minute)
    else
        return string.format(LSTR(LoginStrID.MinSecond), Minute, Second)
    end
end

return QueueMgr