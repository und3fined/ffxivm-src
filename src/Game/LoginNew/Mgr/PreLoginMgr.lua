---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by richyczhou.
--- DateTime: 2024/7/8 15:43
---

local CommonUtil = require("Utils/CommonUtil")
local EventID = require("Define/EventID")
local LoginNewDefine = require("Game/LoginNew/LoginNewDefine")
local LuaClass = require("Core/LuaClass")
local MgrBase = require("Common/MgrBase")
local SaveKey = require("Define/SaveKey")
local UIViewID = require("Define/UIViewID")
local UIViewMgr = require("UI/UIViewMgr")

local FLOG_INFO = _G.FLOG_INFO
local FLOG_ERROR = _G.FLOG_ERROR

---@class PreLoginMgr : MgrBase
local PreLoginMgr = LuaClass(MgrBase)

function PreLoginMgr:Ctor()
    self.UserAgreementFlag = 0
    self.RequirePermissionFlag = 0
end

function PreLoginMgr:OnInit()
    local GameplayStaticsUtil = require("Utils/GameplayStaticsUtil")
    local WorldName = _G.UE.UGameplayStatics.GetCurrentLevelName(GameplayStaticsUtil:GetWorld())
    print("[PreLoginMgr:OnInit] WorldName:", WorldName)
    self.IsNeedPreLogin = WorldName == "LightSpeed"
    if not self.IsNeedPreLogin then
        FLOG_INFO("[PreLoginMgr:OnInit] Enter from Login, skip Logo")
        return
    end

    if CommonUtil.IsAndroidPlatform() then
        self.AndroidPermissions = {
            "android.permission.WRITE_EXTERNAL_STORAGE",    -- Android 10（API级别29）以下
            "android.permission.READ_EXTERNAL_STORAGE",     -- Android 10（API级别29）以下
            "android.permission.MANAGE_EXTERNAL_STORAGE",   -- Android 10（API级别29）
            "android.permission.READ_MEDIA_IMAGES",         -- Android 10（API级别29）
            "android.permission.WRITE_MEDIA_IMAGES",        -- Android 10（API级别29）
            "android.permission.RECORD_AUDIO",              -- Android 6.0（API级别23）
        }
        self:CheckPermissions()
    end

    local SaveMgr = _G.UE.USaveMgr
    SaveMgr.LoadFile("PreLoginData", false, false)
    self.UserAgreementFlag = SaveMgr.GetInt(SaveKey.UserAgreement, 0, false)
    self.RequirePermissionFlag = SaveMgr.GetInt(SaveKey.RequirePermission, 0, false)
    SaveMgr.SaveFile("PreLoginData", false)
    print("[PreLoginMgr:OnInit] ", self.UserAgreementFlag, self.RequirePermissionFlag)

    self:LoadData()
end

function PreLoginMgr:OnBegin()
    FLOG_INFO("[PreLoginMgr:OnBegin] ")
    if not self.IsNeedPreLogin then
        FLOG_INFO("[PreLoginMgr:OnBegin] Enter from Login, skip Logo")
        return
    end

    if 0 == self.UserAgreementFlag and CommonUtil.IsInternationalChina() then
        UIViewMgr:ShowView(UIViewID.TxUserProtocol)
        return
    end

    if 0 == self.RequirePermissionFlag and CommonUtil.IsAndroidPlatform() then
        UIViewMgr:ShowView(UIViewID.RequirePermission)
        return
    end

    UIViewMgr:ShowView(UIViewID.LoginSplash)
end

function PreLoginMgr:OnEnd()

end

function PreLoginMgr:OnShutdown()

end

function PreLoginMgr:CheckPermissions()
    local IsNeedRequirePermission = false
    for i = 1, #self.AndroidPermissions do
        IsNeedRequirePermission = _G.UE.UAndroidPermissionFunctionLibrary.CheckPermission(self.AndroidPermissions[i]) or IsNeedRequirePermission
        print("[PreLoginMgr:CheckAndroidPermissions] ", self.AndroidPermissions[i], IsNeedRequirePermission)
    end
end

function PreLoginMgr:AcquirePermissions()
    local PermissionProxy = _G.UE.UAndroidPermissionFunctionLibrary.AcquirePermissions(self.AndroidPermissions);
    if PermissionProxy then
        PermissionProxy.OnPermissionsGrantedDynamicDelegate:Add(PermissionProxy, function(Permissions, GrantResults)
            for i, v in ipairs(Permissions) do
                print("[PreLoginMgr:AcquirePermissions] OnPermissionsGrantedDynamicDelegate Permission:", v)
            end
            for i, v in ipairs(GrantResults) do
                print("[PreLoginMgr:AcquirePermissions] OnPermissionsGrantedDynamicDelegate Result:", v)
            end
        end)
    end
end

function PreLoginMgr:LoadData()
    local bUseAsync = self.UserAgreementFlag == 0 or self.RequirePermissionFlag == 0

    -- SparkMore
    local SparkMorePath = "FileMediaSource'/Game/Movies/MediaAssets/SparkMore.SparkMore'"
    local function SparkMoreCallback()
        FLOG_INFO("[PreLoginMgr:LoadData] SparkMoreCallback ")
        self.SparkMore = _G.ObjectMgr:GetObject(SparkMorePath)
    end
    if bUseAsync then
        _G.ObjectMgr:LoadObjectAsync(SparkMorePath, SparkMoreCallback)
    else
        self.SparkMore = _G.ObjectMgr:LoadObjectSync(SparkMorePath)
    end

    -- LightSpeed
    local LightSpeedPath
    if CommonUtil.IsInternationalChina() then
        LightSpeedPath = "FileMediaSource'/Game/Movies/MediaAssets/LightspeedCN.LightspeedCN'"
    else
        LightSpeedPath = "FileMediaSource'/Game/Movies/MediaAssets/LightspeedEN.LightspeedEN'"
    end
    local function LightSpeedCallback()
        FLOG_INFO("[PreLoginMgr:LoadData] LightSpeedCallback ")
        self.LightSpeed = _G.ObjectMgr:GetObject(LightSpeedPath)
    end
    if bUseAsync then
        _G.ObjectMgr:LoadObjectAsync(LightSpeedPath, LightSpeedCallback)
    else
        self.LightSpeed = _G.ObjectMgr:LoadObjectSync(LightSpeedPath)
    end

    -- MediaPlayer
    local MediaPlayerPath = "MediaPlayer'/Game/Movies/MediaAssets/SparkMore_MP.SparkMore_MP'"
    local function MediaPlayerCallback()
        FLOG_INFO("[PreLoginMgr:LoadData] MediaPlayerCallback ")
        ---@type UMediaPlayer
        self.MediaPlayer = _G.ObjectMgr:GetObject(MediaPlayerPath)
    end
    if bUseAsync then
        _G.ObjectMgr:LoadObjectAsync(MediaPlayerPath, MediaPlayerCallback)
    else
        self.MediaPlayer = _G.ObjectMgr:LoadObjectSync(MediaPlayerPath)
    end
end

function PreLoginMgr:ShowSparkMore(Callback)
    FLOG_INFO("[PreLoginMgr:ShowSparkMore] SparkMore ")
    self.HasShowSparkMore = false
    self.MediaPlayer:OpenSource(self.SparkMore)
    self.MediaPlayer.OnEndReached:Add(self.MediaPlayer, function()
        if self.HasShowSparkMore == false then
            FLOG_INFO("[PreLoginMgr:ShowSparkMore] LightSpeed ")
            self.HasShowSparkMore = true
            self.MediaPlayer:OpenSource(self.LightSpeed)
        else
            FLOG_INFO("[PreLoginMgr:ShowSparkMore] Clear... ")
            self.MediaPlayer.OnEndReached:Clear()
            self.MediaPlayer:Close()

            Callback()
        end
    end)
end

return PreLoginMgr