---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by richyczhou.
--- DateTime: 2024/10/30 9:53
---

local CommonUtil = require("Utils/CommonUtil")
local LuaClass = require("Core/LuaClass")
local MgrBase = require("Common/MgrBase")
local PathMgr = require("Path/PathMgr")
local SaveKey = require("Define/SaveKey")

local FLOG_INFO = _G.FLOG_INFO
local FLOG_WARNING = _G.FLOG_WARNING
local FLOG_ERROR = _G.FLOG_ERROR

---@class CgMgr : MgrBase
local CgMgr = LuaClass(MgrBase)

function CgMgr:Ctor()
    --- 游戏内全局视频音量0-1 (对应设置中调节系统音量可控制数值0-100)
    self.G_VideoVolume = 0
    self.MediaPlayerActor = nil
end

function CgMgr:OnInit()
    FLOG_INFO("[CgMgr:OnInit] ")
end

function CgMgr:OnBegin()
    local VideoVolume = _G.UE.USaveMgr.GetInt(SaveKey.VideoVolume, 50, false)
    if VideoVolume then
        self.G_VideoVolume = VideoVolume / 100
    end
    FLOG_INFO("[CgMgr:OnBegin] VideoVolume:%d, %.2f", VideoVolume, self.G_VideoVolume)
end

function CgMgr:OnEnd()

end

function CgMgr:OnShutdown()

end

function CgMgr:OnTracksChanged()
    FLOG_INFO("[CgMgr:OnTracksChanged] ")
end

function CgMgr:OnMediaClosed()
    FLOG_INFO("[CgMgr:OnMediaClosed] ")
end

function CgMgr:OnMediaOpened(OpenedUrl)
    FLOG_INFO("[CgMgr:OnMediaOpened] OpenedUrl:%s", OpenedUrl)
end

function CgMgr:OnMediaOpenFailed(FailedUrl)
    FLOG_INFO("[CgMgr:OnMediaOpenFailed] FailedUrl:%s", FailedUrl)
end

function CgMgr:OnPlaybackResumed()
    FLOG_INFO("[CgMgr:OnPlaybackResumed] ")
end

function CgMgr:OnMediaEnd()
    FLOG_INFO("[CgMgr:OnMediaEnd] ")
end

function CgMgr:SetMovieImage(MovieImage)
    if self.MediaPlayerActor and CommonUtil.IsObjectValid(self.MediaPlayerActor) then
        self.MediaPlayerActor:SetMovieImage(MovieImage)
        FLOG_INFO("[CgMgr:SetMovieImage] ")
    end
end

function CgMgr:GetCGPath()
    -- Android/iOS在Movies下，PC在Movies_Launcher下
    local CGPath = PathMgr.ContentDirRelative() .. "GameMovies/LauncherMovie.mp4"
    if not PathMgr.ExistFile(CGPath) then
        CGPath = PathMgr.ContentDirRelative() .. "MoviesLauncher/LauncherMovie.mp4"
    end
    return CGPath
end

function CgMgr:GetVideoPath()
    return string.format("%sDownloader/%s/Dolphin/Paks/Movie.mp4", _G.UE.UPathMgr.SavedDir(false), _G.UE.UVersionMgr.GetAppVersion())
end

function CgMgr:GetLoginMoviePath()
    local CGPath = PathMgr.ContentDirRelative() .. "GameMovies/LoginMovie.mp4"
    if not PathMgr.ExistFile(CGPath) then
        CGPath = PathMgr.ContentDirRelative() .. "GameMovies/LauncherMovie.mp4"
    end
    return CGPath
end

function CgMgr:SetCGPath(Path)
    self.MoviePath = Path
end

function CgMgr:PlayCGVideo(MovieImage, ForceMute)
    local Path = self.MoviePath
    if not PathMgr.ExistFile(Path) then
        FLOG_WARNING("[CgMgr:PlayCGVideo] Path no exist : %s", Path)
        return
    end

    FLOG_INFO("[CgMgr:PlayCGVideo] Path:%s", Path)
    if self.DelayStopCGTimerId ~= nil then
        _G.TimerMgr:CancelTimer(self.DelayStopCGTimerId)
        self.DelayStopCGTimerId = nil
    end

    local VideoVolume = 0.5
    if ForceMute then
        VideoVolume = 0
    else
        local bIsMute = _G.UE.USaveMgr.GetInt(SaveKey.IsCGMute, 0, false) == 1
        VideoVolume = bIsMute and 0 or self.G_VideoVolume
    end
    FLOG_INFO("[CgMgr:PlayCGVideo] VideoVolume:%.2f", VideoVolume)

    self:ReleaseCGPlayer()

    local ActorPath = "Blueprint'/Game/UI/BP/LoginNew/MediaPlayerActor_BP.MediaPlayerActor_BP_C'"
    local ActorCls = _G.ObjectMgr:GetClass(ActorPath)
    if not ActorCls then
        FLOG_WARNING("[CgMgr:PlayCGVideo] AMediaPlayerActor GetClass failed...", ActorPath)
        self.MediaPlayerActor = CommonUtil.SpawnActor(_G.UE.AMediaPlayerActor.StaticClass())
    else
        self.MediaPlayerActor = CommonUtil.SpawnActor(ActorCls)
    end

    if self.MediaPlayerActor and CommonUtil.IsObjectValid(self.MediaPlayerActor) then
        --self.MediaPlayerActor:SetMovieImage(self.MovieImage)
        self.MediaPlayerActor.AudioVolume = VideoVolume
        self.MediaPlayerActor:SetMovieImage(MovieImage)

        self.MediaPlayerActor.OnTracksChangedEvent:Bind(self.MediaPlayerActor, self.OnTracksChanged)
        self.MediaPlayerActor.OnMediaOpenedEvent:Bind(self.MediaPlayerActor, self.OnMediaOpened)
        self.MediaPlayerActor.OnMediaOpenFailedEvent:Bind(self.MediaPlayerActor, self.OnMediaOpenFailed)
        self.MediaPlayerActor.OnPlaybackResumedEvent:Bind(self.MediaPlayerActor, self.OnPlaybackResumed)
        self.MediaPlayerActor.OnMediaEndEvent:Bind(self.MediaPlayerActor, self.OnMediaEnd)
        self.MediaPlayerActor.OnMediaClosedEvent:Bind(self.MediaPlayerActor, self.OnMediaClosed)
        self.MediaPlayerActor:PlayVideo(Path)
    else
        FLOG_WARNING("[CgMgr:PlayCGVideo] Play CG failed...")
    end
end

function CgMgr:StopCGVideo()
    --self.DelayStopCGTimerId = self:RegisterTimer(function()
    --    if self.NewAudioVolume and self.MediaPlayerActor and CommonUtil.IsObjectValid(self.MediaPlayerActor) then
    --        FLOG_INFO("[CgMgr:StopCGVideo] AudioVolume:%.2f", self.NewAudioVolume)
    --        self.NewAudioVolume = self.NewAudioVolume - 0.1
    --        if self.NewAudioVolume <= 0 then
    --            self.NewAudioVolume = 0
    --            self:ReleaseCGPlayer()
    --            return
    --        end
    --        self.MediaPlayerActor:SetNativeVolume(self.NewAudioVolume)
    --    end
    --end, 0, 0.1, 11)
    self:ReleaseCGPlayer()
end

function CgMgr:ReleaseCGPlayer()
    FLOG_INFO("[CgMgr:ReleaseCGPlayer] ")
    if self.MediaPlayerActor and CommonUtil.IsObjectValid(self.MediaPlayerActor) then
        self.MediaPlayerActor.OnTracksChangedEvent:Unbind()
        self.MediaPlayerActor.OnMediaOpenedEvent:Unbind()
        self.MediaPlayerActor.OnMediaOpenFailedEvent:Unbind()
        self.MediaPlayerActor.OnPlaybackResumedEvent:Unbind()
        self.MediaPlayerActor.OnMediaEndEvent:Unbind()
        self.MediaPlayerActor.OnMediaClosedEvent:Unbind()

        self.MediaPlayerActor:ReleasePlayer()
        CommonUtil.DestroyActor(self.MediaPlayerActor)
    end
    self.MediaPlayerActor = nil
end

function CgMgr:SetNativeVolume(VolumeValue)
    FLOG_INFO("[CgMgr:SetNativeVolume] VolumeValue:%.2f", VolumeValue)
    if self.MediaPlayerActor and CommonUtil.IsObjectValid(self.MediaPlayerActor) then
        self.MediaPlayerActor:SetNativeVolume(VolumeValue)
    end
end

function CgMgr:SeekTo(Second)
    FLOG_INFO("[CgMgr:Seek] Second:%.2f", Second)
    if self.MediaPlayerActor and CommonUtil.IsObjectValid(self.MediaPlayerActor) then
        self.MediaPlayerActor:Seek(Second)
    end
end

function CgMgr:SetNoFlushSinks(bNewValue)
    FLOG_INFO("[CgMgr:SetNoFlushSinks] bNewValue:%s", bNewValue and "true" or "false")
    if self.MediaPlayerActor and CommonUtil.IsObjectValid(self.MediaPlayerActor) then
        self.MediaPlayerActor:SetNoFlushSinks(bNewValue)
    end
end

function CgMgr:SetAutoClear(bNewValue)
    FLOG_INFO("[CgMgr:SetAutoClear] bNewValue:%s", bNewValue and "true" or "false")
    if self.MediaPlayerActor and CommonUtil.IsObjectValid(self.MediaPlayerActor) then
        self.MediaPlayerActor:SetAutoClear(bNewValue)
    end
end

return CgMgr